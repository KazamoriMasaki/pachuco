#!/bin/sh -

help="Driver script for the pachuco compiler

Usage: compile [ options ] [ source files ... ]

Options:

-o: Output executable
-s: Don't delete the generated assembly files after compilation
-v: Verbose - display the actual compilation command
-T: Time the compiler.  Compiler output is sent to /dev/null.
-C: Use the specified compiler executable.
-D: Use the compiler and runtime under the specified directory, rather
    than the one in the same tree as this script.
"

set -e
basedir=$(dirname $(dirname $0))

[ -z "$TMPDIR" ] && TMPDIR=/tmp

files=
dest=
time=
leaveasm=
verbose=
compiler=$basedir/build/stage2
runtimedir=$basedir/runtime

while [ $# -gt 0 ] ; do
    case $1 in
    -o)
        dest="$2"
        shift 2
        ;;

    -T)
        time=1
        shift 1
        ;;

    -D)
        runtimedir="$2/runtime"
        compiler="$2/build/stage2"
        shift 2
        ;;

    -C)
        compiler="$2"
        echo "$compiler" | grep '/' >/dev/null || compiler="./$compiler"
        shift 2
        ;;

    -s)
        leaveasm=1
        shift 1
        ;;

    -v)
        verbose=1
        shift 1
        ;;

    -h)
        echo "$help" 1>&2
        exit 0
        ;;

    -*)
        echo "Unknown option $1" 1>&2
        exit 1
        ;;

    *)
        files="$files $1"
        shift 1
        ;;
    esac
done

cmd="$compiler compile $runtimedir/runtime.pco $runtimedir/cl-compat.pco $runtimedir/runtime2.pco $runtimedir/io.pco 'no-interp!$runtimedir/compiled-builtins.pco' 'no-interp!$runtimedir/gc.pco' $files"

[ -n "$verbose" ] && echo $cmd 1>&2

if [ -n "$time" ] ; then
    eval perf stat $cmd >/dev/null
else
    if [ -z "$dest" ] ; then
        echo "Destination file not specified" 1>&2
        exit 1
    fi

    asmclean=''
    if [ -z "$leaveasm" ] ; then
        asmdest=$TMPDIR/$$
        trap 'rm -rf $asmclean' EXIT
    else
        asmdest=${dest}
    fi

    asmout="${asmdest}.s"
    asmclean="$asmout"
    asmfiles="$asmout"
    eval $cmd >"$asmout"

    target=''
    # bit of a hack: if we are on x86-86, but it looks like the compiler
    # didn't produce x86-64 asm, assume a i386 target
    if [ "$(uname -m)" = x86_64 ] && ! grep -m1 '^movq' $asmout >/dev/null ; then
        target='-m32'
    fi

    gcc -Wall -g $target $asmfiles $runtimedir/main.c -o $dest
fi
