;;; common runtime definitions, even when bootstrapping from CL

(define (compound-symbol . pieces)
  (intern (string-flatten (mapfor (p pieces)
                            (cond ((string? p) (string-symbolcase p))
                                  ((symbol? p) (symbol-name p))
                                  (true (error "~S" p)))))))

(define (list-repeating el len)
  (if (= 0 len) ()
      (cons el (list-repeating el (1- len)))))

;;; Simple option list support
;;;
;;; The options-bind macro takes an options specification
;;; (option-specs, unevaluated), an options list (evaluated), and a
;;; body (evaluated).  Each option-spec creates a variable binding,
;;; and indicates how to obtain the value from the options list.
;;;
;;; Each option (element of the evaluated options list) denotes an
;;; option name and a value as follows: If the option is a symbol, its
;;; name is the symbol, and its value is true.  If the option is a
;;; list, its name is in the car, and its value is the cdr.  Only one
;;; option may appear for a given option name.
;;;
;;; Each option-spec is a list of length two, giving the option name
;;; and default value.  It creates a binding of a variable with the
;;; option name to the value given by the option with the same name,
;;; or the default value if no such option appears.

(defmacro (options-bind option-specs options . body)
  (let* ((opts-state (gensym))          ; the state of each option
         (opt (gensym))                 ; the option being considered
         (name (gensym))                ; the option name
         (val (gensym))                 ; the option value
         (state (gensym)))              ; state of the current option
    (quasiquote
      (let* (((unquote opts-state)
              (list . (unquote
                      (mapfor (os option-specs)
                        (quasiquote (list* '(unquote (first os)) false
                                           (unquote (second os)))))))))
        (dolist ((unquote opt) (unquote options))
          (let* (((unquote val) true)
                 ((unquote name) (if (pair? (unquote opt))
                                     (begin (set! (unquote val)
                                                  (cdr (unquote opt)))
                                            (car (unquote opt)))
                                     (unquote opt)))
                 ((unquote state) (assoc (unquote name) (unquote opts-state))))
            (unless (unquote state)
              (error "unknown option ~S" (unquote name)))
            (when (second (unquote state))
              (error "repeated option ~S" (unquote name)))
            (rplaca (cdr (unquote state)) true)
            (rplacd (cdr (unquote state)) (unquote val))))
        (bind (unquote (mapfor (os option-specs) (first os)))
              (nmapfor (x (unquote opts-state)) (cddr x))
          . (unquote body))))))

;;; Simple struct support - just vectors with accessor functions

(define (struct-field-initializers fields n)
  (if (null? fields) ()
      (let* ((field (car fields))
             (rest (struct-field-initializers (cdr fields) (1+ n))))
        (if (pair? field)
            (cons (quasiquote
                    (raw-vector-set! s (unquote n) (unquote (second field))))
                  rest)
            rest))))

(define (struct-accessor-definitions struct fields n)
  (if (null? fields) ()
      (let* ((field (car fields))
             (field-name (if (pair? field) (first field) field))
             (ref-name (compound-symbol struct "-" field-name))
             (set-name (compound-symbol struct "-set-" field-name "!")))
        (list*
          (quasiquote
             (defmacro ((unquote ref-name) s)
               (list 'raw-vector-ref s (unquote n))))

          (quasiquote
            (defmacro ((unquote set-name) s val)
               (list 'raw-vector-set! s (unquote n) val)))

          (struct-accessor-definitions struct (cdr fields) (1+ n))))))

(define (struct-field-position f fields n)
  (let* ((field (car fields)))
    (if (eq? f (if (pair? field) (car fields) field))
        n
        (struct-field-position f (cdr fields) (1+ n)))))

(defmacro (define-struct struct options . fields)
  (options-bind ((constructor false)) options
    (let* ((num-fields (length fields))
           (constr-name (if constructor
                            (first constructor)
                            (compound-symbol "make-" struct)))
           (constr-params (if constructor
                              (cdr constructor)
                              ())))
      (quasiquote (definitions
        (define ((unquote constr-name) . (unquote constr-params))
            (let* ((s (make-vector (unquote num-fields) false)))
              (unquote-splicing (struct-field-initializers fields 0))
              (unquote-splicing
                (mapfor (cp constr-params)
                  (list 'raw-vector-set! 's
                        (struct-field-position cp fields 0) cp)))
              s))

        . (unquote (struct-accessor-definitions struct fields 0)))))))

;;; hash tables

(defconstant hashtable-initial-size 16)

(define-struct hashtable ((constructor make-hashtable hashf equalf))
  hashf
  equalf
  (buckets (make-vector hashtable-initial-size false))
  (size 0))

(define-struct ht-entry ((constructor make-ht-entry key value hash next))
  key
  value
  hash
  next)

(define (ht-entry-find key hte equalf)
  (and hte
       (if (funcall equalf key (ht-entry-key hte))
           hte
           (ht-entry-find key (ht-entry-next hte) equalf))))

(define (hashtable-ref ht key)
  (let* ((buckets (hashtable-buckets ht))
         (index (logand (funcall (hashtable-hashf ht) key)
                        (1- (vector-length buckets))))
         (hte (ht-entry-find key (raw-vector-ref buckets index)
                             (hashtable-equalf ht))))
    (and hte (ht-entry-value hte))))

(define (hashtable-set! ht key value)
  (when (>= (* 2 (hashtable-size ht)) (vector-length (hashtable-buckets ht)))
    (hashtable-grow ht))

  (let* ((keyhash (funcall (hashtable-hashf ht) key))
         (buckets (hashtable-buckets ht))
         (index (logand keyhash (1- (vector-length buckets))))
         (bucket (raw-vector-ref buckets index))
         (hte (ht-entry-find key bucket (hashtable-equalf ht))))
    (if hte
        (ht-entry-set-value! hte value)
        (begin
          (hashtable-set-size! ht (1+ (hashtable-size ht)))
          (raw-vector-set! buckets index
                           (make-ht-entry key value keyhash bucket))))))

(define (hashtable-grow ht)
  (let* ((buckets (hashtable-buckets ht))
         (new-buckets-len (* 2 (vector-length buckets)))
         (new-buckets (make-vector new-buckets-len false)))
    (labels ((rehash-hte (hte)
               (when hte
                 (let* ((index (logand (ht-entry-hash hte)
                                       (1- new-buckets-len)))
                        (next (ht-entry-next hte)))
                   (ht-entry-set-next! hte (raw-vector-ref new-buckets index))
                   (raw-vector-set! new-buckets index hte)
                   (rehash-hte next))))

             (rehash-bucket (index)
               (when (< index (vector-length buckets))
                 (rehash-hte (raw-vector-ref buckets index))
                 (rehash-bucket (1+ index)))))
      (rehash-bucket 0))
    (hashtable-set-buckets! ht new-buckets)))

(define (for-hashtable-call ht f)
  (labels ((for-entries (entry)
             (when entry
               (funcall f (ht-entry-key entry) (ht-entry-value entry))
               (for-entries (ht-entry-next entry))))
           (for-buckets (buckets n)
             (when (< n (vector-length buckets))
               (for-entries (raw-vector-ref buckets n))
               (for-buckets buckets (1+ n)))))
    (for-buckets (hashtable-buckets ht) 0)))

(defmacro (for-hashtable k-v-ht . body)
  (quasiquote
    (for-hashtable-call (unquote (third k-v-ht))
      (lambda ((unquote (first k-v-ht)) (unquote (second k-v-ht)))
        . (unquote body)))))

(define (string-hash str)
  (string-range-hash str 0 (string-length str)))

(define (string-range-hash str index len)
  (labels ((scan (pos hash)
             (if (= pos (string-length str))
                 hash
                 (scan (1+ pos)
                       (+ hash (* 17 (character-code (string-ref str pos))))))))
    (scan 0 0)))
