;;; I/O

(define (check-syscall-result name res)
  (when (< res 0)
    (error "~A: ~D" name (- res)))
  res)

(defmacro (checked-syscall name . args)
  (quasiquote
    (check-syscall-result (unquote name)
      (raw->fixnum (c-call (unquote name) . (unquote args))))))

(defmacro (define-syscall-read-write name sysname)
  (quasiquote (define ((unquote name) fd str offset len)
                (check-string-range str offset len)
                (checked-syscall  (unquote sysname) (fixnum->raw fd)
                                  (raw-string-address str offset)
                                  (fixnum->raw len)))))

(define (make-c-string str)
  (define len (string-length str))
  (define c-str (make-string (1+ len) (code-character 0)))
  (string-copy str 0 c-str 0 len)
  (raw-string-address c-str 0))

(when-compiling
  (define-syscall-read-write raw-write-substring "write")
  (define raw-stdout 1)
  (define raw-stderr 2)

  (define-syscall-read-write raw-read-substring "read")
  (define raw-stdin 0)

  (define (syscall-open pathname flags mode)
    (checked-syscall "open" (make-c-string pathname)
                     (fixnum->raw flags) (fixnum->raw mode)))

  (define (syscall-close fd)
    (checked-syscall "close" (fixnum->raw fd)))

  ;; O_* values for Linux x86/x86_64

  (define (open-file-for-reading pathname)
    (syscall-open pathname 0 0))

  (define (close-file fd)
    (syscall-close fd)))

;;; Output streams

(define-struct ostream ((constructor make-ostream pos buf fd))
  pos ; Current write position in the buffer; must always point before
      ; the end of the buffer.  This means that a buffer of length 1
      ; will give unbuffered output.
  buf ; The buffer.
  fd) ; The output FD, or false for a pure buffer.

(define (ostream-capacity os)
  (string-length (ostream-buf os)))

(define (make-fd-ostream fd size)
  (make-ostream 0 (make-string size (code-character 0)) fd))

(define (make-buffer-ostream)
  (make-ostream 0 (make-string 100 (code-character 0)) #f))

(define (buffer-ostream-to-string os)
  (substring (ostream-buf os) 0 (ostream-pos os)))

(define (write-substring os str pos len)
  (define buf-pos-after (+ (ostream-pos os) len))
  (ostream-set-pos! os
    (if (< buf-pos-after (ostream-capacity os))
        (begin
          (string-copy str pos (ostream-buf os) (ostream-pos os) len)
          buf-pos-after)
        ;; new data won't fit
        (if (ostream-fd os)
            (begin
              ;; flush to the fd
              (when (/= (ostream-pos os) 0)
                (raw-write-substring (ostream-fd os) (ostream-buf os)
                                     0 (ostream-pos os)))

              ;; if the new data is bigger than half the buffer size,
              ;; write it to the fd directly, otherwise copy into the
              ;; buffer
              (if (> (+ len len) (ostream-capacity os))
                  (begin
                    (raw-write-substring (ostream-fd os) str pos len)
                    0)
                  (begin
                    (string-copy str pos (ostream-buf os) 0 len)
                    len)))
            (begin
              ;; grow the buffer
              (define new-buf-size (* 2 (ostream-capacity os)))
              (while (> buf-pos-after new-buf-size)
                (set! new-buf-size (* 2 new-buf-size)))

              (define new-buf (make-string new-buf-size (code-character 0)))
              (string-copy (ostream-buf os) 0 new-buf 0 (ostream-pos os))
              (string-copy str pos new-buf (ostream-pos os) len)
              (ostream-set-buf! os new-buf)
              buf-pos-after)))))

(define (write-string os str)
  (write-substring os str 0 (string-length str)))

(define (write-character os ch)
  (define buf-pos (ostream-pos os))
  (string-set! (ostream-buf os) buf-pos ch)
  (set! buf-pos (1+ buf-pos))

  (ostream-set-pos! os
    (if (/= buf-pos (ostream-capacity os))
        buf-pos
        ;; buffer full
        (if (ostream-fd os)
            (begin
              (raw-write-substring (ostream-fd os) (ostream-buf os) 0 buf-pos)
              0)
            (begin
              ;; grow the buffer
              (define new-buf (make-string (* 2 buf-pos) (code-character 0)))
              (string-copy (ostream-buf os) 0 new-buf 0 buf-pos)
              (ostream-set-buf! os new-buf)
              buf-pos)))))

(define (flush-ostream os)
  (define buf-pos (ostream-pos os))
  (define fd (ostream-fd os))
  (when (and fd (/= buf-pos 0))
    (raw-write-substring fd (ostream-buf os) 0 buf-pos)
    (ostream-set-pos! os 0)))

(define stdout (make-fd-ostream raw-stdout 10000))
(define stderr (make-fd-ostream raw-stderr 1))

;;; Printing and formatting

(define print-number-digits "0123456789abcdefghijklmnopqrstuvwxyz")

(define (print-number ostr num radix)
  (if (= num 0)
      (write-character ostr #\0)
      (begin
        (unless (and (> radix 2)
                     (<= radix (string-length print-number-digits)))
          (error "Bad radix ~D" radix))

        (define negated #f)
        (when (< num 0)
          (set! negated #t)
          (set! num (- num)))

        (defmacro buf-size 21)
        (define buf (make-string buf-size (code-character 0)))
        (define pos buf-size)

        (while (> num 0)
          (set! pos (1- pos))
          (string-set! buf pos (string-ref print-number-digits
                                           (rem num radix)))
          (set! num (truncate num radix)))

        (when negated
         (set! pos (1- pos))
         (string-set! buf pos #\-))

        (write-substring ostr buf pos (- buf-size pos)))))

(define (print-string ostr str readably)
  (if readably
      (begin
        (write-character ostr #\")
        (write-string ostr str)
        (write-character ostr #\"))
      (write-string ostr str)))

(define character-names '((#\Space . "Space")
                          (#\Newline . "Newline")))

(define (character-string ch)
  (define buf (make-string 1 ch))
  buf)

(define (print-character ostr ch readably)
  (if readably
      (begin
        (write-character ostr #\\)
        (define name (assoc ch character-names))
        (write-string ostr (if name (cdr name) (character-string ch))))
      (write-string ostr (character-string ch))))

(define (print-symbol ostr sym)
  (define str (symbol-name sym))
  (write-substring ostr str 0 (string-length str)))

(define special-printed-forms
  '((#f . "#f")
    (#t . "#t")
    (#u . "#u")
    (() . "()")))

(define (print-list ostr l readably)
  (write-character ostr #\()
  (print ostr (car l) readably)
  (set! l (cdr l))

  (while (pair? l)
    (write-character ostr #\Space)
    (print ostr (car l) readably)
    (set! l (cdr l)))

  (unless (null? l)
    (write-string ostr " . ")
    (print ostr l readably))

  (write-character ostr #\)))

(define (print-vector ostr vec readably)
  (define l (vector-length vec))
  (write-string ostr "#(")

  (unless (= l 0)
    (define (print-elements-from i)
      (when (< i l)
        (write-character ostr #\Space)
        (print ostr (vector-ref vec i) readably)
        (print-elements-from (1+ i))))

    (print ostr (vector-ref vec 0) readably)
    (print-elements-from 1))

  (write-character ostr #\)))

(define (print ostr obj readably)
  (cond ((string? obj)
         (print-string ostr obj readably))
        ((number? obj)
         (print-number ostr obj 10))
        ((symbol? obj)
         (print-symbol ostr obj))
        ((pair? obj)
         (print-list ostr obj readably))
        ((vector? obj)
         (print-vector ostr obj readably))
        ((function? obj)
         (write-string ostr "#<function>"))
        (#t
         (define special (assoc obj special-printed-forms))
         (if special
             (write-string ostr (cdr special))
             (error "cannot print object")))))

;;; Formatted IO

(define (generate-formout-parser control to-write-substring to-write-character
                                 to-use-arg)
  (quasiquote (
    (define pos 0)
    (define write-from 0)
    (define control-len (string-length control))

    (while (< pos control-len)
      (define ch (string-ref control pos))
      (if (not (eq? ch #\~))
          (set! pos (1+ pos))
          (begin
            (unless (= pos write-from)
              (unquote (to-write-substring 'control 'write-from
                                           '(- pos write-from))))
            (set! pos (1+ pos))
            (if (>= pos control-len)
                (set! write-from pos)
                (begin
                  (set! ch (string-ref control pos))
                  (set! pos (1+ pos))
                  (set! write-from pos)
                  (cond ((eq? ch #\~)
                         (set! write-from (1- write-from)))

                        ((eq? ch #\%)
                         (unquote (to-write-character #\Newline)))

                        ((or (eq? ch #\A) (eq? ch #\a))
                         (unquote (to-use-arg (lambda (os arg)
                           (quasiquote
                             (print (unquote os) (unquote arg) #f))))))

                        ((or (eq? ch #\S) (eq? ch #\s))
                         (unquote (to-use-arg (lambda (os arg)
                           (quasiquote
                             (print (unquote os) (unquote arg) #t))))))

                        ((or (eq? ch #\D) (eq? ch #\d))
                         (unquote (to-use-arg (lambda (os arg)
                           (quasiquote
                             (print-number (unquote os) (unquote arg) 10))))))

                        ((or (eq? ch #\X) (eq? ch #\x))
                         (unquote (to-use-arg (lambda (os arg)
                           (quasiquote
                             (print-number (unquote os) (unquote arg) 16))))))

                        ((or (eq? ch #\C) (eq? ch #\c))
                         (unquote (to-use-arg (lambda (os arg)
                           (quasiquote
                             (print-character (unquote os) (unquote arg)
                                              #f))))))

                        (#t
                         (error "Unknown format character ~C" ch))))))))

    (unless (= pos write-from)
      (unquote (to-write-substring 'control 'write-from
                                   '(- pos write-from)))))))

(defmacro (generate-formout-list)
  (quasiquote
    (define (formout-list os control args)
      (define (consume-arg)
        (define arg (car args))
        (set! args (cdr args))
        arg)

      . (unquote
        (generate-formout-parser 'control
          ;; to-write-substring
          (lambda (str pos len)
            (quasiquote
              (write-substring os (unquote str) (unquote pos) (unquote len))))
          ;; to-write-character
          (lambda (ch) (quasiquote (write-character os (unquote ch))))
          ;; to-use-arg
          (lambda (template) (template 'os '(consume-arg))))))))
(generate-formout-list)

(defmacro (generate-formout-macro)
  (quasiquote
    (defmacro (formout os control . args)
      (if (string? control)
          (begin
           (define stmts (list 'begin))
           (define stmts-tail stmts)

           (define (push-stmt stmt)
             (set! stmt (list stmt))
             (rplacd stmts-tail stmt)
             (set! stmts-tail stmt))

           (define (consume-arg)
             (define arg (car args))
             (set! args (cdr args))
             arg)

           (unless (symbol? os)
             (define os-var (gensym))
             (push-stmt (list 'define os-var os))
             (set! os os-var))

           (unquote-splicing
             (generate-formout-parser 'control
               ;; to-write-substring
               (lambda (str pos len)
                 (quasiquote
                   (push-stmt (if (= 1 (unquote len))
                                  (list 'write-character os
                                       (string-ref (unquote str) (unquote pos)))
                                  (list 'write-substring os
                                        (substring (unquote str) (unquote pos)
                                                   (unquote len))
                                        0 (unquote len))))))
               ;; to-write-character
               (lambda (ch)
                 (quasiquote
                   (push-stmt (list 'write-character os (unquote ch)))))

               ;; to-use-arg
               (lambda (template)
                 (quasiquote
                   (push-stmt ((unquote template) os (consume-arg)))))))
           stmts)
          (quasiquote (formout-list (unquote os) (unquote control)
                                    (list . (unquote args))))))))
(generate-formout-macro)

(define (formout ostr control . args)
  (formout-list ostr control args))

(define (format-list control args)
  (define buf (make-buffer-ostream))
  (formout-list buf control args)
  (buffer-ostream-to-string buf))

(define (format control . args)
  (format-list control args))

(defmacro (format control . args)
  (define buf (gensym))
  (quasiquote
    (begin
      (define (unquote buf) (make-buffer-ostream))
      (formout (unquote buf) (unquote control) . (unquote args))
      (buffer-ostream-to-string (unquote buf)))))

(set! (error message . args)
  (formout stderr "~A~%" (format-list message args))
  (error-halt))

(when-compiling
  (define gensym-counter 0)
  (define (gensym)
    (intern (format "gensym-~D" (set! gensym-counter (1+ gensym-counter))))))

;;; Input streams

(define-struct istream ((constructor make-istream pos end buf fd))
  pos ; Current read position in the buffer
  end ; End index of valid data in the buffer
  buf ; The buffer
  fd) ; The input FD, or false if no more data available

(define (make-fd-istream fd)
  (make-istream 0 0 (make-string 10000 (code-character 0)) fd))

(define stdin (make-fd-istream raw-stdin))

(define (make-string-istream str)
  (make-istream 0 (string-length str) str #f))

(define (istream-refill is ahead)
  ;; Refill the buffer of an istream.  Returns false if there is no
  ;; more data available from the underlying reader function.
  (if (istream-fd is)
      (begin
        ;; move data down within the buffer
        (define pos (istream-pos is))
        (define len (- (istream-end is) pos))
        (define buf (istream-buf is))
        (define buf-len (string-length buf))

        (cond ((> ahead buf-len)
               ;; Need to grow the buffer to satisfy 'ahead'
               (set! buf-len (ash buf-len 1))
               (while (> ahead buf-len) (set! buf-len (ash buf-len 1)))
               (define new-buf (make-string buf-len (code-character 0)))
               (string-copy buf pos new-buf 0 len)
               (istream-set-pos! is 0)
               (istream-set-buf! is (set! buf new-buf)))

              ((> pos 0)
               ;; copy unconsumed data down within existing buffer
               (string-copy buf pos buf 0 len)
               (istream-set-pos! is 0)))

        (define readlen (raw-read-substring (istream-fd is) buf len
                                            (- buf-len len)))
        (istream-set-end! is (+ len readlen))
        (if (> readlen 0)
            #t
            (begin
              (istream-set-fd! is #f)
              #f)))
      #f))

(define (istream-eos? is)
  (and (= (istream-pos is) (istream-end is))
       (not (istream-refill is 0))))

(define (read-character is accept-eos)
  (define pos (istream-pos is))
  (cond ((< pos (istream-end is))
         (istream-set-pos! is (1+ pos))
         (raw-string-ref (istream-buf is) pos))
        ((istream-refill is 1)
         (read-character is accept-eos))
        (accept-eos #f)
        (#t (error "read-character off end of stream"))))

(define (read-string is len)
  (define pos (istream-pos is))
  (define new-pos (+ pos len))
  (define end (istream-end is))
  (if (<= new-pos end)
      (begin
        (istream-set-pos! is new-pos)
        (substring (istream-buf is) pos len))
      (begin
        (unless (istream-refill is len)
          (error "read-string off end of stream"))
        (read-string is len))))

(define (istream-consume is n)
  (define new-pos (+ (istream-pos is) n))
  (define end (istream-end is))
  (if (<= new-pos end)
      (istream-set-pos! is new-pos)
      (begin
        (set! n (- new-pos end))
        (istream-set-pos! is end)
        (unless (istream-refill is n)
          (error "istream-consume off end of stream"))
        (istream-consume is n))))

(define (peek-character is offset)
  (define pos (+ offset (istream-pos is)))
  (cond ((< pos (istream-end is))
         (raw-string-ref (istream-buf is) pos))
        ((istream-refill is offset)
         (peek-character is offset))
        (#t #f)))

;;; Reader

;;; Reader syntax is currently intended to be roughly consistent with
;;; some subset of the CL spec.

(defmacro rt-illegal -1)

(defmacro rt-alpha-uc 0)
(defmacro rt-alpha-lc 1)
(defmacro rt-digit 2)
(defmacro rt-constituent-misc 3)
(defmacro rt-constituent-max 3)

(defmacro rt-eos 4)
(defmacro rt-whitespace 5)
(defmacro rt-lparen 6)
(defmacro rt-rparen 7)
(defmacro rt-line-comment 8)
(defmacro rt-double-quote 9)
(defmacro rt-single-quote 10)
(defmacro rt-sharp-sign 11)
(defmacro rt-max 11)

;;; The readtable type for each character
(define readtable (make-vector 128 rt-illegal))

;;; For each readtable type that can be interpreted as a digit, the
;;; value to subtract from a character byte to get its digit value.
(define digit-bases (make-vector (1+ rt-max) #f))

(begin
  (dolist (n '(9 10 13 32))
    (vector-set! readtable n rt-whitespace))

  (vector-set! readtable (character-code #\() rt-lparen)
  (vector-set! readtable (character-code #\)) rt-rparen)
  (vector-set! readtable (character-code #\;) rt-line-comment)
  (vector-set! readtable (character-code #\") rt-double-quote)
  (vector-set! readtable (character-code #\') rt-single-quote)
  (vector-set! readtable (character-code #\#) rt-sharp-sign)

  (vector-set-range! readtable (character-code #\A) 26 rt-alpha-uc)
  (vector-set-range! readtable (character-code #\a) 26 rt-alpha-lc)
  (vector-set-range! readtable (character-code #\0) 10 rt-digit)
  (dolist (ch '(#\. #\* #\+ #\- #\_ #\? #\< #\> #\= #\/ #\! #\~ #\% #\$))
    (vector-set! readtable (character-code ch) rt-constituent-misc))

  (vector-set! digit-bases rt-digit (character-code #\0))
  (vector-set! digit-bases rt-alpha-uc (- (character-code #\A) 10))
  (vector-set! digit-bases rt-alpha-lc (- (character-code #\a) 10)))

(define (rt-character-type ch)
  (if ch
      (begin
        (set! ch (character-code ch))
        (define ct (if (>= ch 128) rt-illegal (raw-vector-ref readtable ch)))
        (when (= ct rt-illegal)
          (error "bad character ~C (~D)" ch (character-code ch)))
        ct)
      rt-eos))

(defmacro (rt-constituent? ct)
  (list '<= ct 'rt-constituent-max))

(define (character-alphanumeric? ch)
  (set! ch (character-code ch))
  (and (< ch 128)
       (begin
         (define ct (vector-ref readtable ch))
         (not (and (/= ct rt-alpha-uc) (/= ct rt-alpha-lc) (/= ct rt-digit))))))

(define (read-integer istr radix strict)
  ;; Reads an integer from the istream, up to the last character
  ;; forming part of the number.  Signals an error if the number ends
  ;; in a constituent character.

  (define (digit-value ch ct)
    (define base (vector-ref digit-bases ct))
    (if base
        (begin
          (define val (- (character-code ch) base))
          (if (< val radix) val #f))
        #f))

  (define (scan-integer pos val)
    (define ch (peek-character istr pos))
    (define ct (rt-character-type ch))
    (define digit (digit-value ch ct))
    (cond (digit
           (scan-integer (1+ pos) (+ digit (* radix val))))
          ((rt-constituent? ct)
           (if strict
               (error "bad digit \"~C\"" ch)
               #f))
          (#t
           (istream-consume istr pos)
           (if (not negative) val (- val)))))

  (define pos 0)
  (define first-ch (peek-character istr 0))
  (define negative (and (eq? #\- first-ch)
                        (begin
                          (set! pos (1+ pos))
                          (set! first-ch (peek-character istr 1))
                          #t)))

  (define digit (digit-value first-ch (rt-character-type first-ch)))
  (if digit
      (scan-integer (1+ pos) digit)
      (if strict
          (error "expected number, but got \"C\"" first-ch)
          #f)))

(define (read-token is first-ct)
  (define ch (peek-character is 0))
  (when (eq? #\- ch)
    ;; could be a negative number, need to look at the second char
    (set! ch (peek-character is 1)))

  (define ct (rt-character-type ch))
  (define number (and (= ct rt-digit) (read-integer is 10 #f)))
  (if number number
      (begin
        (define (scan-token is pos)
          (if (rt-constituent? (rt-character-type (peek-character is pos)))
              (scan-token is (1+ pos))
              pos))
        (intern (read-string is (scan-token is 0))))))

(define (consume-whitespace istr)
  (define ch (peek-character istr 0))
  (define ct (rt-character-type ch))
  (when (= ct rt-whitespace)
    (istream-consume istr 1)
    (consume-whitespace istr)))

(define (read-list istr c)
  (consume-whitespace istr)
  (define ch (peek-character istr 0))
  (cond ((eq? #\) ch)
         (istream-consume istr 1)
         ())
        ((and (eq? #\. ch)
              (not (rt-constituent? (rt-character-type (peek-character istr 1)))))
         (istream-consume istr 1)

         (until (read-maybe istr c))
         (define result (car c))

         ;; find and consume the closing )
         (define (find-rparen)
           (consume-whitespace istr)
           (define ch (peek-character istr 0))
           (if (eq? #\) ch)
               (istream-consume istr 1)
               (begin
                 (when (read-maybe istr c)
                   (error "more than one object follows . in list"))
                 (find-rparen))))
         (find-rparen)

         result)
        (#t
         (if (read-maybe istr c)
             (begin
               (define h (car c))
               (define t (read-list istr c))
               (cons h t))
             (read-list istr c)))))

(define (consume-line-comment istr)
  (define ch (read-character istr #t))
  (when (and ch (not (eq? ch #\Newline)))
    (consume-line-comment istr)))

(define (read-string-literal istr)
  (define buf (make-buffer-ostream))

  (define (scan-string)
    (define ch (read-character istr #f))
    (unless (eq? ch #\")
      (when (eq? ch #\\)
        (set! ch (read-character istr #f)))
      (write-character buf ch)
      (scan-string)))

  (scan-string)
  (buffer-ostream-to-string buf))

(define (rassoc-equal key l)
  (cond ((null? l) #f)
        ((equal? key (cdar l)) (car l))
        (#t (rassoc-equal key (cdr l)))))

(define (read-constituents is)
  (define pos 0)
  (while (rt-constituent? (rt-character-type (peek-character is pos)))
    (set! pos (1+ pos)))
  (read-string is pos))

(define (read-character-literal istr)
  (if (rt-constituent? (rt-character-type (peek-character istr 1)))
      (begin
        ;; a character name token
        (define name (read-constituents istr))
        (define named-character (rassoc-equal name character-names))
        (unless named-character (error "unknown character name ~A" name))
        (car named-character))
      (read-character istr #f)))

(define (read-sharp-signed istr)
  (define ch (read-character istr #f))

  (define (read-radixed-integer radix)
    (define val (read-integer istr radix #t))
    (unless (and val
                 (not (rt-constituent? (rt-character-type (peek-character istr
                                                                          0)))))
      (error "bad digit ~C" (peek-character istr 0)))
    val)

  (define (check-for-single-char)
    (define ch (peek-character istr 0))
     (when (rt-constituent? (rt-character-type ch))
       (error "unknown character ~C after sharp sign" ch)))

  (cond ((eq? ch #\t)
         (check-for-single-char)
         #t)
        ((eq? ch #\f)
         (check-for-single-char)
         #f)
        ((eq? ch #\u)
         (check-for-single-char)
         #u)
        ((eq? ch #\\) (read-character-literal istr))
        ((or (eq? ch #\x) (eq? ch #\X)) (read-radixed-integer 16))
        ((or (eq? ch #\b) (eq? ch #\B)) (read-radixed-integer 2))
        (#t (error "unknown sharp sign sequence #~C" ch))))

(define (read-maybe istr c)
  ;; like read, but might not return a value (in cases such as
  ;; comments) returns false if no value was read, otherwise it puts
  ;; the value into the car of the second arg.  this is the first time
  ;; it hurts not to have multiple returns!
  (define ch (peek-character istr 0))
  (define ct (rt-character-type ch))
  (cond ((= ct rt-whitespace)
         (istream-consume istr 1)
         #f)
        ((rt-constituent? ct)
         (rplaca c (read-token istr ct)))
        ((= ct rt-lparen)
         (istream-consume istr 1)
         (rplaca c (read-list istr c)))
        ((= ct rt-double-quote)
         (istream-consume istr 1)
         (rplaca c (read-string-literal istr)))
        ((= ct rt-single-quote)
         (istream-consume istr 1)
         (rplaca c (list 'quote (read istr))))
        ((= ct rt-sharp-sign)
         (istream-consume istr 1)
         (rplaca c (read-sharp-signed istr)))
        ((= ct rt-line-comment)
         (consume-line-comment istr)
         #f)
        ((= ct rt-eos)
         (error "unexpected end of stream while reading"))
        (#t
         (error "don't know how to handle character ~C (~D -> ~D)"
                ch (character-code ch) ct))))

(define (read istr . eos-val)
  (define c (cons () ()))
  (define (attempt-read)
    (if (and (not (null? eos-val)) (istream-eos? istr))
        (car eos-val)
        (if (read-maybe istr c)
            (car c)
            (attempt-read))))
  (attempt-read))

;;; Files

(defmacro (with-open-file-for-reading var-pathname . body)
  (define fd (gensym))
  (quasiquote
    (begin
      (define (unquote fd)
              (open-file-for-reading (unquote (cadr var-pathname))))
      (define (unquote (car var-pathname)) (make-fd-istream (unquote fd)))
      (unquote-splicing body)
      (close-file (unquote fd)))))
