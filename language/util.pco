;;; Miscellaneous utilities

;;; List-like buffers
;;; Represented as (head . tail)

(define (make-buffer)
  ;; create a buffer
  (let* ((buf (cons () ())))
    (cons buf buf)))

(define (buffer-add buf el)
  ;; add an item to the end of a buffer
  (let* ((newtail (cons el ())))
    (rplacd (cdr buf) newtail)
    (rplacd buf newtail)))

(define (buffer-concat buf1 buf2)
  ;; concatenate two buffers
  (rplacd (cdr buf1) (cdar buf2))
  (rplacd buf1 (cdr buf2)))

(define (buffer-list buf)
  ;; turn a buffer into a list
  (cdar buf))


(define (lassoc key lalist)
  ;; from a list-of-alists, find a cons with the key
  (if (null? lalist) false
      (or (assoc key (car lalist)) (lassoc key (cdr lalist)))))

(define (lapush key val lalist)
  ;; push an key-val entry onto a list-of-alists
  (rplaca lalist (cons (cons key val) (car lalist))))

(define (string-starts-with? str prefix)
  (string-range-equal? str 0 prefix 0 (string-length prefix)))


;;; Symbol tables

(define (make-symboltable)
  (make-hashtable (function symbol-id) (function eq?)))

(defmarco (symboltable-ref st sym) (list 'hashtable-ref st sym))
(defmarco (symboltable-set! st sym val) (list 'hashtable-set! st sym val))

(define (symboltable-list-ref l sym)
  (and (not (null? l))
       (let* ((res (symboltable-ref (car l) sym)))
         (or res (symboltable-list-ref (cdr l) sym)))))
