;;; Interpreter

;;; An interpreter environment is a list of alists, each mapping

(define interpreter-builtin-forms (make-symboltable))

(define (register-interpreter-builtin keyword func)
  (symboltable-set! interpreter-builtin-forms keyword func))

(defmacro (define-interpreter-builtin-form keyword . body)
  (quasiquote (register-interpreter-builtin '(unquote keyword)
                                            (lambda (args env in-body)
                                              . (unquote body)))))

(define interpreter-builtin-vars (make-symboltable))

(define (register-interpreter-builtin-var name val)
  (symboltable-set! interpreter-builtin-vars name (cons val ())))

(define (make-initial-interpreter-env)
  (list (make-symboltable) interpreter-builtin-vars))

(define (eval-form-aux form env in-body)
  (cond ((pair? form)
         (let* ((keyword (car form))
                (args (cdr form))
                (builtin (and (symbol? keyword)
                              (symboltable-ref interpreter-builtin-forms
                                               keyword))))
           (if builtin
               (funcall builtin args env in-body)
               (eval-call form env))))
        ((symbol? form)
         (let* ((cell (symboltable-list-ref env form)))
           (unless cell (error "unbound variable ~S" form))
           (car cell)))
        (true form)))

(define (eval-form form env)
  (eval-form-aux form env false))

(define (eval-body-form form env)
  (eval-form-aux form env true))

(define (eval-body forms env)
  (if (null? forms)
      #u
      (eval-body-aux forms env)))

(define (eval-body-aux forms env)
  (if (null? (cdr forms))
      (eval-form-aux (car forms) env true)
      (begin
        (eval-form-aux (car forms) env true)
        (eval-body-aux (cdr forms) env))))

(define (add-lambda-vars vars formals actuals)
  (cond ((null? formals)
         (unless (null? actuals)
           (error "surplus arguments ~S" actuals)))
        ((symbol? formals)
         (symboltable-set! vars formals (cons actuals ())))
        ((null? actuals)
         (error "insufficient arguments"))
        (true
         (symboltable-set! vars (car formals) (cons (car actuals) ()))
         (add-lambda-vars vars (cdr formals) (cdr actuals)))))

(define-interpreter-builtin-form lambda
  (lambda (actuals)
    (let* ((vars (make-symboltable)))
      (add-lambda-vars vars (car args) actuals)
      (eval-body (cdr args) (cons vars env)))))

(define (eval-forms forms env)
  (mapfor (form forms) (eval-form-aux form env false)))

(define (eval-call form env)
  (let* ((evaled-subforms (eval-forms form env)))
    (funcall (car evaled-subforms) (cdr evaled-subforms))))

(define-interpreter-builtin-form begin
  (eval-body args (cons false env)))

(define-interpreter-builtin-form definitions
  (unless in-body (error "definitions not in body"))
  (eval-body args env))

(define-interpreter-builtin-form define
  (unless in-body (error "define not in body"))
  (let* ((var (first args))
         (val (if (null? (cdr args)) #u
                  (eval-form-aux (second args) env false)))
         (st (car env)))
    (unless (symbol? var) (error "bad variable name ~S" var))
    (unless st (rplaca env (set! st (make-symboltable))))
    (when (symboltable-ref st var) (error "variable ~S already bound" var))
    (symboltable-set! st var (cons val ()))
    val))

(define-interpreter-builtin-form set!
  (let* ((val (eval-form-aux (second args) env false))
         (cell (symboltable-list-ref env (first args))))
    (unless cell (error "unbound variable ~S" (first args)))
    (rplaca cell val)
    val))

(define-interpreter-builtin-form if
  (if (subject-language-boolean (eval-form-aux (first args) env false))
      (eval-form-aux (second args) env false)
      (if (null? (cddr args))
          #u
          (eval-form-aux (third args) env false))))

(define-interpreter-builtin-form quote
  (first args))

(define (excess-args keyword)
  (error "excess arguments to ~S" keyword))

(define (insufficient-args keyword)
  (insufficient-args keyword))

(define (interpreter-builtin-op-0 keyword func)
  (lambda (args env in-body)
    (unless (null? args) (excess-args keyword))
    (funcall func)))

(define (interpreter-builtin-op-1 keyword func)
  (lambda (args env in-body)
    (cond ((null? args)
           (insufficient-args keyword))
          ((not (null? (cdr args)))
           (excess-args keyword))
          (true
           (funcall func (eval-form-aux (car args) env false))))))

(define (interpreter-builtin-op-2 keyword func)
  (lambda (args env in-body)
    (when (null? args)
      (insufficient-args keyword))
    (let* ((args1 (cdr args)))
      (cond ((null? args1)
             (insufficient-args keyword))
            ((not (null? (cdr args1)))
             (excess-args keyword))
            (true
             (funcall func (eval-form-aux (car args) env false)
                      (eval-form-aux (car args1) env false)))))))

(define (interpreter-builtin-op keyword func)
  (lambda (args env in-body) (apply func (eval-forms args env))))

(define (interpreter-builtin-for op)
  (let* ((n (length (cdr op))))
    (if (<= n 2)
        (intern (string-symbolcase (format "interpreter-builtin-op-~D" n)))
        'interpreter-builtin-op)))

(defmacro (define-interpreter-builtin-op op . alias)
  (set! alias (car (if (null? alias) op alias)))
  (quasiquote
    (register-interpreter-builtin '(unquote (car op))
      ((unquote (interpreter-builtin-for op))
       '(unquote (car op)) (function (unquote alias))))))

(define (booleanize-interpreter-builtin func)
  (if subject-language
      func
      (lambda (args env in-body)
        (if (funcall func args env in-body) #t #f))))

(defmacro (define-interpreter-builtin-boolean-op op)
  (quasiquote
    (register-interpreter-builtin '(unquote (car op))
      (booleanize-interpreter-builtin
        ((unquote (interpreter-builtin-for op))
         '(unquote (car op)) (function (unquote (car op))))))))

(define (register-interpreter-builtin-func name func)
  (register-interpreter-builtin-var name (lambda (actuals)
                                           (apply func actuals))))

(register-interpreter-builtin-func 'error-halt (function error-halt))

(define-interpreter-builtin-boolean-op (eq? a b))
(define-interpreter-builtin-boolean-op (function? a))

(define-interpreter-builtin-boolean-op (symbol? a))
(register-interpreter-builtin-func 'gensym (function gensym))
(define-interpreter-builtin-op (symbol-name a) subject-language-symbol-name)
(define-interpreter-builtin-op (symbol-id a))
(register-interpreter-builtin-func 'intern (function subject-language-intern))

(define-interpreter-builtin-boolean-op (pair? a))
(define-interpreter-builtin-op (car a))
(define-interpreter-builtin-op (cdr a))
(define-interpreter-builtin-op (cons a b))
(define-interpreter-builtin-op (rplaca a b))
(define-interpreter-builtin-op (rplacd a b))

(define-interpreter-builtin-boolean-op (number? a))
(define-interpreter-builtin-boolean-op (< a b))
(define-interpreter-builtin-boolean-op (<= a b))
(define-interpreter-builtin-boolean-op (> a b))
(define-interpreter-builtin-boolean-op (>= a b))
(define-interpreter-builtin-boolean-op (= a b))
(define-interpreter-builtin-boolean-op (/= a b))
(define-interpreter-builtin-op (rem a b))
(define-interpreter-builtin-op (truncate a b))
(define-interpreter-builtin-op (ash a b))
(define-interpreter-builtin-op (logand a b))
(define-interpreter-builtin-op (logior a b))
(define-interpreter-builtin-op (logxor a b))

(define-interpreter-builtin-form +
  (if (null? args)
      0
      (let* ((args1 (cdr args)))
        (if (null? args1)
            (eval-form-aux (car args) env false)
            (let* ((args2 (cdr args1)))
              (if (null? args2)
                  (+ (eval-form-aux (car args) env false)
                     (eval-form-aux (car args1) env false))
                  (apply (function +) (eval-forms args env))))))))

;; * and - are much less common that +, so it's not a win to have a
;; streamlined implementation.
(define-interpreter-builtin-form *
 (apply (function *) (eval-forms args env)))

(define-interpreter-builtin-form -
  (apply (function -) (eval-forms args env)))

(define-interpreter-builtin-boolean-op (character? a))
(define-interpreter-builtin-op (character-code a))
(define-interpreter-builtin-op (code-character a))

(define-interpreter-builtin-boolean-op (string? a))
(define-interpreter-builtin-op (make-string a init))
(define-interpreter-builtin-op (string-length a))
(define-interpreter-builtin-op (raw-string-ref a b) string-ref)
(define-interpreter-builtin-op (raw-string-set! a b c)  string-set!)
(define-interpreter-builtin-op (raw-string-copy a b c d e) string-copy)

(define-interpreter-builtin-boolean-op (vector? a))
(define-interpreter-builtin-op (make-vector a init))
(define-interpreter-builtin-op (vector-length a))
(define-interpreter-builtin-op (raw-vector-ref a b) vector-ref)
(define-interpreter-builtin-op (raw-vector-set! a b c) vector-set!)
(define-interpreter-builtin-op (raw-vector-copy a b c d e) vector-copy)

(register-interpreter-builtin-func 'raw-write-substring
                                   (function raw-write-substring))
(register-interpreter-builtin-func 'raw-read-substring
                                   (function raw-read-substring))
(register-interpreter-builtin-func 'open-file-for-reading
                                   (function open-file-for-reading))
(register-interpreter-builtin-func 'close-file (function close-file))
(register-interpreter-builtin-var 'raw-stdout raw-stdout)
(register-interpreter-builtin-var 'raw-stderr raw-stderr)
(register-interpreter-builtin-var 'raw-stdin raw-stdin)

(define-interpreter-builtin-form apply
  (funcall (eval-form-aux (car args) env false)
           (apply (function list*) (eval-forms (cdr args) env))))
