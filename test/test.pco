;;; Tests

(defmacro (assert-result expr expect)
  (quasiquote
    (begin
      (define res (unquote expr))
      (define expected (unquote expect))
      (unless (equal? res expected)
        (error "Evaluation of ~S gave ~S, expected ~S" (quote (unquote expr))
               res expected)))))

;;; Test a unary operator, defeating constant folding
(defmacro (test-unary-operator op alias . body)
  (quasiquote (definitions
    ;; Test the operator directly
    (begin
      (defmacro ((unquote alias) a) (list (quote (unquote op)) a))
      (unquote-splicing body))

    ;; Test with a variable argument
    (begin
      (defmacro ((unquote alias) a)
        (quasiquote (begin
                      (define avar (unquote a))
                      ((unquote (unquote op)) avar))))
      (unquote-splicing body)))))

;;; Test a binary operator, defeating constant folding
(defmacro (test-binary-operator op alias . body)
  (quasiquote (definitions
    ;; Test the operator directly
    (begin
      (defmacro ((unquote alias) a b) (list (quote (unquote op)) a b))
      (unquote-splicing body))

    ;; Test with a in a variable
    (begin
      (defmacro ((unquote alias) a b)
        (quasiquote (begin
                      (define avar (unquote a))
                      ((unquote (unquote op)) avar (unquote b)))))
      (unquote-splicing body))

    ;; Test with b in a variable
    (begin
      (defmacro ((unquote alias) a b)
        (quasiquote (begin
                      (define bvar (unquote b))
                      ((unquote (unquote op)) (unquote a) bvar))))
      (unquote-splicing body))

    ;; Test with both in variables in a variable
    (begin
      (defmacro ((unquote alias) a b)
        (quasiquote (begin
                      (define avar (unquote a))
                      (define bvar (unquote b))
                      ((unquote (unquote op)) avar bvar))))
      (unquote-splicing body)))))

(define (tests)
  ;; This test assumes the intended behaviour compiler behaviour.  The
  ;; interpreter does something different, in the name of simplicity.
  ;; What a lanuage spec might have to say about this is uncertain at
  ;; this point.
  (when compiled
    (define x 0)
    (begin
     (define x x)
     (assert-result x #u)))

  (assert-result (function? ()) #f)
  (assert-result (function? (lambda ())) #t)

  (assert-result (begin (define x 42)) 42)
  (assert-result (function? (begin
                              (define x 42)
                              (define f (lambda ()))))
                 #t)

  (assert-result (and) #t)
  (assert-result (and #t) #t)
  (assert-result (and #f) #f)
  (assert-result (and #t #f) #f)
  (assert-result (and #f #t) #f)
  (assert-result (and #t #t #t) #t)

  (assert-result (or) #f)
  (assert-result (or #t) #t)
  (assert-result (or #f) #f)

  (assert-result (length '(1 2 3)) 3)

  (begin
    (define foo 3)
    (assert-result foo 3))
  (begin
    (define x (cons 1 2))
    (assert-result (rplaca x 3) '(3 . 2))
    (assert-result (rplacd x 4) '(3 . 4)))

  (begin
    (defmacro (foo) 1)
    (assert-result (foo) 1))
  (begin
    (defmacro foo 2)
    (assert-result foo 2))
  (begin
    (defmacro foo 'bar)
    (define bar 3)
    (assert-result foo 3))
  (begin
    (defmacro foo 4)
    (defmacro bar foo)
    (assert-result bar 4))

  (assert-result (list 1 2 3) '(1 2 3))
  (assert-result (append '(1 2) '(3 4)) '(1 2 3 4))

  (begin
    (define ht (make-hashtable string-hash string-equal?))
    (assert-result (hashtable-ref ht "foo") #f)
    (hashtable-set! ht "foo" "bar")
    (assert-result (hashtable-ref ht "foo") "bar")
    (hashtable-set! ht "foo" "baz")
    (assert-result (hashtable-ref ht "foo") "baz")

    (define l ())
    (for-hashtable (k v ht)
      (set! l (acons k v l)))
    (assert-result l '(("foo" . "baz"))))

  (assert-result (string-equal? (symbol-name 'foo) "foo") #t)
  (assert-result (eq? (intern "foo") 'foo) #t)
  (assert-result (symbol-name (intern "bar")) "bar")

  (test-unary-operator + +x
    (assert-result (+x 10) 10))

  (test-binary-operator + +x
    (assert-result (+x 1 10) 11)
    (assert-result (+x 0 10) 10)
    (assert-result (+x 10 0) 10))

  (test-unary-operator * *x
    (assert-result (*x 10) 10)
    (assert-result (*x 16) 16))

  (test-binary-operator * *x
    (assert-result (*x 3 5) 15)
    (assert-result (*x 1 5) 5)
    (assert-result (*x 5 1) 5)
    (assert-result (*x 4 8) 32))

  (test-unary-operator - -x
    (assert-result (-x 10) -10))

  (test-binary-operator - -x
    (assert-result (-x 10 1) 9)
    (assert-result (-x 10 0) 10)
    (assert-result (-x 0 10) -10))

  (assert-result (1+ 1) 2)
  (assert-result (1- 1) 0)

  (assert-result (truncate -5 2) -2)

  (test-binary-operator ash ashx
    (assert-result (ashx 48 2) 192)
    (assert-result (ashx 48 -2) 12)
    (assert-result (ashx -5 -1) -3)

    (when compiled
      (assert-result (ashx 1 1000) 0)
      (assert-result (ashx 1 -1000) 0)
      (assert-result (ashx -1 -1000) -1)

      (if (= (compiler-constant value-size) 4)
          (begin
            (assert-result (ashx 1 32) 0)
            (assert-result (ashx -1 -32) -1))
          (begin
            (assert-result (ashx 1 64) 0)
            (assert-result (ashx -1 -64) -1)))))

  (begin
    (defmacro (assert-applied-result expr expect)
      (quasiquote (begin
                    (assert-result (unquote expr) (unquote expect))
                    (assert-result (apply (unquote (car expr))
                                          (quote (unquote (cdr expr))))
                                   (unquote expect)))))
    (assert-applied-result (+) 0)
    (assert-applied-result (+ 1) 1)
    (assert-applied-result (+ 1 2) 3)
    (assert-applied-result (+ 1 2 3) 6)

    (assert-applied-result (*) 1)
    (assert-applied-result (* 1) 1)
    (assert-applied-result (* 1 2) 2)
    (assert-applied-result (* 1 2 3) 6)

    (assert-applied-result (- 1) -1)
    (assert-applied-result (- 1 2) -1)
    (assert-applied-result (- 1 2 3) -4)

    (assert-applied-result (list 1 2 3) '(1 2 3)))

  (begin
    (define (fac n)
        (if (< n 2) 1
            (* n (fac (- n 1)))))
    (assert-result (fac 6) 720))

  ;; Test large immediates
  (assert-result 12345678901 (1+ 12345678900))
  (assert-result 184467440737095516161 (1+ 184467440737095516160))

  (assert-result (copy-tree '((1 . 2) 3)) '((1 . 2) 3))

  (assert-result (nconc ()) ())
  (assert-result (nconc (copy-list '(1 2)) (copy-list '(3 4))) '(1 2 3 4))
  (assert-result (nconc () (copy-list '(1 2)) () (copy-list '(3 4)))
                 '(1 2 3 4))

  (assert-result (remove 1 '(0 1 2 1)) '(0 2))
  (assert-result (delete 1 (copy-list '(0 1 2 1))) '(0 2))
  (assert-result (sort '(3 6 4 8 7 5 2 9 1 0) <) '(0 1 2 3 4 5 6 7 8 9))
  (assert-result (sort '(1 2 1 2) <) '(1 1 2 2))
  (assert-result (reverse '(1 2 3)) '(3 2 1))

  (assert-result (mapfor (x '(1 2 3)) (1+ x)) '(2 3 4))
  (assert-result (mapfor (x ()) (error "Whoa!")) ())
  (assert-result (mapfor (x '(a)) x) '(a))

  (assert-result (nmapfor (x (list 1 2 3)) (1+ x)) '(2 3 4))

  (assert-result (findfor (x '(1 2 3)) (> x 1)) 2)
  (assert-result (findfor (x ()) (error "Whoa!")) #f)
  (assert-result (findfor (x '(1)) (> x 1)) #f)

  (assert-result (filterfor (x '(0 1 2 3 4 5)) (= 0 (rem x 2)))
                 '(0 2 4))
  (assert-result (nfilterfor (x (list 0 1 2 3 4 5)) (= 0 (rem x 2)))
                 '(0 2 4))

  (assert-result (sublist '(1 2 3) 1) '(2 3))
  (assert-result (sublist '(1 2 3 4) 1 3) '(2 3))

  (begin
    (define x '(1 2))

    (assert-result (quasiquote (a b c)) '(a b c))
    (assert-result (quasiquote ((unquote x) b c)) '((1 2) b c))
    (assert-result (quasiquote (a (unquote x) c)) '(a (1 2) c))
    (assert-result (quasiquote (a b (unquote x))) '(a b (1 2)))

    (assert-result (quasiquote ((unquote-splicing x) b c)) '(1 2 b c))
    (assert-result (quasiquote (a (unquote-splicing x) c)) '(a 1 2 c))
    (assert-result (quasiquote (a b (unquote-splicing x))) '(a b 1 2)))

  ;; Test string ref, string copy
  (assert-result (string-equal? "foo" "foo") #t)
  (assert-result (string-equal? "foo" "bar") #f)

  (assert-result (string< "aaa" "aab") #t)
  (assert-result (string< "aab" "aaa") #f)
  (assert-result (string< "aaa" "aaa") #f)
  (assert-result (string< "aaa" "aaaa") #t)
  (assert-result (string< "aaaa" "aaa") #f)

  (assert-result (substring "Hello" 1 3) "ell")
  (assert-result (string-search "banana" "an" 0) 1)
  (assert-result (string-search "banana" "an" 2) 3)
  (assert-result (string-replace "banana" "an" "rane") "braneranea")
  (assert-result (not (character? #\x)) #f)

  ;; Test overlapping string and vector copies
  (assert-result (begin
                   (define s (format "foobar"))
                   (string-copy s 1 s 2 3)
                   s)
                 "fooobr")
  (assert-result (begin
                   (define s (format "foobar"))
                   (string-copy s 2 s 1 3)
                   s)
                 "fobaar")
  (assert-result (begin
                   (define v (vector 1 2 3 4 5 6))
                   (vector-copy v 1 v 2 3)
                   v)
                 (vector 1 2 2 3 4 6))
  (assert-result (begin
                   (define v (vector 1 2 3 4 5 6))
                   (vector-copy v 2 v 1 3)
                   v)
                 (vector 1 3 4 5 5 6))

  (assert-result (vector-equal? (vector 1 2 3)
                                (make-vector-from-list '(1 2 3)))
                 #t)

  ;; This tests that the constant index optimizations for ARM work correctly.
  (assert-result (begin
                   (define v (make-vector 2000 42))
                   (raw-vector-ref v 1500))
                 42)

  (begin
    (define (assert-uniform-format a expect)
      (assert-result (format "~S" a) expect)
      (assert-result (format "~A" a) expect))

    (assert-uniform-format 0 "0")
    (assert-uniform-format 242143 "242143")
    (assert-uniform-format -1 "-1")
    (assert-uniform-format () "()")
    (assert-uniform-format 'foo "foo")
    (assert-uniform-format '(a b) "(a b)")
    (assert-uniform-format '(a . b) "(a . b)")
    (assert-uniform-format (lambda ()) "#<function>")

    (define (assert-non-uniform-format a sexpect aexpect)
      (assert-result (format "~S" a) sexpect)
      (assert-result (format "~A" a) aexpect))

    (assert-non-uniform-format "Hello" "\"Hello\"" "Hello")
    (assert-non-uniform-format '("Hello" "there") "(\"Hello\" \"there\")"
                               "(Hello there)")
    (assert-non-uniform-format (vector 42 "Hello") "#(42 \"Hello\")"
                               "#(42 Hello)")

    (assert-result (format "~%") "
"))

  (assert-result (apply append '((1 2) (3 4)) '((5 6) (7 8)))
                 '((1 2) (3 4) 5 6 7 8))

  (begin
    (define istr (make-string-istream "ab"))
    (assert-result (peek-character istr 0) #\a)
    (assert-result (peek-character istr 1) #\b)
    (assert-result (read-character istr #f) #\a)
    (assert-result (peek-character istr 0) #\b)
    (assert-result (peek-character istr 1) #f)
    (istream-consume istr 1)
    (assert-result (read-character istr #t) #f))

  (begin
    (define istr (make-string-istream "hello world (etc (etc)  )etc(etc)"))
    (assert-result (read istr) 'hello)
    (assert-result (read istr) 'world)
    (assert-result (read istr) '(etc (etc)))
    (assert-result (read istr) 'etc)
    (assert-result (read istr) '(etc))

    (assert-result (read (make-string-istream " ") #t) #t)

    (define (assert-read str expect)
      (assert-result (read (make-string-istream str)) expect))

    (assert-read "(100)" '(100))
    (assert-read "-100" -100)
    (assert-read "1-" '1-)
    (assert-read "#x1Ff" 511)
    (assert-read "#x-1Ff" -511)
    (assert-read "#b101" 5)

    (assert-read "(x . y)" '(x . y))
    (assert-read "(x .y)" '(x .y))
    (assert-read "(x .(y))" '(x y))
    (assert-read "(x .())" '(x))
    (assert-read "((x . ()) y)" '((x) y))

    (assert-read "'(x)" '(quote (x)))

    (assert-read "\"hello\"" "hello")
    (assert-read "\"\\\" \\\\ \\\"\"" "\" \\ \"")

    (assert-read "#\\x" #\x)
    (assert-read "#\\\"" #\")
    (assert-read "#\\Space" #\Space)
    (assert-read "#\\Newline" #\Newline)

    (assert-read "#t" #t)
    (assert-read "#f" #f)
    (assert-read "#u" #u)

    (assert-read "true" 'true)
    (assert-read "false" 'false)
    (assert-read "unspecified" 'unspecified)

    (assert-read "(x;comment
y)" '(x y))
    (assert-read "(x ;comment
)" '(x)))

  (with-open-file-for-reading (f "test/testfile")
    (assert-result (read f) '("hello" world))
    (assert-result (read f #f) #f))

  ;; check that body forms at the end of bodies are evaluated correctly
  (assert-result (begin (define x #t) (define y x)) #t)
  (assert-result (begin
                   (define x #t)
                   (definitions (set! x #f) (define y x)))
                 #f)
  (assert-result (begin
                   (define (f) (set! f #f) (define x f))
                   (f))
                 #f))

(define (main)
  (tests)
  (formout stdout "Tests done~%"))
