.data
.align 8
.L1:
.quad 112
.ascii "arity-mismatch"
.text
.L2:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L3
# (ERROR-HALT "arity-mismatch" NIL)
# "arity-mismatch"
movq $.L1+4, %rax
# Done "arity-mismatch"
# NIL
movq $31, %rcx
# Done NIL
.L4:
hlt
jmp .L4
# Done (ERROR-HALT "arity-mismatch" NIL)
addq $8, %rsp
ret
.L3:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L5:
.quad 112
.ascii "handle-varargs"
.text
.L6:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L7
# (ERROR-HALT "handle-varargs" NIL)
# "handle-varargs"
movq $.L5+4, %rax
# Done "handle-varargs"
# NIL
movq $31, %rcx
# Done NIL
.L8:
hlt
jmp .L8
# Done (ERROR-HALT "handle-varargs" NIL)
addq $8, %rsp
ret
.L7:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L9:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
addq $8, %rsp
ret
.text
.L11:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L12
# (IF (NULL? L) INITIAL (REDUCE (OP INITIAL (CAR L)) (CDR L) OP))
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
jne .L14
# Done conditional (NULL? L)
.L13:
# INITIAL
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done INITIAL
jmp .L15
.L14:
# (REDUCE (OP INITIAL (CAR L)) (CDR L) OP)
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
# (OP INITIAL (CAR L))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# INITIAL
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done INITIAL
movq %rax, 16(%rcx)
# (CAR L)
# L
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq -2(%rax), %rax
# Done (CAR L)
movq %rax, 24(%rcx)
# OP
movq 8(%rsp), %rax
movq 32(%rax), %rax
# Done OP
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (OP INITIAL (CAR L))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (CDR L)
# L
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq %rax, 24(%rcx)
# OP
movq 8(%rsp), %rax
movq 32(%rax), %rax
# Done OP
movq %rax, 32(%rcx)
# REDUCE
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 888(%rax), %rax
# Done REDUCE
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (REDUCE (OP INITIAL (CAR L)) (CDR L) OP)
.L15:
# Done (IF (NULL? L) INITIAL (REDUCE (OP INITIAL (CAR L)) (CDR L) OP))
addq $8, %rsp
ret
.L12:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L17:
.quad 56
.ascii "unquote"
.data
.align 8
.L16:
.quad .L17+4
.data
.align 8
.L19:
.quad 80
.ascii "quasiquote"
.data
.align 8
.L18:
.quad .L19+4
.data
.align 8
.L21:
.quad 128
.ascii "unquote-splicing"
.data
.align 8
.L20:
.quad .L21+4
.data
.align 8
.L23:
.quad 48
.ascii "append"
.data
.align 8
.L22:
.quad .L23+4
.data
.align 8
.L25:
.quad 32
.ascii "cons"
.data
.align 8
.L24:
.quad .L25+4
.data
.align 8
.L27:
.quad 40
.ascii "quote"
.data
.align 8
.L26:
.quad .L27+4
.text
.L28:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L29
# (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))) (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN))))
# (PAIR? FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
andb $7, %al
cmpb $2, %al
jne .L31
# Done conditional (PAIR? FORM)
.L30:
# (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN))))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE KEYWORD (CAR FORM))
# (CAR FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq -2(%rax), %rax
# Done (CAR FORM)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE KEYWORD (CAR FORM))
# (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))
# (EQ? (QUOTE UNQUOTE) KEYWORD)
# (QUOTE UNQUOTE)
movq $.L16+7, %rax
# Done (QUOTE UNQUOTE)
# KEYWORD
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done KEYWORD
cmpq %rcx, %rax
jne .L34
# Done conditional (EQ? (QUOTE UNQUOTE) KEYWORD)
.L33:
# (BEGIN (CAR (CDR FORM)))
# (CAR (CDR FORM))
# (CDR FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq -2(%rax), %rax
# Done (CAR (CDR FORM))
# Done (BEGIN (CAR (CDR FORM)))
jmp .L35
.L34:
# (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN))))
# (EQ? (QUOTE QUASIQUOTE) KEYWORD)
# (QUOTE QUASIQUOTE)
movq $.L18+7, %rax
# Done (QUOTE QUASIQUOTE)
# KEYWORD
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done KEYWORD
cmpq %rcx, %rax
jne .L37
# Done conditional (EQ? (QUOTE QUASIQUOTE) KEYWORD)
.L36:
# (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM)))))
# (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))
subq $24, %rbx
pushq %rbx
movq $16, 0(%rbx)
# (QUASIQUOTE-TRANSFORM (CAR (CDR FORM)))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR FORM))
# (CDR FORM)
# FORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq -2(%rax), %rax
# Done (CAR (CDR FORM))
movq %rax, 16(%rcx)
# QUASIQUOTE-TRANSFORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 880(%rax), %rax
# Done QUASIQUOTE-TRANSFORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (QUASIQUOTE-TRANSFORM (CAR (CDR FORM)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# QUASIQUOTE-TRANSFORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 880(%rax), %rax
# Done QUASIQUOTE-TRANSFORM
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))
# Done (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM)))))
jmp .L38
.L37:
# (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))
# (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE)
.L44:
# (PAIR? KEYWORD)
# KEYWORD
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done KEYWORD
andb $7, %al
cmpb $2, %al
jne .L40
# Done conditional (PAIR? KEYWORD)
.L43:
# (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM)))
# (QUOTE UNQUOTE-SPLICING)
movq $.L20+7, %rax
# Done (QUOTE UNQUOTE-SPLICING)
# (CAR (CAR FORM))
# (CAR FORM)
# FORM
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 16(%rcx), %rcx
# Done FORM
movq -2(%rcx), %rcx
# Done (CAR FORM)
movq -2(%rcx), %rcx
# Done (CAR (CAR FORM))
cmpq %rcx, %rax
jne .L40
# Done conditional (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM)))
.L42:
# FALSE
# Done conditional FALSE
# Done conditional (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE)
.L39:
# (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM))))
# (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (QUOTE APPEND)
movq $.L22+7, %rax
# Done (QUOTE APPEND)
movq %rax, 16(%rcx)
# (CAR (CDR (CAR FORM)))
# (CDR (CAR FORM))
# (CAR FORM)
# FORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq -2(%rax), %rax
# Done (CAR FORM)
movq 6(%rax), %rax
# Done (CDR (CAR FORM))
movq -2(%rax), %rax
# Done (CAR (CDR (CAR FORM)))
movq %rax, 24(%rcx)
# (QUASIQUOTE-TRANSFORM (CDR FORM))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR FORM)
# FORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq %rax, 16(%rcx)
# QUASIQUOTE-TRANSFORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 880(%rax), %rax
# Done QUASIQUOTE-TRANSFORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (QUASIQUOTE-TRANSFORM (CDR FORM))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# LIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))
# Done (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM))))
jmp .L41
.L40:
# (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN))
# TRUE
# Done conditional TRUE
.L45:
# (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM))))
# (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (QUOTE CONS)
movq $.L24+7, %rax
# Done (QUOTE CONS)
movq %rax, 16(%rcx)
# (QUASIQUOTE-TRANSFORM KEYWORD)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# QUASIQUOTE-TRANSFORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 880(%rax), %rax
# Done QUASIQUOTE-TRANSFORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (QUASIQUOTE-TRANSFORM KEYWORD)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (QUASIQUOTE-TRANSFORM (CDR FORM))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR FORM)
# FORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq %rax, 16(%rcx)
# QUASIQUOTE-TRANSFORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 880(%rax), %rax
# Done QUASIQUOTE-TRANSFORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (QUASIQUOTE-TRANSFORM (CDR FORM))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# LIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))
# Done (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM))))
jmp .L47
.L46:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L47:
# Done (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN))
.L41:
# Done (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))
.L38:
# Done (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN))))
.L35:
# Done (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))
addq $8, %rsp
# Done (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN))))))
jmp .L32
.L31:
# (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN)))
# (SYMBOL? FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
cmpq $2055, %rax
jl .L51
andq $7, %rax
cmpq $7, %rax
.L51:
jne .L49
# Done conditional (SYMBOL? FORM)
.L48:
# (BEGIN (LIST (QUOTE QUOTE) FORM))
# (LIST (QUOTE QUOTE) FORM)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (QUOTE QUOTE)
movq $.L26+7, %rax
# Done (QUOTE QUOTE)
movq %rax, 16(%rcx)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 24(%rcx)
# LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST (QUOTE QUOTE) FORM)
# Done (BEGIN (LIST (QUOTE QUOTE) FORM))
jmp .L50
.L49:
# (IF TRUE (BEGIN FORM) (BEGIN))
# TRUE
# Done conditional TRUE
.L52:
# (BEGIN FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
# Done (BEGIN FORM)
jmp .L54
.L53:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L54:
# Done (IF TRUE (BEGIN FORM) (BEGIN))
.L50:
# Done (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN)))
.L32:
# Done (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))) (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN))))
addq $8, %rsp
ret
.L29:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L55:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (IF (NULL? LISTS) NIL (APPEND-1 LISTS))
# (NULL? LISTS)
# LISTS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LISTS
movq $31, %rcx
cmpq %rcx, %rax
jne .L58
# Done conditional (NULL? LISTS)
.L57:
# NIL
movq $31, %rax
# Done NIL
jmp .L59
.L58:
# (APPEND-1 LISTS)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# LISTS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LISTS
movq %rax, 16(%rcx)
# APPEND-1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 864(%rax), %rax
# Done APPEND-1
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND-1 LISTS)
.L59:
# Done (IF (NULL? LISTS) NIL (APPEND-1 LISTS))
addq $8, %rsp
ret
.text
.L60:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L61
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE L1 (CAR LISTS))
# (CAR LISTS)
# LISTS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done LISTS
movq -2(%rax), %rax
# Done (CAR LISTS)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE L1 (CAR LISTS))
# (DEFINE REST (CDR LISTS))
# (CDR LISTS)
# LISTS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done LISTS
movq 6(%rax), %rax
# Done (CDR LISTS)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE REST (CDR LISTS))
# (IF (NULL? REST) L1 (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C)))
# (NULL? REST)
# REST
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done REST
movq $31, %rcx
cmpq %rcx, %rax
jne .L63
# Done conditional (NULL? REST)
.L62:
# L1
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L1
jmp .L64
.L63:
# (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C))
# (NULL? L1)
# L1
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L1
movq $31, %rcx
cmpq %rcx, %rax
jne .L66
# Done conditional (NULL? L1)
.L65:
# (APPEND-1 REST)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# REST
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done REST
movq %rax, 16(%rcx)
# APPEND-1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 864(%rax), %rax
# Done APPEND-1
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND-1 REST)
jmp .L67
.L66:
# (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE C (CONS (CAR L1) NIL))
# (CONS (CAR L1) NIL)
# (CAR L1)
# L1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L1
movq -2(%rax), %rax
# Done (CAR L1)
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CAR L1) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE C (CONS (CAR L1) NIL))
# (APPEND-2 C (CDR L1) REST)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# C
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done C
movq %rax, 16(%rcx)
# (CDR L1)
# L1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L1
movq 6(%rax), %rax
# Done (CDR L1)
movq %rax, 24(%rcx)
# REST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done REST
movq %rax, 32(%rcx)
# APPEND-2
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 856(%rax), %rax
# Done APPEND-2
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND-2 C (CDR L1) REST)
# C
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done C
addq $8, %rsp
# Done (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C)
.L67:
# Done (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C))
.L64:
# Done (IF (NULL? REST) L1 (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C)))
addq $8, %rsp
addq $8, %rsp
ret
.L61:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L68:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L69
# (IF (NULL? L1) (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))) (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST)))
# (NULL? L1)
# L1
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L1
movq $31, %rcx
cmpq %rcx, %rax
jne .L71
# Done conditional (NULL? L1)
.L70:
# (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2)))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE L2 (CAR REST))
# (CAR REST)
# REST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done REST
movq -2(%rax), %rax
# Done (CAR REST)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE L2 (CAR REST))
# (DEFINE REST2 (CDR REST))
# (CDR REST)
# REST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done REST
movq 6(%rax), %rax
# Done (CDR REST)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE REST2 (CDR REST))
# (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))
# (NULL? REST2)
# REST2
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done REST2
movq $31, %rcx
cmpq %rcx, %rax
jne .L74
# Done conditional (NULL? REST2)
.L73:
# (RPLACD C L2)
# C
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done C
# L2
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done L2
movq %rcx, 6(%rax)
# Done (RPLACD C L2)
jmp .L75
.L74:
# (APPEND-2 C L2 REST2)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# C
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done C
movq %rax, 16(%rcx)
# L2
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L2
movq %rax, 24(%rcx)
# REST2
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done REST2
movq %rax, 32(%rcx)
# APPEND-2
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 856(%rax), %rax
# Done APPEND-2
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND-2 C L2 REST2)
.L75:
# Done (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))
addq $8, %rsp
# Done (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2)))
jmp .L72
.L71:
# (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE C2 (CONS (CAR L1) NIL))
# (CONS (CAR L1) NIL)
# (CAR L1)
# L1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L1
movq -2(%rax), %rax
# Done (CAR L1)
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CAR L1) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE C2 (CONS (CAR L1) NIL))
# (RPLACD C C2)
# C
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done C
# C2
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done C2
movq %rcx, 6(%rax)
# Done (RPLACD C C2)
# (APPEND-2 C2 (CDR L1) REST)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# C2
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done C2
movq %rax, 16(%rcx)
# (CDR L1)
# L1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L1
movq 6(%rax), %rax
# Done (CDR L1)
movq %rax, 24(%rcx)
# REST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done REST
movq %rax, 32(%rcx)
# APPEND-2
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 856(%rax), %rax
# Done APPEND-2
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND-2 C2 (CDR L1) REST)
addq $8, %rsp
# Done (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST))
.L72:
# Done (IF (NULL? L1) (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))) (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST)))
addq $8, %rsp
ret
.L69:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L76:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L77
# (ERROR-HALT MESSAGE ARGS)
# MESSAGE
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done MESSAGE
# ARGS
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done ARGS
.L78:
hlt
jmp .L78
# Done (ERROR-HALT MESSAGE ARGS)
addq $8, %rsp
ret
.L77:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L79:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L80
# (EQ? A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? A B)
addq $8, %rsp
ret
.L80:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L81:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L82
# (FUNCTION? A)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
xorl %eax, %eax
andb $7, %cl
cmpb $1, %cl
sete %al
shlb $3, %al
addb $7, %al
# Done (FUNCTION? A)
addq $8, %rsp
ret
.L82:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L83:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L84
# (SYMBOL? A)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
xorl %eax, %eax
cmpq $2055, %rcx
jl .L85
andq $7, %rcx
cmpq $7, %rcx
.L85:
sete %al
shlb $3, %al
addb $7, %al
# Done (SYMBOL? A)
addq $8, %rsp
ret
.L84:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L86:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L87
# (GENSYM A)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 16(%rcx)
# GENSYM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 816(%rax), %rax
# Done GENSYM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (GENSYM A)
addq $8, %rsp
ret
.L87:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L88:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L89
# (SYMBOL-NAME A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq -7(%rax), %rax
# Done (SYMBOL-NAME A)
addq $8, %rsp
ret
.L89:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L90:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L91
# (PAIR? A)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
xorl %eax, %eax
andb $7, %cl
cmpb $2, %cl
sete %al
shlb $3, %al
addb $7, %al
# Done (PAIR? A)
addq $8, %rsp
ret
.L91:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L92:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L93
# (NULL? A)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
movq $31, %rdx
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (NULL? A)
addq $8, %rsp
ret
.L93:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L94:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L95
# (CAR A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq -2(%rax), %rax
# Done (CAR A)
addq $8, %rsp
ret
.L95:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L96:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L97
# (CDR A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq 6(%rax), %rax
# Done (CDR A)
addq $8, %rsp
ret
.L97:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L98:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L99
# (CONS A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A B)
addq $8, %rsp
ret
.L99:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L100:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L101
# (RPLACA A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
movq %rcx, -2(%rax)
# Done (RPLACA A B)
addq $8, %rsp
ret
.L101:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L102:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L103
# (RPLACD A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
movq %rcx, 6(%rax)
# Done (RPLACD A B)
addq $8, %rsp
ret
.L103:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L104:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L105
# (NUMBER? A)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
xorl %eax, %eax
andb $7, %cl
cmpb $0, %cl
sete %al
shlb $3, %al
addb $7, %al
# Done (NUMBER? A)
addq $8, %rsp
ret
.L105:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L106:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L107
# (< A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
setl %al
shlb $3, %al
addb $7, %al
# Done (< A B)
addq $8, %rsp
ret
.L107:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L108:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L109
# (<= A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
setle %al
shlb $3, %al
addb $7, %al
# Done (<= A B)
addq $8, %rsp
ret
.L109:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L110:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L111
# (> A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
setg %al
shlb $3, %al
addb $7, %al
# Done (> A B)
addq $8, %rsp
ret
.L111:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L112:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L113
# (>= A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
setge %al
shlb $3, %al
addb $7, %al
# Done (>= A B)
addq $8, %rsp
ret
.L113:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L114:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L115
# (= A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (= A B)
addq $8, %rsp
ret
.L115:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L116:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L117
# (/= A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
setne %al
shlb $3, %al
addb $7, %al
# Done (/= A B)
addq $8, %rsp
ret
.L117:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L118:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L119
# (+ A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
addq %rcx, %rax
# Done (+ A B)
addq $8, %rsp
ret
.L119:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L120:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (IF (NULL? ARGS) 0 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B)))))
# (NULL? ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq $31, %rcx
cmpq %rcx, %rax
jne .L123
# Done conditional (NULL? ARGS)
.L122:
# 0
movq $0, %rax
# Done 0
jmp .L124
.L123:
# (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B))))
# (NULL? (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq $31, %rcx
cmpq %rcx, %rax
jne .L126
# Done conditional (NULL? (CDR ARGS))
.L125:
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
jmp .L127
.L126:
# (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B)))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 24(%rcx)
# (LAMBDA (A B) (+ A B))
movq 0(%rsp), %rax
movq $.L118, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (+ A B))
movq %rax, 32(%rcx)
# REDUCE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 888(%rax), %rax
# Done REDUCE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B)))
.L127:
# Done (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B))))
.L124:
# Done (IF (NULL? ARGS) 0 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B)))))
addq $8, %rsp
ret
.text
.L128:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L129
# (* A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
sarq $3, %rax
imulq %rcx, %rax
# Done (* A B)
addq $8, %rsp
ret
.L129:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L130:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (IF (NULL? ARGS) 1 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B)))))
# (NULL? ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq $31, %rcx
cmpq %rcx, %rax
jne .L133
# Done conditional (NULL? ARGS)
.L132:
# 1
movq $8, %rax
# Done 1
jmp .L134
.L133:
# (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B))))
# (NULL? (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq $31, %rcx
cmpq %rcx, %rax
jne .L136
# Done conditional (NULL? (CDR ARGS))
.L135:
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
jmp .L137
.L136:
# (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B)))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 24(%rcx)
# (LAMBDA (A B) (* A B))
movq 0(%rsp), %rax
movq $.L128, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (* A B))
movq %rax, 32(%rcx)
# REDUCE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 888(%rax), %rax
# Done REDUCE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B)))
.L137:
# Done (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B))))
.L134:
# Done (IF (NULL? ARGS) 1 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B)))))
addq $8, %rsp
ret
.text
.L138:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L139
# (- A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
subq %rcx, %rax
# Done (- A B)
addq $8, %rsp
ret
.L139:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L140:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (IF (NULL? ARGS) (- A) (REDUCE A ARGS (LAMBDA (A B) (- A B))))
# (NULL? ARGS)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq $31, %rcx
cmpq %rcx, %rax
jne .L143
# Done conditional (NULL? ARGS)
.L142:
# (- A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
negq %rax
# Done (- A)
jmp .L144
.L143:
# (REDUCE A ARGS (LAMBDA (A B) (- A B)))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 16(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# (LAMBDA (A B) (- A B))
movq 0(%rsp), %rax
movq $.L138, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (- A B))
movq %rax, 32(%rcx)
# REDUCE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 888(%rax), %rax
# Done REDUCE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (REDUCE A ARGS (LAMBDA (A B) (- A B)))
.L144:
# Done (IF (NULL? ARGS) (- A) (REDUCE A ARGS (LAMBDA (A B) (- A B))))
addq $8, %rsp
ret
.text
.L145:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L146
# (REM A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
movq %rax, %rdx
sarq $63, %rdx
idivq %rcx
movq %rdx, %rax
# Done (REM A B)
addq $8, %rsp
ret
.L146:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L147:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L148
# (TRUNCATE A B)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# B
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done B
movq %rax, %rdx
sarq $63, %rdx
idivq %rcx
shlq $3, %rax
# Done (TRUNCATE A B)
addq $8, %rsp
ret
.L148:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L149:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L150
# (STRING? A)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
xorl %eax, %eax
andb $7, %cl
cmpb $4, %cl
sete %al
shlb $3, %al
addb $7, %al
# Done (STRING? A)
addq $8, %rsp
ret
.L150:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L151:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L152
# (MAKE-STRING A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING A)
addq $8, %rsp
ret
.L152:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L153:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L154
# (STRING-LENGTH A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq -4(%rax), %rax
# Done (STRING-LENGTH A)
addq $8, %rsp
ret
.L154:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L155:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L156
# (VECTOR? A)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 16(%rcx)
# VECTOR?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 624(%rax), %rax
# Done VECTOR?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR? A)
addq $8, %rsp
ret
.L156:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L157:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L158
# (MAKE-VECTOR A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
subq $8, %rbx
subq %rax, %rbx
movq %rax, 0(%rbx)
leaq 3(%rbx), %rax
# Done (MAKE-VECTOR A)
addq $8, %rsp
ret
.L158:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L159:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L160
# (VECTOR-LENGTH A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq -3(%rax), %rax
# Done (VECTOR-LENGTH A)
addq $8, %rsp
ret
.L160:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L161:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L162
# (IF (NULL? L) 0 (+ (LENGTH (CDR L)) 1))
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
jne .L164
# Done conditional (NULL? L)
.L163:
# 0
movq $0, %rax
# Done 0
jmp .L165
.L164:
# (+ (LENGTH (CDR L)) 1)
# (LENGTH (CDR L))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq %rax, 16(%rcx)
# LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 600(%rax), %rax
# Done LENGTH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LENGTH (CDR L))
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ (LENGTH (CDR L)) 1)
.L165:
# Done (IF (NULL? L) 0 (+ (LENGTH (CDR L)) 1))
addq $8, %rsp
ret
.L162:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L166:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L167
# (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L))))
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
jne .L169
# Done conditional (NULL? L)
.L168:
# NIL
movq $31, %rax
# Done NIL
jmp .L170
.L169:
# (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE RES (AUX (CDR L)))
# (AUX (CDR L))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR L)
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq %rax, 16(%rcx)
# AUX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done AUX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (AUX (CDR L))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE RES (AUX (CDR L)))
# (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L))
# (= N 0)
# N
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done N
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jne .L172
# Done conditional (= N 0)
.L171:
# RES
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done RES
jmp .L173
.L172:
# (BEGIN (SET! N (- N 1)) L)
# (SET! N (- N 1))
# (- N 1)
# N
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done N
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- N 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! N (- N 1))
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done L
# Done (BEGIN (SET! N (- N 1)) L)
.L173:
# Done (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))
.L170:
# Done (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L))))
addq $8, %rsp
ret
.L167:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L174:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L175
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE AUX (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L))))))
# (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))))
movq 0(%rsp), %rax
movq $.L166, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE AUX (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L))))))
# (AUX L)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done L
movq %rax, 16(%rcx)
# AUX
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done AUX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (AUX L)
addq $8, %rsp
addq $8, %rsp
ret
.L175:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L176:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L177
# (LAST-N-CONSES L 1)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq %rax, 16(%rcx)
# 1
movq $8, %rax
# Done 1
movq %rax, 24(%rcx)
# LAST-N-CONSES
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 592(%rax), %rax
# Done LAST-N-CONSES
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LAST-N-CONSES L 1)
addq $8, %rsp
ret
.L177:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L178:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (IF (NULL? L) L1 (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L))
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
jne .L181
# Done conditional (NULL? L)
.L180:
# L1
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L1
jmp .L182
.L181:
# (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (SET! L (CONS L1 L))
# (CONS L1 L)
# L1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done L1
# L
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done L
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS L1 L)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! L (CONS L1 L))
# (DEFINE PENULTIMATE (LAST-N-CONSES L 2))
# (LAST-N-CONSES L 2)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L
movq %rax, 16(%rcx)
# 2
movq $16, %rax
# Done 2
movq %rax, 24(%rcx)
# LAST-N-CONSES
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 592(%rax), %rax
# Done LAST-N-CONSES
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LAST-N-CONSES L 2)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE PENULTIMATE (LAST-N-CONSES L 2))
# (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE)))
# PENULTIMATE
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done PENULTIMATE
# (CAR (CDR PENULTIMATE))
# (CDR PENULTIMATE)
# PENULTIMATE
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done PENULTIMATE
movq 6(%rcx), %rcx
# Done (CDR PENULTIMATE)
movq -2(%rcx), %rcx
# Done (CAR (CDR PENULTIMATE))
movq %rcx, 6(%rax)
# Done (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE)))
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L
addq $8, %rsp
# Done (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L)
.L182:
# Done (IF (NULL? L) L1 (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L))
addq $8, %rsp
ret
.text
.L183:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L184
# (IF (PAIR? L) (CONS (CAR L) (COPY-LIST (CDR L))) L)
# (PAIR? L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
andb $7, %al
cmpb $2, %al
jne .L186
# Done conditional (PAIR? L)
.L185:
# (CONS (CAR L) (COPY-LIST (CDR L)))
# (COPY-LIST (CDR L))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq %rax, 16(%rcx)
# COPY-LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 568(%rax), %rax
# Done COPY-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (COPY-LIST (CDR L))
# (CAR L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq -2(%rax), %rax
# Done (CAR L)
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CAR L) (COPY-LIST (CDR L)))
jmp .L187
.L186:
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
.L187:
# Done (IF (PAIR? L) (CONS (CAR L) (COPY-LIST (CDR L))) L)
addq $8, %rsp
ret
.L184:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L188:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L189
# (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521)))))
# (NULL? #:G1521)
# #:G1521
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1521
movq $31, %rcx
cmpq %rcx, %rax
jne .L191
# Done conditional (NULL? #:G1521)
.L190:
# FALSE
movq $7, %rax
# Done FALSE
jmp .L192
.L191:
# (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE SYM (CAR #:G1521))
# (CAR #:G1521)
# #:G1521
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1521
movq -2(%rax), %rax
# Done (CAR #:G1521)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE SYM (CAR #:G1521))
# (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521)))
# (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM)))
# (STRING-EQUAL? STR (SYMBOL-NAME SYM))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# (SYMBOL-NAME SYM)
# SYM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SYM
movq -7(%rax), %rax
# Done (SYMBOL-NAME SYM)
movq %rax, 24(%rcx)
# STRING-EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 408(%rax), %rax
# Done STRING-EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L194
# Done conditional (STRING-EQUAL? STR (SYMBOL-NAME SYM))
# Done conditional (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM)))
.L193:
# SYM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SYM
jmp .L195
.L194:
# (#:G1520 (CDR #:G1521))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1521)
# #:G1521
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1521
movq 6(%rax), %rax
# Done (CDR #:G1521)
movq %rax, 16(%rcx)
# #:G1520
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1520
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1520 (CDR #:G1521))
.L195:
# Done (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521)))
addq $8, %rsp
# Done (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))
.L192:
# Done (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521)))))
addq $8, %rsp
ret
.L189:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L196:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L197
# (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS)))
# (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521)))))))
# (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))
movq 0(%rsp), %rax
movq $.L188, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521)))))))
# (#:G1520 INTERNED-SYMBOLS)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# INTERNED-SYMBOLS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done INTERNED-SYMBOLS
movq %rax, 16(%rcx)
# #:G1520
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1520
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1520 INTERNED-SYMBOLS)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS)))
# (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM))
# #:G1519
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L199
# Done conditional #:G1519
.L198:
# #:G1519
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1519
jmp .L200
.L199:
# (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR))
# (PRIMITIVE-MAKE-SYMBOL STR)
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, -8(%rbx)
leaq -1(%rbx), %rax
subq $8, %rbx
# Done (PRIMITIVE-MAKE-SYMBOL STR)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR))
# (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS))
# (CONS SYM INTERNED-SYMBOLS)
# SYM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SYM
# INTERNED-SYMBOLS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 16(%rcx), %rcx
# Done INTERNED-SYMBOLS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS SYM INTERNED-SYMBOLS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 16(%rcx)
# Done (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS))
# SYM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SYM
addq $8, %rsp
# Done (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM)
.L200:
# Done (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM)))
addq $8, %rsp
ret
.L197:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L201:
.quad 456
.ascii "string index out of bounds (index: ~A, string length: ~A)"
.text
.L202:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L203
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE STR-LEN (STRING-LENGTH STR))
# (STRING-LENGTH STR)
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq -4(%rax), %rax
# Done (STRING-LENGTH STR)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE STR-LEN (STRING-LENGTH STR))
# (IF (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN)))
# (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE)
.L209:
# (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE)
.L212:
# (>= INDEX 0)
# INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done INDEX
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jnge .L204
# Done conditional (>= INDEX 0)
.L211:
# (< INDEX STR-LEN)
# INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done INDEX
# STR-LEN
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done STR-LEN
cmpq %rcx, %rax
jl .L205
# Done conditional (< INDEX STR-LEN)
.L210:
# FALSE
# Done conditional FALSE
# Done conditional (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE)
.L208:
# FALSE
# Done conditional FALSE
.L207:
# TRUE
# Done conditional TRUE
# Done conditional (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE)
.L204:
# (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN))
# (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "string index out of bounds (index: ~A, string length: ~A)"
movq $.L201+4, %rax
# Done "string index out of bounds (index: ~A, string length: ~A)"
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# STR-LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR-LEN
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN)
# Done (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN))
jmp .L206
.L205:
movq $23, %rax
.L206:
# Done (IF (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN)))
addq $8, %rsp
addq $8, %rsp
ret
.L203:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L213:
.quad 544
.ascii "string range out of bounds (offset: ~A, length: ~A, string length ~A"
.text
.L214:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L215
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE STR-LEN (STRING-LENGTH STR))
# (STRING-LENGTH STR)
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq -4(%rax), %rax
# Done (STRING-LENGTH STR)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE STR-LEN (STRING-LENGTH STR))
# (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN)))
# (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE)
.L221:
# (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE)
.L224:
# (>= OFFSET 0)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jnge .L216
# Done conditional (>= OFFSET 0)
.L223:
# (<= (+ OFFSET LEN) STR-LEN)
# (+ OFFSET LEN)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
# LEN
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done LEN
addq %rcx, %rax
# Done (+ OFFSET LEN)
# STR-LEN
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done STR-LEN
cmpq %rcx, %rax
jle .L217
# Done conditional (<= (+ OFFSET LEN) STR-LEN)
.L222:
# FALSE
# Done conditional FALSE
# Done conditional (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE)
.L220:
# FALSE
# Done conditional FALSE
.L219:
# TRUE
# Done conditional TRUE
# Done conditional (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE)
.L216:
# (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN))
# (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN)
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# "string range out of bounds (offset: ~A, length: ~A, string length ~A"
movq $.L213+4, %rax
# Done "string range out of bounds (offset: ~A, length: ~A, string length ~A"
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# STR-LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR-LEN
movq %rax, 40(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN)
# Done (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN))
jmp .L218
.L217:
movq $23, %rax
.L218:
# Done (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN)))
addq $8, %rsp
addq $8, %rsp
ret
.L215:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L225:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L226
# (CHECK-STRING-INDEX STR INDEX)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# CHECK-STRING-INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 552(%rax), %rax
# Done CHECK-STRING-INDEX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-INDEX STR INDEX)
# (PRIMITIVE-STRING-REF STR INDEX)
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
# INDEX
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done INDEX
sarq $3, %rcx
movzbl 4(%rax,%rcx),%eax
shlq $3, %rax
# Done (PRIMITIVE-STRING-REF STR INDEX)
addq $8, %rsp
ret
.L226:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L227:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L228
# (CHECK-STRING-INDEX STR INDEX)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# CHECK-STRING-INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 552(%rax), %rax
# Done CHECK-STRING-INDEX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-INDEX STR INDEX)
# (PRIMITIVE-STRING-SET! STR INDEX CH)
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
# INDEX
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done INDEX
# CH
movq 0(%rsp), %rdx
movq 32(%rdx), %rdx
# Done CH
sarq $3, %rdx
sarq $3, %rcx
movb %dl, 4(%rax,%rcx)
# Done (PRIMITIVE-STRING-SET! STR INDEX CH)
# CH
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done CH
addq $8, %rsp
ret
.L228:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L229:
pushq %rcx
cmpq $48, 0(%rcx)
jne .L230
# (CHECK-STRING-RANGE SRC SRC-OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# SRC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SRC
movq %rax, 16(%rcx)
# SRC-OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done SRC-OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 48(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-STRING-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 544(%rax), %rax
# Done CHECK-STRING-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-RANGE SRC SRC-OFFSET LEN)
# (CHECK-STRING-RANGE DEST DEST-OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# DEST
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done DEST
movq %rax, 16(%rcx)
# DEST-OFFSET
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done DEST-OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 48(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-STRING-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 544(%rax), %rax
# Done CHECK-STRING-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-RANGE DEST DEST-OFFSET LEN)
# (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)
# SRC-OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done SRC-OFFSET
# DEST-OFFSET
movq 0(%rsp), %rcx
movq 40(%rcx), %rcx
# Done DEST-OFFSET
cmpq %rcx, %rax
jng .L232
.L231:
# SRC
movq 0(%rsp), %rsi
movq 16(%rsi), %rsi
# Done SRC
# SRC-OFFSET
movq 0(%rsp), %rdi
movq 24(%rdi), %rdi
# Done SRC-OFFSET
sarq $3, %rdi
leaq 4(%rsi,%rdi), %rsi
# DEST
movq 0(%rsp), %rdi
movq 32(%rdi), %rdi
# Done DEST
# DEST-OFFSET
movq 0(%rsp), %rcx
movq 40(%rcx), %rcx
# Done DEST-OFFSET
sarq $3, %rcx
leaq 4(%rdi,%rcx), %rdi
# LEN
movq 0(%rsp), %rcx
movq 48(%rcx), %rcx
# Done LEN
cld
sarq $3, %rcx
rep ; movsb
jmp .L233
.L232:
# DEST
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done DEST
# DEST-OFFSET
movq 0(%rsp), %rcx
movq 40(%rcx), %rcx
# Done DEST-OFFSET
# LEN
movq 0(%rsp), %rdx
movq 48(%rdx), %rdx
# Done LEN
addq %rdx, %rcx
movq $8, %rdx
subq %rdx, %rcx
sarq $3, %rcx
leaq 4(%rax,%rcx), %rax
pushq %rax
# SRC
movq 8(%rsp), %rsi
movq 16(%rsi), %rsi
# Done SRC
# SRC-OFFSET
movq 8(%rsp), %rcx
movq 24(%rcx), %rcx
# Done SRC-OFFSET
# LEN
movq 8(%rsp), %rdi
movq 48(%rdi), %rdi
# Done LEN
addq %rdi, %rcx
movq $8, %rdi
subq %rdi, %rcx
sarq $3, %rcx
leaq 4(%rsi,%rcx), %rsi
# LEN
movq 8(%rsp), %rcx
movq 48(%rcx), %rcx
# Done LEN
popq %rdi
std
sarq $3, %rcx
rep ; movsb
.L233:
# Done (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)
addq $8, %rsp
ret
.L230:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $48, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L234:
.quad 448
.ascii "vector index out of bounds (index: ~A, vector length ~A)"
.text
.L235:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L236
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE VEC-LEN (VECTOR-LENGTH VEC))
# (VECTOR-LENGTH VEC)
# VEC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done VEC
movq -3(%rax), %rax
# Done (VECTOR-LENGTH VEC)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE VEC-LEN (VECTOR-LENGTH VEC))
# (IF (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN)))
# (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE)
.L242:
# (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE)
.L245:
# (> INDEX 0)
# INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done INDEX
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jng .L237
# Done conditional (> INDEX 0)
.L244:
# (< INDEX VEC-LEN)
# INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done INDEX
# VEC-LEN
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done VEC-LEN
cmpq %rcx, %rax
jl .L238
# Done conditional (< INDEX VEC-LEN)
.L243:
# FALSE
# Done conditional FALSE
# Done conditional (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE)
.L241:
# FALSE
# Done conditional FALSE
.L240:
# TRUE
# Done conditional TRUE
# Done conditional (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE)
.L237:
# (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN))
# (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "vector index out of bounds (index: ~A, vector length ~A)"
movq $.L234+4, %rax
# Done "vector index out of bounds (index: ~A, vector length ~A)"
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# VEC-LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VEC-LEN
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN)
# Done (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN))
jmp .L239
.L238:
movq $23, %rax
.L239:
# Done (IF (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN)))
addq $8, %rsp
addq $8, %rsp
ret
.L236:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L246:
.quad 552
.ascii "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)"
.text
.L247:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L248
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE VEC-LEN (VECTOR-LENGTH VEC))
# (VECTOR-LENGTH VEC)
# VEC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done VEC
movq -3(%rax), %rax
# Done (VECTOR-LENGTH VEC)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE VEC-LEN (VECTOR-LENGTH VEC))
# (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN)))
# (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE)
.L254:
# (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE)
.L257:
# (>= OFFSET 0)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jnge .L249
# Done conditional (>= OFFSET 0)
.L256:
# (<= (+ OFFSET LEN) VEC-LEN)
# (+ OFFSET LEN)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
# LEN
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done LEN
addq %rcx, %rax
# Done (+ OFFSET LEN)
# VEC-LEN
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done VEC-LEN
cmpq %rcx, %rax
jle .L250
# Done conditional (<= (+ OFFSET LEN) VEC-LEN)
.L255:
# FALSE
# Done conditional FALSE
# Done conditional (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE)
.L253:
# FALSE
# Done conditional FALSE
.L252:
# TRUE
# Done conditional TRUE
# Done conditional (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE)
.L249:
# (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN))
# (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN)
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)"
movq $.L246+4, %rax
# Done "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)"
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# VEC-LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VEC-LEN
movq %rax, 40(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN)
# Done (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN))
jmp .L251
.L250:
movq $23, %rax
.L251:
# Done (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN)))
addq $8, %rsp
addq $8, %rsp
ret
.L248:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L258:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L259
# (CHECK-VECTOR-INDEX VEC INDEX)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VEC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VEC
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# CHECK-VECTOR-INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 512(%rax), %rax
# Done CHECK-VECTOR-INDEX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-VECTOR-INDEX VEC INDEX)
# (PRIMITIVE-VECTOR-REF VEC INDEX)
# VEC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VEC
# INDEX
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done INDEX
movq 5(%rax,%rcx), %rax
# Done (PRIMITIVE-VECTOR-REF VEC INDEX)
addq $8, %rsp
ret
.L259:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L260:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L261
# (CHECK-VECTOR-INDEX VEC INDEX)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VEC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VEC
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# CHECK-VECTOR-INDEX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 512(%rax), %rax
# Done CHECK-VECTOR-INDEX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-VECTOR-INDEX VEC INDEX)
# (PRIMITIVE-VECTOR-SET! VEC INDEX VAL)
# VEC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VEC
# INDEX
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done INDEX
# VAL
movq 0(%rsp), %rdx
movq 32(%rdx), %rdx
# Done VAL
movq %rdx, 5(%rax,%rcx)
# Done (PRIMITIVE-VECTOR-SET! VEC INDEX VAL)
# VAL
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done VAL
addq $8, %rsp
ret
.L261:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L262:
pushq %rcx
cmpq $48, 0(%rcx)
jne .L263
# (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# SRC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SRC
movq %rax, 16(%rcx)
# SRC-OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done SRC-OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 48(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-VECTOR-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 504(%rax), %rax
# Done CHECK-VECTOR-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN)
# (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# DEST
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done DEST
movq %rax, 16(%rcx)
# DEST-OFFSET
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done DEST-OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 48(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-VECTOR-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 504(%rax), %rax
# Done CHECK-VECTOR-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN)
# (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)
# SRC-OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done SRC-OFFSET
# DEST-OFFSET
movq 0(%rsp), %rcx
movq 40(%rcx), %rcx
# Done DEST-OFFSET
cmpq %rcx, %rax
jng .L265
.L264:
# SRC
movq 0(%rsp), %rsi
movq 16(%rsi), %rsi
# Done SRC
# SRC-OFFSET
movq 0(%rsp), %rdi
movq 24(%rdi), %rdi
# Done SRC-OFFSET
leaq 5(%rsi,%rdi), %rsi
# DEST
movq 0(%rsp), %rdi
movq 32(%rdi), %rdi
# Done DEST
# DEST-OFFSET
movq 0(%rsp), %rcx
movq 40(%rcx), %rcx
# Done DEST-OFFSET
leaq 5(%rdi,%rcx), %rdi
# LEN
movq 0(%rsp), %rcx
movq 48(%rcx), %rcx
# Done LEN
cld
sarq $3, %rcx
rep ; movsq
jmp .L266
.L265:
# DEST
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done DEST
# DEST-OFFSET
movq 0(%rsp), %rcx
movq 40(%rcx), %rcx
# Done DEST-OFFSET
# LEN
movq 0(%rsp), %rdx
movq 48(%rdx), %rdx
# Done LEN
addq %rdx, %rcx
movq $8, %rdx
subq %rdx, %rcx
leaq 5(%rax,%rcx), %rax
pushq %rax
# SRC
movq 8(%rsp), %rsi
movq 16(%rsi), %rsi
# Done SRC
# SRC-OFFSET
movq 8(%rsp), %rcx
movq 24(%rcx), %rcx
# Done SRC-OFFSET
# LEN
movq 8(%rsp), %rdi
movq 48(%rdi), %rdi
# Done LEN
addq %rdi, %rcx
movq $8, %rdi
subq %rdi, %rcx
leaq 5(%rsi,%rcx), %rsi
# LEN
movq 8(%rsp), %rcx
movq 48(%rcx), %rcx
# Done LEN
popq %rdi
std
sarq $3, %rcx
rep ; movsq
.L266:
# Done (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)
addq $8, %rsp
ret
.L263:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $48, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L267:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L268
# (CHECK-STRING-RANGE STR OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-STRING-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 544(%rax), %rax
# Done CHECK-STRING-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-RANGE STR OFFSET LEN)
# (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))
# (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))
# (FIXNUM->RAW FD)
# FD
movq 0(%rsp), %rdi
movq 16(%rdi), %rdi
# Done FD
sarq $3, %rdi
# Done (FIXNUM->RAW FD)
# (STRING-ADDRESS STR OFFSET)
# STR
movq 0(%rsp), %rsi
movq 24(%rsi), %rsi
# Done STR
# OFFSET
movq 0(%rsp), %rdx
movq 32(%rdx), %rdx
# Done OFFSET
sarq $3, %rdx
leaq 4(%rsi,%rdx), %rsi
# Done (STRING-ADDRESS STR OFFSET)
# (FIXNUM->RAW LEN)
# LEN
movq 0(%rsp), %rdx
movq 40(%rdx), %rdx
# Done LEN
sarq $3, %rdx
# Done (FIXNUM->RAW LEN)
cld
pushfq
andl $4294705151, (%rsp)
popfq
call read
pushfq
orl $262144, (%rsp)
popfq
# Done (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))
shlq $3, %rax
# Done (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))
addq $8, %rsp
ret
.L268:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L269:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L270
# (CHECK-STRING-RANGE STR OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-STRING-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 544(%rax), %rax
# Done CHECK-STRING-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-RANGE STR OFFSET LEN)
# (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))
# (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))
# (FIXNUM->RAW FD)
# FD
movq 0(%rsp), %rdi
movq 16(%rdi), %rdi
# Done FD
sarq $3, %rdi
# Done (FIXNUM->RAW FD)
# (STRING-ADDRESS STR OFFSET)
# STR
movq 0(%rsp), %rsi
movq 24(%rsi), %rsi
# Done STR
# OFFSET
movq 0(%rsp), %rdx
movq 32(%rdx), %rdx
# Done OFFSET
sarq $3, %rdx
leaq 4(%rsi,%rdx), %rsi
# Done (STRING-ADDRESS STR OFFSET)
# (FIXNUM->RAW LEN)
# LEN
movq 0(%rsp), %rdx
movq 40(%rdx), %rdx
# Done LEN
sarq $3, %rdx
# Done (FIXNUM->RAW LEN)
cld
pushfq
andl $4294705151, (%rsp)
popfq
call write
pushfq
orl $262144, (%rsp)
popfq
# Done (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))
shlq $3, %rax
# Done (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))
addq $8, %rsp
ret
.L270:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L271:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L272
# (SYSCALL-WRITE 1 STR OFFSET LEN)
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# 1
movq $8, %rax
# Done 1
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 32(%rcx)
# LEN
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 40(%rcx)
# SYSCALL-WRITE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 464(%rax), %rax
# Done SYSCALL-WRITE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (SYSCALL-WRITE 1 STR OFFSET LEN)
addq $8, %rsp
ret
.L272:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L273:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L274
# (SYSCALL-WRITE 2 STR OFFSET LEN)
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# 2
movq $16, %rax
# Done 2
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 32(%rcx)
# LEN
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 40(%rcx)
# SYSCALL-WRITE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 464(%rax), %rax
# Done SYSCALL-WRITE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (SYSCALL-WRITE 2 STR OFFSET LEN)
addq $8, %rsp
ret
.L274:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L275:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L276
# (IF (NULL? L) (BEGIN FALSE) (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN))))
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
jne .L278
# Done conditional (NULL? L)
.L277:
# (BEGIN FALSE)
# FALSE
movq $7, %rax
# Done FALSE
# Done (BEGIN FALSE)
jmp .L279
.L278:
# (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN)))
# (EQ? KEY (CAR (CAR L)))
# KEY
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done KEY
# (CAR (CAR L))
# (CAR L)
# L
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done L
movq -2(%rcx), %rcx
# Done (CAR L)
movq -2(%rcx), %rcx
# Done (CAR (CAR L))
cmpq %rcx, %rax
jne .L281
# Done conditional (EQ? KEY (CAR (CAR L)))
.L280:
# (BEGIN (CAR L))
# (CAR L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq -2(%rax), %rax
# Done (CAR L)
# Done (BEGIN (CAR L))
jmp .L282
.L281:
# (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN))
# TRUE
# Done conditional TRUE
.L283:
# (BEGIN (ASSOC KEY (CDR L)))
# (ASSOC KEY (CDR L))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# KEY
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done KEY
movq %rax, 16(%rcx)
# (CDR L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq %rax, 24(%rcx)
# ASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 440(%rax), %rax
# Done ASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSOC KEY (CDR L))
# Done (BEGIN (ASSOC KEY (CDR L)))
jmp .L285
.L284:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L285:
# Done (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN))
.L282:
# Done (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN)))
.L279:
# Done (IF (NULL? L) (BEGIN FALSE) (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN))))
addq $8, %rsp
ret
.L276:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L286:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L287
# (CONS (CONS KEY VAL) TAIL)
# (CONS KEY VAL)
# KEY
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done KEY
# VAL
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done VAL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS KEY VAL)
# TAIL
movq 0(%rsp), %rcx
movq 32(%rcx), %rcx
# Done TAIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CONS KEY VAL) TAIL)
addq $8, %rsp
ret
.L287:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L288:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L289
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (CHECK-STRING-RANGE STR OFFSET LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# CHECK-STRING-RANGE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 544(%rax), %rax
# Done CHECK-STRING-RANGE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHECK-STRING-RANGE STR OFFSET LEN)
# (DEFINE NEWSTR (MAKE-STRING LEN))
# (MAKE-STRING LEN)
# LEN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING LEN)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE NEWSTR (MAKE-STRING LEN))
# (STRING-COPY STR OFFSET NEWSTR 0 LEN)
subq $56, %rbx
movq $48, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# NEWSTR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEWSTR
movq %rax, 32(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 40(%rcx)
# LEN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 48(%rcx)
# STRING-COPY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 520(%rax), %rax
# Done STRING-COPY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-COPY STR OFFSET NEWSTR 0 LEN)
# NEWSTR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEWSTR
addq $8, %rsp
addq $8, %rsp
ret
.L289:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L290:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L291
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE LEN (STRING-LENGTH STR))
# (STRING-LENGTH STR)
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq -4(%rax), %rax
# Done (STRING-LENGTH STR)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE LEN (STRING-LENGTH STR))
# (IF (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE) (SUBSTRING STR 0 (- LEN 1)) STR)
# (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE)
.L297:
# (> LEN 0)
# LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LEN
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jng .L293
# Done conditional (> LEN 0)
.L296:
# (EQ? #\Newline (STRING-REF STR (- LEN 1)))
# (STRING-REF STR (- LEN 1))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# (- LEN 1)
# LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LEN
# 1
movq $8, %rdx
# Done 1
subq %rdx, %rax
# Done (- LEN 1)
movq %rax, 24(%rcx)
# STRING-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (STRING-REF STR (- LEN 1))
# #\Newline
movq $80, %rax
# Done #\Newline
cmpq %rcx, %rax
jne .L293
# Done conditional (EQ? #\Newline (STRING-REF STR (- LEN 1)))
.L295:
# FALSE
# Done conditional FALSE
# Done conditional (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE)
.L292:
# (SUBSTRING STR 0 (- LEN 1))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# (- LEN 1)
# LEN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LEN
# 1
movq $8, %rdx
# Done 1
subq %rdx, %rax
# Done (- LEN 1)
movq %rax, 32(%rcx)
# SUBSTRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 424(%rax), %rax
# Done SUBSTRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (SUBSTRING STR 0 (- LEN 1))
jmp .L294
.L293:
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
.L294:
# Done (IF (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE) (SUBSTRING STR 0 (- LEN 1)) STR)
addq $8, %rsp
addq $8, %rsp
ret
.L291:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L298:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L299
# (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1523 (= POS LEN))
# (= POS LEN)
# POS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done POS
# LEN
movq 0(%rsp), %rdx
movq 8(%rdx), %rdx
movq 8(%rdx), %rdx
movq 8(%rdx), %rdx
movq 16(%rdx), %rdx
# Done LEN
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (= POS LEN)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1523 (= POS LEN))
# (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))
# #:G1523
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L301
# Done conditional #:G1523
.L300:
# #:G1523
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1523
jmp .L302
.L301:
# (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE)
# (EQ? (STRING-REF A POS) (STRING-REF B POS))
# (STRING-REF A POS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# A
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 16(%rcx)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# STRING-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-REF A POS)
pushq %rax
# (STRING-REF B POS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# B
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done B
movq %rax, 16(%rcx)
# POS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# STRING-REF
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (STRING-REF B POS)
popq %rax
cmpq %rcx, %rax
jne .L304
# Done conditional (EQ? (STRING-REF A POS) (STRING-REF B POS))
.L303:
# (BEGIN (SET! POS (+ POS 1)) (AUX))
# (SET! POS (+ POS 1))
# (+ POS 1)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done POS
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ POS 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! POS (+ POS 1))
# (AUX)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# AUX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done AUX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (AUX)
# Done (BEGIN (SET! POS (+ POS 1)) (AUX))
jmp .L305
.L304:
# FALSE
movq $7, %rax
# Done FALSE
.L305:
# Done (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE)
.L302:
# Done (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE)))
addq $8, %rsp
ret
.L299:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L306:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L307
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE LEN (STRING-LENGTH A))
# (STRING-LENGTH A)
# A
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done A
movq -4(%rax), %rax
# Done (STRING-LENGTH A)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE LEN (STRING-LENGTH A))
# (IF (= (STRING-LENGTH B) LEN) (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX)) FALSE)
# (= (STRING-LENGTH B) LEN)
# (STRING-LENGTH B)
# B
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done B
movq -4(%rax), %rax
# Done (STRING-LENGTH B)
# LEN
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done LEN
cmpq %rcx, %rax
jne .L309
# Done conditional (= (STRING-LENGTH B) LEN)
.L308:
# (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE POS 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE POS 0)
# (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE)))))
# (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))
movq 0(%rsp), %rax
movq $.L298, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE)))))
# (AUX)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# AUX
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done AUX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (AUX)
addq $8, %rsp
# Done (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX))
jmp .L310
.L309:
# FALSE
movq $7, %rax
# Done FALSE
.L310:
# Done (IF (= (STRING-LENGTH B) LEN) (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX)) FALSE)
addq $8, %rsp
addq $8, %rsp
ret
.L307:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L311:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L312
# (IF (PAIR? A) (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)) (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN))))
# (PAIR? A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
andb $7, %al
cmpb $2, %al
jne .L314
# Done conditional (PAIR? A)
.L313:
# (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE))
# (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)
# (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE)
.L321:
# (PAIR? B)
# B
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done B
andb $7, %al
cmpb $2, %al
jne .L317
# Done conditional (PAIR? B)
.L320:
# (EQUAL? (CAR A) (CAR B))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq -2(%rax), %rax
# Done (CAR A)
movq %rax, 16(%rcx)
# (CAR B)
# B
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done B
movq -2(%rax), %rax
# Done (CAR B)
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L317
# Done conditional (EQUAL? (CAR A) (CAR B))
.L319:
# FALSE
# Done conditional FALSE
# Done conditional (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE)
.L316:
# (EQUAL? (CDR A) (CDR B))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq 6(%rax), %rax
# Done (CDR A)
movq %rax, 16(%rcx)
# (CDR B)
# B
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done B
movq 6(%rax), %rax
# Done (CDR B)
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EQUAL? (CDR A) (CDR B))
jmp .L318
.L317:
# FALSE
movq $7, %rax
# Done FALSE
.L318:
# Done (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)
# Done (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE))
jmp .L315
.L314:
# (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN)))
# (STRING? A)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
andb $7, %al
cmpb $4, %al
jne .L323
# Done conditional (STRING? A)
.L322:
# (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE))
# (IF (STRING? B) (STRING-EQUAL? A B) FALSE)
# (STRING? B)
# B
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done B
andb $7, %al
cmpb $4, %al
jne .L326
# Done conditional (STRING? B)
.L325:
# (STRING-EQUAL? A B)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 16(%rcx)
# B
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done B
movq %rax, 24(%rcx)
# STRING-EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 408(%rax), %rax
# Done STRING-EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-EQUAL? A B)
jmp .L327
.L326:
# FALSE
movq $7, %rax
# Done FALSE
.L327:
# Done (IF (STRING? B) (STRING-EQUAL? A B) FALSE)
# Done (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE))
jmp .L324
.L323:
# (IF TRUE (BEGIN (EQ? A B)) (BEGIN))
# TRUE
# Done conditional TRUE
.L328:
# (BEGIN (EQ? A B))
# (EQ? A B)
# A
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done A
# B
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done B
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? A B)
# Done (BEGIN (EQ? A B))
jmp .L330
.L329:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L330:
# Done (IF TRUE (BEGIN (EQ? A B)) (BEGIN))
.L324:
# Done (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN)))
.L315:
# Done (IF (PAIR? A) (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)) (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN))))
addq $8, %rsp
ret
.L312:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L331:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L332
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE STR (MAKE-STRING 1000))
# (MAKE-STRING 1000)
# 1000
movq $8000, %rax
# Done 1000
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING 1000)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE STR (MAKE-STRING 1000))
# (SUBSTRING STR 0 (SYSCALL-READ 0 STR 0 1000))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# (SYSCALL-READ 0 STR 0 1000)
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# 0
movq $0, %rax
# Done 0
movq %rax, 16(%rcx)
# STR
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 32(%rcx)
# 1000
movq $8000, %rax
# Done 1000
movq %rax, 40(%rcx)
# SYSCALL-READ
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 472(%rax), %rax
# Done SYSCALL-READ
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (SYSCALL-READ 0 STR 0 1000)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# SUBSTRING
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 424(%rax), %rax
# Done SUBSTRING
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (SUBSTRING STR 0 (SYSCALL-READ 0 STR 0 1000))
addq $8, %rsp
addq $8, %rsp
ret
.L332:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L333:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L334
# (STREAM STR POS LEN)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# POS
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# LEN
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done LEN
movq %rax, 32(%rcx)
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STREAM STR POS LEN)
addq $8, %rsp
ret
.L334:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L335:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L336
# (STREAM STR 0 (STRING-LENGTH STR))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# (STRING-LENGTH STR)
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq -4(%rax), %rax
# Done (STRING-LENGTH STR)
movq %rax, 32(%rcx)
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STREAM STR 0 (STRING-LENGTH STR))
addq $8, %rsp
ret
.L336:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L337:
.quad 288
.ascii "0123456789abcdefghijklmnopqrstuvwxyz"
.text
.L338:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L339
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE BUF (MAKE-STRING 1))
# (MAKE-STRING 1)
# 1
movq $8, %rax
# Done 1
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING 1)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE BUF (MAKE-STRING 1))
# (STRING-SET! BUF 0 CH)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# BUF
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUF
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# CH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done CH
movq %rax, 32(%rcx)
# STRING-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 528(%rax), %rax
# Done STRING-SET!
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-SET! BUF 0 CH)
# BUF
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUF
addq $8, %rsp
addq $8, %rsp
ret
.L339:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L340:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L341
# (WRITE-STRING STREAM STR)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM STR)
addq $8, %rsp
ret
.L341:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L342:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L343
# (WRITE-STRING STREAM STR)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM STR)
addq $8, %rsp
ret
.L343:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L344:
.quad 8
.ascii "0"
.data
.align 8
.L345:
.quad 96
.ascii "Bad radix ~D"
.text
.L346:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L347
# (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525)))
# (> NUM 0)
# NUM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done NUM
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jng .L349
# Done conditional (> NUM 0)
.L348:
# (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))
# (SET! POS (- POS 1))
# (- POS 1)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done POS
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- POS 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 16(%rcx)
# Done (SET! POS (- POS 1))
# (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*)))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# BUF
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done BUF
movq %rax, 16(%rcx)
# POS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# PRINT-NUMBER-DIGITS
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 368(%rax), %rax
# Done PRINT-NUMBER-DIGITS
movq %rax, 16(%rcx)
# (REM NUM *PRINT-RADIX*)
# NUM
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done NUM
# *PRINT-RADIX*
movq 16(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 360(%rcx), %rcx
# Done *PRINT-RADIX*
movq %rax, %rdx
sarq $63, %rdx
idivq %rcx
movq %rdx, %rax
# Done (REM NUM *PRINT-RADIX*)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# STRING-REF
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# STRING-SET!
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 528(%rax), %rax
# Done STRING-SET!
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*)))
# (SET! NUM (TRUNCATE NUM *PRINT-RADIX*))
# (TRUNCATE NUM *PRINT-RADIX*)
# NUM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done NUM
# *PRINT-RADIX*
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 360(%rcx), %rcx
# Done *PRINT-RADIX*
movq %rax, %rdx
sarq $63, %rdx
idivq %rcx
shlq $3, %rax
# Done (TRUNCATE NUM *PRINT-RADIX*)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! NUM (TRUNCATE NUM *PRINT-RADIX*))
# (#:G1525)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1525
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1525
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1525)
# Done (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))
jmp .L350
.L349:
movq $23, %rax
.L350:
# Done (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525)))
addq $8, %rsp
ret
.L347:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L351:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L352
# (IF (= NUM 0) (WRITE-STRING STREAM "0") (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS))))
# (= NUM 0)
# NUM
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done NUM
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jne .L354
# Done conditional (= NUM 0)
.L353:
# (WRITE-STRING STREAM "0")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# "0"
movq $.L344+4, %rax
# Done "0"
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM "0")
jmp .L355
.L354:
# (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS)))
subq $40, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*)))
# (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE)
.L361:
# (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE)
.L364:
# (<= 2 *PRINT-RADIX*)
# 2
movq $16, %rax
# Done 2
# *PRINT-RADIX*
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 360(%rcx), %rcx
# Done *PRINT-RADIX*
cmpq %rcx, %rax
jnle .L356
# Done conditional (<= 2 *PRINT-RADIX*)
.L363:
# (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS))
# *PRINT-RADIX*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 360(%rax), %rax
# Done *PRINT-RADIX*
# (STRING-LENGTH PRINT-NUMBER-DIGITS)
# PRINT-NUMBER-DIGITS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 368(%rcx), %rcx
# Done PRINT-NUMBER-DIGITS
movq -4(%rcx), %rcx
# Done (STRING-LENGTH PRINT-NUMBER-DIGITS)
cmpq %rcx, %rax
jle .L357
# Done conditional (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS))
.L362:
# FALSE
# Done conditional FALSE
# Done conditional (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE)
.L360:
# FALSE
# Done conditional FALSE
.L359:
# TRUE
# Done conditional TRUE
# Done conditional (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE)
.L356:
# (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))
# (ERROR "Bad radix ~D" *PRINT-RADIX*)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "Bad radix ~D"
movq $.L345+4, %rax
# Done "Bad radix ~D"
movq %rax, 16(%rcx)
# *PRINT-RADIX*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 360(%rax), %rax
# Done *PRINT-RADIX*
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Bad radix ~D" *PRINT-RADIX*)
# Done (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))
jmp .L358
.L357:
movq $23, %rax
.L358:
# Done (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*)))
# (DEFINE NEGATED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE NEGATED FALSE)
# (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM))))
# (< NUM 0)
# NUM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done NUM
# 0
movq $0, %rcx
# Done 0
cmpq %rcx, %rax
jnl .L366
# Done conditional (< NUM 0)
.L365:
# (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))
# (SET! NEGATED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (SET! NEGATED TRUE)
# (SET! NUM (- NUM))
# (- NUM)
# NUM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done NUM
negq %rax
# Done (- NUM)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! NUM (- NUM))
# Done (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))
jmp .L367
.L366:
movq $23, %rax
.L367:
# Done (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE BUF (MAKE-STRING 21))
# (MAKE-STRING 21)
# 21
movq $168, %rax
# Done 21
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING 21)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE BUF (MAKE-STRING 21))
# (DEFINE POS 21)
# 21
movq $168, %rax
# Done 21
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE POS 21)
# (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525)))))
# (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))
movq 0(%rsp), %rax
movq $.L346, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525)))))
# (#:G1525)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1525
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1525
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1525)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525))
# (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-)))
# NEGATED
movq 0(%rsp), %rax
movq 32(%rax), %rax
cmpq $7, %rax
je .L369
# Done conditional NEGATED
.L368:
# (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))
# (SET! POS (- POS 1))
# (- POS 1)
# POS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done POS
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- POS 1)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (SET! POS (- POS 1))
# (STRING-SET! BUF POS #\-)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# BUF
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done BUF
movq %rax, 16(%rcx)
# POS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# #\-
movq $360, %rax
# Done #\-
movq %rax, 32(%rcx)
# STRING-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 528(%rax), %rax
# Done STRING-SET!
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-SET! BUF POS #\-)
# Done (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))
jmp .L370
.L369:
movq $23, %rax
.L370:
# Done (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-)))
# (WRITE-SUBSTRING STREAM BUF POS (- 21 POS))
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# BUF
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done BUF
movq %rax, 24(%rcx)
# POS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done POS
movq %rax, 32(%rcx)
# (- 21 POS)
# 21
movq $168, %rax
# Done 21
# POS
movq 0(%rsp), %rdx
movq 16(%rdx), %rdx
# Done POS
subq %rdx, %rax
# Done (- 21 POS)
movq %rax, 40(%rcx)
# WRITE-SUBSTRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 384(%rax), %rax
# Done WRITE-SUBSTRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-SUBSTRING STREAM BUF POS (- 21 POS))
addq $8, %rsp
# Done (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS)))
.L355:
# Done (IF (= NUM 0) (WRITE-STRING STREAM "0") (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS))))
addq $8, %rsp
ret
.L352:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L371:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L372
# (IF *PRINT-READABLY* (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM)) (WRITE-STRING STREAM STR))
# *PRINT-READABLY*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 352(%rax), %rax
cmpq $7, %rax
je .L374
# Done conditional *PRINT-READABLY*
.L373:
# (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM))
# (PRINT-DOUBLE-QUOTE STREAM)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# PRINT-DOUBLE-QUOTE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 328(%rax), %rax
# Done PRINT-DOUBLE-QUOTE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-DOUBLE-QUOTE STREAM)
# (WRITE-STRING STREAM STR)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM STR)
# (PRINT-DOUBLE-QUOTE STREAM)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# PRINT-DOUBLE-QUOTE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 328(%rax), %rax
# Done PRINT-DOUBLE-QUOTE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-DOUBLE-QUOTE STREAM)
# Done (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM))
jmp .L375
.L374:
# (WRITE-STRING STREAM STR)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM STR)
.L375:
# Done (IF *PRINT-READABLY* (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM)) (WRITE-STRING STREAM STR))
addq $8, %rsp
ret
.L372:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L376:
.quad 16
.ascii "#\\"
.data
.align 8
.L377:
.quad 56
.ascii "Newline"
.text
.L378:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L379
# (IF (NUMBER? CH) (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH))) (PRINT STREAM CH))
# (NUMBER? CH)
# CH
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done CH
andb $7, %al
cmpb $0, %al
jne .L381
# Done conditional (NUMBER? CH)
.L380:
# (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH)))
# *PRINT-READABLY*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 352(%rax), %rax
cmpq $7, %rax
je .L384
# Done conditional *PRINT-READABLY*
.L383:
# (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN)))))
# (WRITE-STRING STREAM "#\\")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# "#\\"
movq $.L376+4, %rax
# Done "#\\"
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM "#\\")
# (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))
subq $24, %rbx
pushq %rbx
movq $16, 0(%rbx)
# (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN)))
# (EQ? CH #\Newline)
# CH
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done CH
# #\Newline
movq $80, %rcx
# Done #\Newline
cmpq %rcx, %rax
jne .L387
# Done conditional (EQ? CH #\Newline)
.L386:
# (BEGIN "Newline")
# "Newline"
movq $.L377+4, %rax
# Done "Newline"
# Done (BEGIN "Newline")
jmp .L388
.L387:
# (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))
# TRUE
# Done conditional TRUE
.L389:
# (BEGIN (CHARACTER-STRING CH))
# (CHARACTER-STRING CH)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# CH
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done CH
movq %rax, 16(%rcx)
# CHARACTER-STRING
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 344(%rax), %rax
# Done CHARACTER-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHARACTER-STRING CH)
# Done (BEGIN (CHARACTER-STRING CH))
jmp .L391
.L390:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L391:
# Done (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))
.L388:
# Done (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# WRITE-STRING
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))
# Done (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN)))))
jmp .L385
.L384:
# (WRITE-STRING (CHARACTER-STRING CH))
subq $24, %rbx
pushq %rbx
movq $16, 0(%rbx)
# (CHARACTER-STRING CH)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# CH
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done CH
movq %rax, 16(%rcx)
# CHARACTER-STRING
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 344(%rax), %rax
# Done CHARACTER-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHARACTER-STRING CH)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# WRITE-STRING
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING (CHARACTER-STRING CH))
.L385:
# Done (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH)))
jmp .L382
.L381:
# (PRINT STREAM CH)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# CH
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done CH
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM CH)
.L382:
# Done (IF (NUMBER? CH) (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH))) (PRINT STREAM CH))
addq $8, %rsp
ret
.L379:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L392:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L393
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE STR (SYMBOL-NAME SYM))
# (SYMBOL-NAME SYM)
# SYM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done SYM
movq -7(%rax), %rax
# Done (SYMBOL-NAME SYM)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE STR (SYMBOL-NAME SYM))
# (WRITE-SUBSTRING STREAM STR 0 (STRING-LENGTH STR))
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 24(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 32(%rcx)
# (STRING-LENGTH STR)
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq -4(%rax), %rax
# Done (STRING-LENGTH STR)
movq %rax, 40(%rcx)
# WRITE-SUBSTRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 384(%rax), %rax
# Done WRITE-SUBSTRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-SUBSTRING STREAM STR 0 (STRING-LENGTH STR))
addq $8, %rsp
addq $8, %rsp
ret
.L393:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L396:
.quad 40
.ascii "false"
.data
.align 8
.L395:
.quad 7
.quad .L396+4
.data
.align 8
.L399:
.quad 32
.ascii "true"
.data
.align 8
.L398:
.quad 15
.quad .L399+4
.data
.align 8
.L402:
.quad 88
.ascii "unspecified"
.data
.align 8
.L401:
.quad 23
.quad .L402+4
.data
.align 8
.L405:
.quad 16
.ascii "()"
.data
.align 8
.L404:
.quad 31
.quad .L405+4
.data
.align 8
.L403:
.quad .L404+2
.quad 31
.data
.align 8
.L400:
.quad .L401+2
.quad .L403+2
.data
.align 8
.L397:
.quad .L398+2
.quad .L400+2
.data
.align 8
.L394:
.quad .L395+2
.quad .L397+2
.data
.align 8
.L406:
.quad 8
.ascii "("
.data
.align 8
.L407:
.quad 8
.ascii " "
.text
.L408:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L409
# (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527)))
# (PAIR? L)
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L
andb $7, %al
cmpb $2, %al
jne .L411
# Done conditional (PAIR? L)
.L410:
# (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))
# (WRITE-STRING STREAM " ")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# " "
movq $.L407+4, %rax
# Done " "
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM " ")
# (PRINT STREAM (CAR L))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR L)
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L
movq -2(%rax), %rax
# Done (CAR L)
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM (CAR L))
# (SET! L (CDR L))
# (CDR L)
# L
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! L (CDR L))
# (#:G1527)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1527
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1527
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1527)
# Done (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))
jmp .L412
.L411:
movq $23, %rax
.L412:
# Done (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527)))
addq $8, %rsp
ret
.L409:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L413:
.quad 24
.ascii " . "
.data
.align 8
.L414:
.quad 8
.ascii ")"
.text
.L415:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L416
# (WRITE-STRING STREAM "(")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# "("
movq $.L406+4, %rax
# Done "("
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM "(")
# (PRINT STREAM (CAR L))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq -2(%rax), %rax
# Done (CAR L)
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM (CAR L))
# (SET! L (CDR L))
# (CDR L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (SET! L (CDR L))
# (BEGIN (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))) (#:G1527))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527)))))
# (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))
movq 0(%rsp), %rax
movq $.L408, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527)))))
# (#:G1527)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1527
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1527
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1527)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))) (#:G1527))
# (IF (IF (NULL? L) FALSE TRUE) (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L)))
# (IF (NULL? L) FALSE TRUE)
.L422:
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
je .L418
# Done conditional (NULL? L)
.L421:
# FALSE
# Done conditional FALSE
.L420:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? L) FALSE TRUE)
.L417:
# (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L))
# (WRITE-STRING STREAM " . ")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# " . "
movq $.L413+4, %rax
# Done " . "
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM " . ")
# (PRINT STREAM L)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# L
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done L
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM L)
# Done (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L))
jmp .L419
.L418:
movq $23, %rax
.L419:
# Done (IF (IF (NULL? L) FALSE TRUE) (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L)))
# (WRITE-STRING STREAM ")")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# ")"
movq $.L414+4, %rax
# Done ")"
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM ")")
addq $8, %rsp
ret
.L416:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L423:
.quad 88
.ascii "#<function>"
.data
.align 8
.L424:
.quad 152
.ascii "cannot print object"
.text
.L425:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L426
# (IF (PAIR? OBJ) (BEGIN (PRINT-LIST STREAM OBJ)) (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))))))
# (PAIR? OBJ)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
andb $7, %al
cmpb $2, %al
jne .L428
# Done conditional (PAIR? OBJ)
.L427:
# (BEGIN (PRINT-LIST STREAM OBJ))
# (PRINT-LIST STREAM OBJ)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
movq %rax, 24(%rcx)
# PRINT-LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 280(%rax), %rax
# Done PRINT-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-LIST STREAM OBJ)
# Done (BEGIN (PRINT-LIST STREAM OBJ))
jmp .L429
.L428:
# (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))))))
# (NUMBER? OBJ)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
andb $7, %al
cmpb $0, %al
jne .L431
# Done conditional (NUMBER? OBJ)
.L430:
# (BEGIN (PRINT-NUMBER STREAM OBJ))
# (PRINT-NUMBER STREAM OBJ)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
movq %rax, 24(%rcx)
# PRINT-NUMBER
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 320(%rax), %rax
# Done PRINT-NUMBER
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-NUMBER STREAM OBJ)
# Done (BEGIN (PRINT-NUMBER STREAM OBJ))
jmp .L432
.L431:
# (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))))
# (STRING? OBJ)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
andb $7, %al
cmpb $4, %al
jne .L434
# Done conditional (STRING? OBJ)
.L433:
# (BEGIN (PRINT-STRING STREAM OBJ))
# (PRINT-STRING STREAM OBJ)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
movq %rax, 24(%rcx)
# PRINT-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 312(%rax), %rax
# Done PRINT-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-STRING STREAM OBJ)
# Done (BEGIN (PRINT-STRING STREAM OBJ))
jmp .L435
.L434:
# (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))))
# (SYMBOL? OBJ)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
cmpq $2055, %rax
jl .L439
andq $7, %rax
cmpq $7, %rax
.L439:
jne .L437
# Done conditional (SYMBOL? OBJ)
.L436:
# (BEGIN (PRINT-SYMBOL STREAM OBJ))
# (PRINT-SYMBOL STREAM OBJ)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
movq %rax, 24(%rcx)
# PRINT-SYMBOL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 296(%rax), %rax
# Done PRINT-SYMBOL
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-SYMBOL STREAM OBJ)
# Done (BEGIN (PRINT-SYMBOL STREAM OBJ))
jmp .L438
.L437:
# (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))
# (FUNCTION? OBJ)
# OBJ
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OBJ
andb $7, %al
cmpb $1, %al
jne .L441
# Done conditional (FUNCTION? OBJ)
.L440:
# (BEGIN (WRITE-STRING STREAM "#<function>"))
# (WRITE-STRING STREAM "#<function>")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# "#<function>"
movq $.L423+4, %rax
# Done "#<function>"
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM "#<function>")
# Done (BEGIN (WRITE-STRING STREAM "#<function>"))
jmp .L442
.L441:
# (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))
# TRUE
# Done conditional TRUE
.L443:
# (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object")))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS))
# (ASSOC OBJ SPECIAL-PRINTED-FORMS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# OBJ
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done OBJ
movq %rax, 16(%rcx)
# SPECIAL-PRINTED-FORMS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 288(%rax), %rax
# Done SPECIAL-PRINTED-FORMS
movq %rax, 24(%rcx)
# ASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 440(%rax), %rax
# Done ASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSOC OBJ SPECIAL-PRINTED-FORMS)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS))
# (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))
# SPECIAL
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L447
# Done conditional SPECIAL
.L446:
# (WRITE-STRING STREAM (CDR SPECIAL))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CDR SPECIAL)
# SPECIAL
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SPECIAL
movq 6(%rax), %rax
# Done (CDR SPECIAL)
movq %rax, 24(%rcx)
# WRITE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 376(%rax), %rax
# Done WRITE-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-STRING STREAM (CDR SPECIAL))
jmp .L448
.L447:
# (ERROR "cannot print object")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# "cannot print object"
movq $.L424+4, %rax
# Done "cannot print object"
movq %rax, 16(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "cannot print object")
.L448:
# Done (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))
addq $8, %rsp
# Done (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object")))
jmp .L445
.L444:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L445:
# Done (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))
.L442:
# Done (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))
.L438:
# Done (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))))
.L435:
# Done (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))))
.L432:
# Done (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))))))
.L429:
# Done (IF (PAIR? OBJ) (BEGIN (PRINT-LIST STREAM OBJ)) (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))))))
addq $8, %rsp
ret
.L426:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L449:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L450
# (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM))
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# CONTROL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CONTROL
movq %rax, 24(%rcx)
# WRITE-FROM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done WRITE-FROM
movq %rax, 32(%rcx)
# (- POS WRITE-FROM)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
# WRITE-FROM
movq 0(%rsp), %rdx
movq 8(%rdx), %rdx
movq 40(%rdx), %rdx
# Done WRITE-FROM
subq %rdx, %rax
# Done (- POS WRITE-FROM)
movq %rax, 40(%rcx)
# WRITE-SUBSTRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 384(%rax), %rax
# Done WRITE-SUBSTRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM))
addq $8, %rsp
ret
.L450:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L451:
.quad 216
.ascii "Unknown format character ~C"
.text
.L452:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L453
# (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542)))
# (< POS CONTROL-LEN)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
# CONTROL-LEN
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done CONTROL-LEN
cmpq %rcx, %rax
jnl .L455
# Done conditional (< POS CONTROL-LEN)
.L454:
# (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))
# (SET! CH (STRING-REF CONTROL POS))
# (STRING-REF CONTROL POS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# CONTROL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CONTROL
movq %rax, 16(%rcx)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# STRING-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-REF CONTROL POS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! CH (STRING-REF CONTROL POS))
# (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))))))))
# (IF (EQ? CH #\~) FALSE TRUE)
.L462:
# (EQ? CH #\~)
# CH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CH
# #\~
movq $1008, %rcx
# Done #\~
cmpq %rcx, %rax
je .L458
# Done conditional (EQ? CH #\~)
.L461:
# FALSE
# Done conditional FALSE
.L460:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQ? CH #\~) FALSE TRUE)
.L457:
# (SET! POS (+ POS 1))
# (+ POS 1)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ POS 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 48(%rcx)
# Done (SET! POS (+ POS 1))
jmp .L459
.L458:
# (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))
# (FLUSH)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# FLUSH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FLUSH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FLUSH)
# (SET! POS (+ POS 1))
# (+ POS 1)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ POS 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 48(%rcx)
# Done (SET! POS (+ POS 1))
# (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))))))
# (>= POS CONTROL-LEN)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
# CONTROL-LEN
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done CONTROL-LEN
cmpq %rcx, %rax
jnge .L464
# Done conditional (>= POS CONTROL-LEN)
.L463:
# (SET! WRITE-FROM POS)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 40(%rcx)
# Done (SET! WRITE-FROM POS)
jmp .L465
.L464:
# (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))
# (SET! CH (STRING-REF CONTROL POS))
# (STRING-REF CONTROL POS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# CONTROL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CONTROL
movq %rax, 16(%rcx)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# STRING-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-REF CONTROL POS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! CH (STRING-REF CONTROL POS))
# (SET! POS (+ POS 1))
# (+ POS 1)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ POS 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 48(%rcx)
# Done (SET! POS (+ POS 1))
# (SET! WRITE-FROM POS)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done POS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 40(%rcx)
# Done (SET! WRITE-FROM POS)
# (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))))
# (EQ? CH #\~)
# CH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CH
# #\~
movq $1008, %rcx
# Done #\~
cmpq %rcx, %rax
jne .L467
# Done conditional (EQ? CH #\~)
.L466:
# (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1)))
# (SET! WRITE-FROM (- WRITE-FROM 1))
# (- WRITE-FROM 1)
# WRITE-FROM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done WRITE-FROM
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- WRITE-FROM 1)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 40(%rcx)
# Done (SET! WRITE-FROM (- WRITE-FROM 1))
# Done (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1)))
jmp .L468
.L467:
# (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))
# (EQ? CH #\%)
# CH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CH
# #\%
movq $296, %rcx
# Done #\%
cmpq %rcx, %rax
jne .L470
# Done conditional (EQ? CH #\%)
.L469:
# (BEGIN (PRINT-NEWLINE STREAM))
# (PRINT-NEWLINE STREAM)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# PRINT-NEWLINE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 336(%rax), %rax
# Done PRINT-NEWLINE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-NEWLINE STREAM)
# Done (BEGIN (PRINT-NEWLINE STREAM))
jmp .L471
.L470:
# (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))
# (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1543 (EQ? CH #\A))
# (EQ? CH #\A)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\A
movq $520, %rdx
# Done #\A
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\A)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1543 (EQ? CH #\A))
# (IF #:G1543 #:G1543 (EQ? CH #\a))
# #:G1543
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L476
# Done conditional #:G1543
.L475:
# #:G1543
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1543
jmp .L477
.L476:
# (EQ? CH #\a)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\a
movq $776, %rdx
# Done #\a
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\a)
.L477:
# Done (IF #:G1543 #:G1543 (EQ? CH #\a))
addq $8, %rsp
cmpq $7, %rax
je .L473
# Done conditional (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a)))
.L472:
# (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS)))
# (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1544 *PRINT-READABLY*)
# *PRINT-READABLY*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 352(%rax), %rax
# Done *PRINT-READABLY*
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1544 *PRINT-READABLY*)
# (SET! *PRINT-READABLY* FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 352(%rcx)
# Done (SET! *PRINT-READABLY* FALSE)
# (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS))))
# (BEGIN (PRINT STREAM (CAR ARGS)))
# (PRINT STREAM (CAR ARGS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM (CAR ARGS))
# Done (BEGIN (PRINT STREAM (CAR ARGS)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS))))
# (SET! *PRINT-READABLY* #:G1544)
# #:G1544
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1544
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 352(%rcx)
# Done (SET! *PRINT-READABLY* #:G1544)
# #:G1545
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1545
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545))
# (SET! ARGS (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! ARGS (CDR ARGS))
# Done (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS)))
jmp .L474
.L473:
# (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))
# (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1546 (EQ? CH #\S))
# (EQ? CH #\S)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\S
movq $664, %rdx
# Done #\S
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\S)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1546 (EQ? CH #\S))
# (IF #:G1546 #:G1546 (EQ? CH #\s))
# #:G1546
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L482
# Done conditional #:G1546
.L481:
# #:G1546
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1546
jmp .L483
.L482:
# (EQ? CH #\s)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\s
movq $920, %rdx
# Done #\s
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\s)
.L483:
# Done (IF #:G1546 #:G1546 (EQ? CH #\s))
addq $8, %rsp
cmpq $7, %rax
je .L479
# Done conditional (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s)))
.L478:
# (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS)))
# (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1547 *PRINT-READABLY*)
# *PRINT-READABLY*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 352(%rax), %rax
# Done *PRINT-READABLY*
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1547 *PRINT-READABLY*)
# (SET! *PRINT-READABLY* TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 352(%rcx)
# Done (SET! *PRINT-READABLY* TRUE)
# (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS))))
# (BEGIN (PRINT STREAM (CAR ARGS)))
# (PRINT STREAM (CAR ARGS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM (CAR ARGS))
# Done (BEGIN (PRINT STREAM (CAR ARGS)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS))))
# (SET! *PRINT-READABLY* #:G1547)
# #:G1547
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1547
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 352(%rcx)
# Done (SET! *PRINT-READABLY* #:G1547)
# #:G1548
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1548
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548))
# (SET! ARGS (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! ARGS (CDR ARGS))
# Done (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS)))
jmp .L480
.L479:
# (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))
# (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1549 (EQ? CH #\D))
# (EQ? CH #\D)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\D
movq $544, %rdx
# Done #\D
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\D)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1549 (EQ? CH #\D))
# (IF #:G1549 #:G1549 (EQ? CH #\d))
# #:G1549
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L488
# Done conditional #:G1549
.L487:
# #:G1549
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1549
jmp .L489
.L488:
# (EQ? CH #\d)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\d
movq $800, %rdx
# Done #\d
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\d)
.L489:
# Done (IF #:G1549 #:G1549 (EQ? CH #\d))
addq $8, %rsp
cmpq $7, %rax
je .L485
# Done conditional (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d)))
.L484:
# (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS)))
# (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1550 *PRINT-RADIX*)
# *PRINT-RADIX*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 360(%rax), %rax
# Done *PRINT-RADIX*
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1550 *PRINT-RADIX*)
# (SET! *PRINT-RADIX* 10)
# 10
movq $80, %rax
# Done 10
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 360(%rcx)
# Done (SET! *PRINT-RADIX* 10)
# (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS))))
# (BEGIN (PRINT STREAM (CAR ARGS)))
# (PRINT STREAM (CAR ARGS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM (CAR ARGS))
# Done (BEGIN (PRINT STREAM (CAR ARGS)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS))))
# (SET! *PRINT-RADIX* #:G1550)
# #:G1550
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1550
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 360(%rcx)
# Done (SET! *PRINT-RADIX* #:G1550)
# #:G1551
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1551
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551))
# (SET! ARGS (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! ARGS (CDR ARGS))
# Done (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS)))
jmp .L486
.L485:
# (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))
# (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1552 (EQ? CH #\X))
# (EQ? CH #\X)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\X
movq $704, %rdx
# Done #\X
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\X)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1552 (EQ? CH #\X))
# (IF #:G1552 #:G1552 (EQ? CH #\x))
# #:G1552
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L494
# Done conditional #:G1552
.L493:
# #:G1552
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1552
jmp .L495
.L494:
# (EQ? CH #\x)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\x
movq $960, %rdx
# Done #\x
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\x)
.L495:
# Done (IF #:G1552 #:G1552 (EQ? CH #\x))
addq $8, %rsp
cmpq $7, %rax
je .L491
# Done conditional (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x)))
.L490:
# (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS)))
# (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1553 *PRINT-RADIX*)
# *PRINT-RADIX*
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 360(%rax), %rax
# Done *PRINT-RADIX*
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1553 *PRINT-RADIX*)
# (SET! *PRINT-RADIX* 16)
# 16
movq $128, %rax
# Done 16
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 360(%rcx)
# Done (SET! *PRINT-RADIX* 16)
# (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS))))
# (BEGIN (PRINT STREAM (CAR ARGS)))
# (PRINT STREAM (CAR ARGS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# PRINT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 272(%rax), %rax
# Done PRINT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT STREAM (CAR ARGS))
# Done (BEGIN (PRINT STREAM (CAR ARGS)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS))))
# (SET! *PRINT-RADIX* #:G1553)
# #:G1553
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1553
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 360(%rcx)
# Done (SET! *PRINT-RADIX* #:G1553)
# #:G1554
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1554
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554))
# (SET! ARGS (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! ARGS (CDR ARGS))
# Done (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS)))
jmp .L492
.L491:
# (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))
# (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1555 (EQ? CH #\C))
# (EQ? CH #\C)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\C
movq $536, %rdx
# Done #\C
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\C)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1555 (EQ? CH #\C))
# (IF #:G1555 #:G1555 (EQ? CH #\c))
# #:G1555
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L500
# Done conditional #:G1555
.L499:
# #:G1555
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1555
jmp .L501
.L500:
# (EQ? CH #\c)
# CH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done CH
# #\c
movq $792, %rdx
# Done #\c
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? CH #\c)
.L501:
# Done (IF #:G1555 #:G1555 (EQ? CH #\c))
addq $8, %rsp
cmpq $7, %rax
je .L497
# Done conditional (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c)))
.L496:
# (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS)))
# (PRINT-CHAR STREAM (CAR ARGS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# PRINT-CHAR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 304(%rax), %rax
# Done PRINT-CHAR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (PRINT-CHAR STREAM (CAR ARGS))
# (SET! ARGS (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! ARGS (CDR ARGS))
# Done (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS)))
jmp .L498
.L497:
# (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))
# TRUE
# Done conditional TRUE
.L502:
# (BEGIN (ERROR "Unknown format character ~C" CH))
# (ERROR "Unknown format character ~C" CH)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "Unknown format character ~C"
movq $.L451+4, %rax
# Done "Unknown format character ~C"
movq %rax, 16(%rcx)
# CH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CH
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Unknown format character ~C" CH)
# Done (BEGIN (ERROR "Unknown format character ~C" CH))
jmp .L504
.L503:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L504:
# Done (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))
.L498:
# Done (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))
.L492:
# Done (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))
.L486:
# Done (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))
.L480:
# Done (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))
.L474:
# Done (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))
.L471:
# Done (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))
.L468:
# Done (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))))
# Done (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))
.L465:
# Done (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))))))
# Done (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))
.L459:
# Done (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN)))))))))))))
# (#:G1542)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1542
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1542
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1542)
# Done (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))
jmp .L456
.L455:
movq $23, %rax
.L456:
# Done (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542)))
addq $8, %rsp
ret
.L453:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L505:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L506
subq $56, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 48(%rcx)
# (DEFINE POS 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 48(%rcx)
# Done (DEFINE POS 0)
# (DEFINE WRITE-FROM 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE WRITE-FROM 0)
# (DEFINE CONTROL-LEN (STRING-LENGTH CONTROL))
# (STRING-LENGTH CONTROL)
# CONTROL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CONTROL
movq -4(%rax), %rax
# Done (STRING-LENGTH CONTROL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE CONTROL-LEN (STRING-LENGTH CONTROL))
# (DEFINE CH)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE CH)
# (DEFINE FLUSH (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM))))
# (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM)))
movq 0(%rsp), %rax
movq $.L449, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE FLUSH (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM))))
# (BEGIN (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))) (#:G1542))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542)))))
# (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))
movq 0(%rsp), %rax
movq $.L452, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542)))))
# (#:G1542)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1542
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1542
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1542)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))) (#:G1542))
# (FLUSH)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# FLUSH
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FLUSH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FLUSH)
addq $8, %rsp
addq $8, %rsp
ret
.L506:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L507:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (FORMOUT-LIST STREAM CONTROL ARGS)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STREAM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STREAM
movq %rax, 16(%rcx)
# CONTROL
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done CONTROL
movq %rax, 24(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 32(%rcx)
# FORMOUT-LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 264(%rax), %rax
# Done FORMOUT-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMOUT-LIST STREAM CONTROL ARGS)
addq $8, %rsp
ret
.text
.L509:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L510
# (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF)))
# (< SPACE LEN)
# SPACE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done SPACE
# LEN
movq 0(%rsp), %rcx
movq 32(%rcx), %rcx
# Done LEN
cmpq %rcx, %rax
jnl .L512
# Done conditional (< SPACE LEN)
.L511:
# (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (SET! SPACE (* 2 (STRING-LENGTH BUF)))
# (* 2 (STRING-LENGTH BUF))
# 2
movq $16, %rax
# Done 2
# (STRING-LENGTH BUF)
# BUF
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done BUF
movq -4(%rcx), %rcx
# Done (STRING-LENGTH BUF)
sarq $3, %rax
imulq %rcx, %rax
# Done (* 2 (STRING-LENGTH BUF))
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 40(%rcx)
# Done (SET! SPACE (* 2 (STRING-LENGTH BUF)))
# (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN))))
# (< SPACE LEN)
# SPACE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done SPACE
# LEN
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done LEN
cmpq %rcx, %rax
jnl .L515
# Done conditional (< SPACE LEN)
.L514:
# (BEGIN (SET! SPACE (* 2 LEN)))
# (SET! SPACE (* 2 LEN))
# (* 2 LEN)
# 2
movq $16, %rax
# Done 2
# LEN
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done LEN
sarq $3, %rax
imulq %rcx, %rax
# Done (* 2 LEN)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 40(%rcx)
# Done (SET! SPACE (* 2 LEN))
# Done (BEGIN (SET! SPACE (* 2 LEN)))
jmp .L516
.L515:
movq $23, %rax
.L516:
# Done (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN))))
# (DEFINE NEW-BUF (MAKE-STRING SPACE))
# (MAKE-STRING SPACE)
# SPACE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done SPACE
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING SPACE)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE NEW-BUF (MAKE-STRING SPACE))
# (STRING-COPY BUF 0 NEW-BUF 0 POS)
subq $56, %rbx
movq $48, 0(%rbx)
movq %rbx, %rcx
# BUF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done BUF
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# NEW-BUF
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEW-BUF
movq %rax, 32(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 40(%rcx)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done POS
movq %rax, 48(%rcx)
# STRING-COPY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 520(%rax), %rax
# Done STRING-COPY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-COPY BUF 0 NEW-BUF 0 POS)
# (SET! BUF NEW-BUF)
# NEW-BUF
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEW-BUF
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! BUF NEW-BUF)
addq $8, %rsp
# Done (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))
jmp .L513
.L512:
movq $23, %rax
.L513:
# Done (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF)))
# (STRING-COPY STR OFFSET BUF POS LEN)
subq $56, %rbx
movq $48, 0(%rbx)
movq %rbx, %rcx
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
movq %rax, 16(%rcx)
# OFFSET
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done OFFSET
movq %rax, 24(%rcx)
# BUF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done BUF
movq %rax, 32(%rcx)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done POS
movq %rax, 40(%rcx)
# LEN
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done LEN
movq %rax, 48(%rcx)
# STRING-COPY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 520(%rax), %rax
# Done STRING-COPY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-COPY STR OFFSET BUF POS LEN)
# (SET! POS (+ POS LEN))
# (+ POS LEN)
# POS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done POS
# LEN
movq 0(%rsp), %rcx
movq 32(%rcx), %rcx
# Done LEN
addq %rcx, %rax
# Done (+ POS LEN)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! POS (+ POS LEN))
# (SET! SPACE (- SPACE LEN))
# (- SPACE LEN)
# SPACE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done SPACE
# LEN
movq 0(%rsp), %rcx
movq 32(%rcx), %rcx
# Done LEN
subq %rcx, %rax
# Done (- SPACE LEN)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 40(%rcx)
# Done (SET! SPACE (- SPACE LEN))
addq $8, %rsp
ret
.L510:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L517:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L518
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE SPACE 100)
# 100
movq $800, %rax
# Done 100
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE SPACE 100)
# (DEFINE BUF (MAKE-STRING SPACE))
# (MAKE-STRING SPACE)
# SPACE
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done SPACE
movq %rax, %rcx
sarq $3, %rcx
subq $8, %rbx
subq %rcx, %rbx
andq $-8, %rbx
movq %rax, 0(%rbx)
leaq 4(%rbx), %rax
# Done (MAKE-STRING SPACE)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE BUF (MAKE-STRING SPACE))
# (DEFINE POS 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE POS 0)
# (DEFINE OUT (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN))))
# (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN)))
movq 0(%rsp), %rax
movq $.L509, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE OUT (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN))))
# (FORMOUT-LIST OUT CONTROL ARGS)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# OUT
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done OUT
movq %rax, 16(%rcx)
# CONTROL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done CONTROL
movq %rax, 24(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 32(%rcx)
# FORMOUT-LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 264(%rax), %rax
# Done FORMOUT-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMOUT-LIST OUT CONTROL ARGS)
# (SUBSTRING BUF 0 POS)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# BUF
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done BUF
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# POS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done POS
movq %rax, 32(%rcx)
# SUBSTRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 424(%rax), %rax
# Done SUBSTRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (SUBSTRING BUF 0 POS)
addq $8, %rsp
addq $8, %rsp
ret
.L518:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L519:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (FORMAT-LIST CONTROL ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# CONTROL
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done CONTROL
movq %rax, 16(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# FORMAT-LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 248(%rax), %rax
# Done FORMAT-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMAT-LIST CONTROL ARGS)
addq $8, %rsp
ret
.data
.align 8
.L521:
.quad 32
.ascii "~A~%"
.text
.L522:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
# (FORMOUT STDERR "~A~%" (FORMAT-LIST MESSAGE ARGS))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STDERR
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 448(%rax), %rax
# Done STDERR
movq %rax, 16(%rcx)
# "~A~%"
movq $.L521+4, %rax
# Done "~A~%"
movq %rax, 24(%rcx)
# (FORMAT-LIST MESSAGE ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# MESSAGE
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done MESSAGE
movq %rax, 16(%rcx)
# ARGS
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# FORMAT-LIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 248(%rax), %rax
# Done FORMAT-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMAT-LIST MESSAGE ARGS)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# FORMOUT
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 256(%rax), %rax
# Done FORMOUT
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMOUT STDERR "~A~%" (FORMAT-LIST MESSAGE ARGS))
# (ERROR-HALT MESSAGE ARGS)
# MESSAGE
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done MESSAGE
# ARGS
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done ARGS
.L524:
hlt
jmp .L524
# Done (ERROR-HALT MESSAGE ARGS)
addq $8, %rsp
ret
.data
.align 8
.L525:
.quad 232
.ascii "expected ~S arguments, got ~S"
.text
.L526:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L527
# (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "expected ~S arguments, got ~S"
movq $.L525+4, %rax
# Done "expected ~S arguments, got ~S"
movq %rax, 16(%rcx)
# (- PARAM-FRAME-LENGTH 1)
# PARAM-FRAME-LENGTH
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done PARAM-FRAME-LENGTH
# 1
movq $8, %rdx
# Done 1
subq %rdx, %rax
# Done (- PARAM-FRAME-LENGTH 1)
movq %rax, 24(%rcx)
# (- (VECTOR-LENGTH ARG-FRAME) 1)
# (VECTOR-LENGTH ARG-FRAME)
# ARG-FRAME
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG-FRAME
movq -3(%rax), %rax
# Done (VECTOR-LENGTH ARG-FRAME)
# 1
movq $8, %rdx
# Done 1
subq %rdx, %rax
# Done (- (VECTOR-LENGTH ARG-FRAME) 1)
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1))
addq $8, %rsp
ret
.L527:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L528:
.quad 296
.ascii "expected ~S arguments or more, got ~S"
.text
.L529:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L530
# (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1))))
# (>= POS (VECTOR-LENGTH ARG-FRAME))
# POS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done POS
# (VECTOR-LENGTH ARG-FRAME)
# ARG-FRAME
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 16(%rcx), %rcx
# Done ARG-FRAME
movq -3(%rcx), %rcx
# Done (VECTOR-LENGTH ARG-FRAME)
cmpq %rcx, %rax
jnge .L532
# Done conditional (>= POS (VECTOR-LENGTH ARG-FRAME))
.L531:
# NIL
movq $31, %rax
# Done NIL
jmp .L533
.L532:
# (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))
# (VECTOR-REF ARG-FRAME POS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG-FRAME
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME
movq %rax, 16(%rcx)
# POS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done POS
movq %rax, 24(%rcx)
# VECTOR-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 496(%rax), %rax
# Done VECTOR-REF
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR-REF ARG-FRAME POS)
pushq %rax
# (CONS-VARARGS (+ POS 1))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (+ POS 1)
# POS
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done POS
# 1
movq $8, %rdx
# Done 1
addq %rdx, %rax
# Done (+ POS 1)
movq %rax, 16(%rcx)
# CONS-VARARGS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done CONS-VARARGS
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (CONS-VARARGS (+ POS 1))
popq %rax
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))
.L533:
# Done (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1))))
addq $8, %rsp
ret
.L530:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L534:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L535
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME))
# (VECTOR-LENGTH ARG-FRAME)
# ARG-FRAME
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME
movq -3(%rax), %rax
# Done (VECTOR-LENGTH ARG-FRAME)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME))
# (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME))
# (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH)
# ARG-FRAME-LENGTH
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG-FRAME-LENGTH
# PARAM-FRAME-LENGTH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 24(%rcx), %rcx
# Done PARAM-FRAME-LENGTH
cmpq %rcx, %rax
jnl .L537
# Done conditional (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH)
.L536:
# (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1))))
# (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH)
# (- PARAM-FRAME-LENGTH 1)
# PARAM-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done PARAM-FRAME-LENGTH
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- PARAM-FRAME-LENGTH 1)
# ARG-FRAME-LENGTH
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 16(%rcx), %rcx
# Done ARG-FRAME-LENGTH
cmpq %rcx, %rax
je .L540
# Done conditional (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH)
.L539:
# (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))
# (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "expected ~S arguments or more, got ~S"
movq $.L528+4, %rax
# Done "expected ~S arguments or more, got ~S"
movq %rax, 16(%rcx)
# (- PARAM-FRAME-LENGTH 2)
# PARAM-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done PARAM-FRAME-LENGTH
# 2
movq $16, %rdx
# Done 2
subq %rdx, %rax
# Done (- PARAM-FRAME-LENGTH 2)
movq %rax, 24(%rcx)
# (- ARG-FRAME-LENGTH 1)
# ARG-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME-LENGTH
# 1
movq $8, %rdx
# Done 1
subq %rdx, %rax
# Done (- ARG-FRAME-LENGTH 1)
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1))
# Done (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))
jmp .L541
.L540:
movq $23, %rax
.L541:
# Done (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1))))
# (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH))
# (MAKE-VECTOR PARAM-FRAME-LENGTH)
# PARAM-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done PARAM-FRAME-LENGTH
subq $8, %rbx
subq %rax, %rbx
movq %rax, 0(%rbx)
leaq 3(%rbx), %rax
# Done (MAKE-VECTOR PARAM-FRAME-LENGTH)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH))
# (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH)
subq $56, %rbx
movq $48, 0(%rbx)
movq %rbx, %rcx
# ARG-FRAME
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME
movq %rax, 16(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 24(%rcx)
# NEW-ARG-FRAME
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEW-ARG-FRAME
movq %rax, 32(%rcx)
# 0
movq $0, %rax
# Done 0
movq %rax, 40(%rcx)
# ARG-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME-LENGTH
movq %rax, 48(%rcx)
# VECTOR-COPY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 480(%rax), %rax
# Done VECTOR-COPY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH)
# (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# NEW-ARG-FRAME
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEW-ARG-FRAME
movq %rax, 16(%rcx)
# ARG-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME-LENGTH
movq %rax, 24(%rcx)
# NIL
movq $31, %rax
# Done NIL
movq %rax, 32(%rcx)
# VECTOR-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 488(%rax), %rax
# Done VECTOR-SET!
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL)
# NEW-ARG-FRAME
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done NEW-ARG-FRAME
addq $8, %rsp
# Done (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME)
jmp .L538
.L537:
# (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME)
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1))))))
# (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))
movq 0(%rsp), %rax
movq $.L529, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1))))))
# (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1))
# (- PARAM-FRAME-LENGTH 1)
# PARAM-FRAME-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done PARAM-FRAME-LENGTH
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- PARAM-FRAME-LENGTH 1)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1))
# (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# ARG-FRAME
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME
movq %rax, 16(%rcx)
# LAST-PARAM-SLOT
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done LAST-PARAM-SLOT
movq %rax, 24(%rcx)
# (CONS-VARARGS LAST-PARAM-SLOT)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# LAST-PARAM-SLOT
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done LAST-PARAM-SLOT
movq %rax, 16(%rcx)
# CONS-VARARGS
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done CONS-VARARGS
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CONS-VARARGS LAST-PARAM-SLOT)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# VECTOR-SET!
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 488(%rax), %rax
# Done VECTOR-SET!
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT))
# ARG-FRAME
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARG-FRAME
addq $8, %rsp
# Done (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME)
.L538:
# Done (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME))
addq $8, %rsp
addq $8, %rsp
ret
.L535:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L542:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L543
# (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1))
# (NULL? (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq $31, %rcx
cmpq %rcx, %rax
jne .L545
# Done conditional (NULL? (CDR ARGS))
.L544:
# (LENGTH (CAR ARGS))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 600(%rax), %rax
# Done LENGTH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LENGTH (CAR ARGS))
jmp .L546
.L545:
# (+ (ARGS-LENGTH (CDR ARGS)) 1)
# (ARGS-LENGTH (CDR ARGS))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 16(%rcx)
# ARGS-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done ARGS-LENGTH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ARGS-LENGTH (CDR ARGS))
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ (ARGS-LENGTH (CDR ARGS)) 1)
.L546:
# Done (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1))
addq $8, %rsp
ret
.L543:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L547:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L548
# (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1))))
# (IF (NULL? L) FALSE TRUE)
.L554:
# (NULL? L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq $31, %rcx
cmpq %rcx, %rax
je .L550
# Done conditional (NULL? L)
.L553:
# FALSE
# Done conditional FALSE
.L552:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? L) FALSE TRUE)
.L549:
# (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))
# (VECTOR-SET! VEC INDEX (CAR L))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# VEC
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VEC
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# (CAR L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq -2(%rax), %rax
# Done (CAR L)
movq %rax, 32(%rcx)
# VECTOR-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 488(%rax), %rax
# Done VECTOR-SET!
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR-SET! VEC INDEX (CAR L))
# (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CDR L)
# L
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done L
movq 6(%rax), %rax
# Done (CDR L)
movq %rax, 16(%rcx)
# VEC
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VEC
movq %rax, 24(%rcx)
# (+ INDEX 1)
# INDEX
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done INDEX
# 1
movq $8, %rdx
# Done 1
addq %rdx, %rax
# Done (+ INDEX 1)
movq %rax, 32(%rcx)
# COPY-LIST-TO-VECTOR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done COPY-LIST-TO-VECTOR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1))
# Done (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))
jmp .L551
.L550:
movq $23, %rax
.L551:
# Done (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1))))
addq $8, %rsp
ret
.L548:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L555:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L556
# (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1))))
# (NULL? (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq $31, %rcx
cmpq %rcx, %rax
jne .L558
# Done conditional (NULL? (CDR ARGS))
.L557:
# (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# VEC
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VEC
movq %rax, 24(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done INDEX
movq %rax, 32(%rcx)
# COPY-LIST-TO-VECTOR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done COPY-LIST-TO-VECTOR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX)
jmp .L559
.L558:
# (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))
# (VECTOR-SET! VEC INDEX (CAR ARGS))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# VEC
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VEC
movq %rax, 16(%rcx)
# INDEX
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done INDEX
movq %rax, 24(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 32(%rcx)
# VECTOR-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 488(%rax), %rax
# Done VECTOR-SET!
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (VECTOR-SET! VEC INDEX (CAR ARGS))
# (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 16(%rcx)
# VEC
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VEC
movq %rax, 24(%rcx)
# (+ INDEX 1)
# INDEX
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done INDEX
# 1
movq $8, %rdx
# Done 1
addq %rdx, %rax
# Done (+ INDEX 1)
movq %rax, 32(%rcx)
# FILL-ARGS-VECTOR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done FILL-ARGS-VECTOR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1))
# Done (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))
.L559:
# Done (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1))))
addq $8, %rsp
ret
.L556:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L560:
pushq %rcx
# call-handler HANDLE-VARARGS
# HANDLE-VARARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 904(%rax), %rax
# Done HANDLE-VARARGS
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1))))
# (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))
movq 0(%rsp), %rax
movq $.L542, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1))))
# (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1))))))
# (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))
movq 0(%rsp), %rax
movq $.L547, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1))))))
# (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1))))))
# (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))
movq 0(%rsp), %rax
movq $.L555, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1))))))
# (SET! ARGS (CONS ARG1 ARGS))
# (CONS ARG1 ARGS)
# ARG1
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARG1
# ARGS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done ARGS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS ARG1 ARGS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 32(%rcx)
# Done (SET! ARGS (CONS ARG1 ARGS))
# (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1)))
# (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))
# (+ (ARGS-LENGTH ARGS) 1)
# (ARGS-LENGTH ARGS)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 16(%rcx)
# ARGS-LENGTH
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done ARGS-LENGTH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ARGS-LENGTH ARGS)
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ (ARGS-LENGTH ARGS) 1)
subq $8, %rbx
subq %rax, %rbx
movq %rax, 0(%rbx)
leaq 3(%rbx), %rax
# Done (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1)))
# (FILL-ARGS-VECTOR ARGS ARGS-VEC 1)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 16(%rcx)
# ARGS-VEC
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS-VEC
movq %rax, 24(%rcx)
# 1
movq $8, %rax
# Done 1
movq %rax, 32(%rcx)
# FILL-ARGS-VECTOR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done FILL-ARGS-VECTOR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FILL-ARGS-VECTOR ARGS ARGS-VEC 1)
# (APPLY-FRAME FUNC ARGS-VEC)
# FUNC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FUNC
# ARGS-VEC
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done ARGS-VEC
subq $3, %rcx
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY-FRAME FUNC ARGS-VEC)
addq $8, %rsp
addq $8, %rsp
ret
.text
.L562:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L563
# (BEGIN (DEFINE BUF (CONS NIL NIL)) (CONS BUF BUF))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE BUF (CONS NIL NIL))
# (CONS NIL NIL)
# NIL
movq $31, %rax
# Done NIL
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS NIL NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE BUF (CONS NIL NIL))
# (CONS BUF BUF)
# BUF
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUF
# BUF
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done BUF
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS BUF BUF)
addq $8, %rsp
# Done (BEGIN (DEFINE BUF (CONS NIL NIL)) (CONS BUF BUF))
addq $8, %rsp
ret
.L563:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L564:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L565
# (BEGIN (DEFINE NEWTAIL (CONS EL NIL)) (RPLACD (CDR BUF) NEWTAIL) (RPLACD BUF NEWTAIL))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE NEWTAIL (CONS EL NIL))
# (CONS EL NIL)
# EL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done EL
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS EL NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE NEWTAIL (CONS EL NIL))
# (RPLACD (CDR BUF) NEWTAIL)
# (CDR BUF)
# BUF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done BUF
movq 6(%rax), %rax
# Done (CDR BUF)
# NEWTAIL
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done NEWTAIL
movq %rcx, 6(%rax)
# Done (RPLACD (CDR BUF) NEWTAIL)
# (RPLACD BUF NEWTAIL)
# BUF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done BUF
# NEWTAIL
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done NEWTAIL
movq %rcx, 6(%rax)
# Done (RPLACD BUF NEWTAIL)
addq $8, %rsp
# Done (BEGIN (DEFINE NEWTAIL (CONS EL NIL)) (RPLACD (CDR BUF) NEWTAIL) (RPLACD BUF NEWTAIL))
addq $8, %rsp
ret
.L565:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L566:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L567
# (RPLACD (CDR BUF1) (CDR (CAR BUF2)))
# (CDR BUF1)
# BUF1
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUF1
movq 6(%rax), %rax
# Done (CDR BUF1)
# (CDR (CAR BUF2))
# (CAR BUF2)
# BUF2
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done BUF2
movq -2(%rcx), %rcx
# Done (CAR BUF2)
movq 6(%rcx), %rcx
# Done (CDR (CAR BUF2))
movq %rcx, 6(%rax)
# Done (RPLACD (CDR BUF1) (CDR (CAR BUF2)))
# (RPLACD BUF1 (CDR BUF2))
# BUF1
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUF1
# (CDR BUF2)
# BUF2
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done BUF2
movq 6(%rcx), %rcx
# Done (CDR BUF2)
movq %rcx, 6(%rax)
# Done (RPLACD BUF1 (CDR BUF2))
addq $8, %rsp
ret
.L567:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L568:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L569
# (CDR (CAR BUF))
# (CAR BUF)
# BUF
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUF
movq -2(%rax), %rax
# Done (CAR BUF)
movq 6(%rax), %rax
# Done (CDR (CAR BUF))
addq $8, %rsp
ret
.L569:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L570:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L571
# (IF (NULL? LALIST) FALSE (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST)))))
# (NULL? LALIST)
# LALIST
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done LALIST
movq $31, %rcx
cmpq %rcx, %rax
jne .L573
# Done conditional (NULL? LALIST)
.L572:
# FALSE
movq $7, %rax
# Done FALSE
jmp .L574
.L573:
# (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST)))
# (ASSOC ITEM (CAR LALIST))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ITEM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ITEM
movq %rax, 16(%rcx)
# (CAR LALIST)
# LALIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done LALIST
movq -2(%rax), %rax
# Done (CAR LALIST)
movq %rax, 24(%rcx)
# ASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 440(%rax), %rax
# Done ASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSOC ITEM (CAR LALIST))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST)))
# (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST)))
# #:G1567
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L576
# Done conditional #:G1567
.L575:
# #:G1567
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1567
jmp .L577
.L576:
# (LASSOC ITEM (CDR LALIST))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ITEM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ITEM
movq %rax, 16(%rcx)
# (CDR LALIST)
# LALIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done LALIST
movq 6(%rax), %rax
# Done (CDR LALIST)
movq %rax, 24(%rcx)
# LASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 184(%rax), %rax
# Done LASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LASSOC ITEM (CDR LALIST))
.L577:
# Done (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST)))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST))))
.L574:
# Done (IF (NULL? LALIST) FALSE (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST)))))
addq $8, %rsp
ret
.L571:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L578:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L579
# (RPLACA LALIST (CONS (CONS KEY VAL) (CAR LALIST)))
# LALIST
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done LALIST
# (CONS (CONS KEY VAL) (CAR LALIST))
# (CONS KEY VAL)
# KEY
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done KEY
# VAL
movq 0(%rsp), %rdx
movq 24(%rdx), %rdx
# Done VAL
movq %rcx, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS KEY VAL)
# (CAR LALIST)
# LALIST
movq 0(%rsp), %rdx
movq 32(%rdx), %rdx
# Done LALIST
movq -2(%rdx), %rdx
# Done (CAR LALIST)
movq %rcx, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS (CONS KEY VAL) (CAR LALIST))
movq %rcx, -2(%rax)
# Done (RPLACA LALIST (CONS (CONS KEY VAL) (CAR LALIST)))
addq $8, %rsp
ret
.L579:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L580:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L581
# (LIST NIL)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# NIL
movq $31, %rax
# Done NIL
movq %rax, 16(%rcx)
# LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST NIL)
addq $8, %rsp
ret
.L581:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L582:
.quad 152
.ascii "unbound variable ~S"
.text
.L583:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L584
# (IF (PAIR? FORM) (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))) (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN))))
# (PAIR? FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
andb $7, %al
cmpb $2, %al
jne .L586
# Done conditional (PAIR? FORM)
.L585:
# (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV))))
# (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))
subq $40, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# (DEFINE KEYWORD (CAR FORM))
# (CAR FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq -2(%rax), %rax
# Done (CAR FORM)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE KEYWORD (CAR FORM))
# (DEFINE ARGS (CDR FORM))
# (CDR FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE ARGS (CDR FORM))
# (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE))
# (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)
# (SYMBOL? KEYWORD)
# KEYWORD
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done KEYWORD
cmpq $2055, %rax
jl .L591
andq $7, %rax
cmpq $7, %rax
.L591:
jne .L589
# Done conditional (SYMBOL? KEYWORD)
.L588:
# (ASSOC KEYWORD BUILTIN-FORMS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# BUILTIN-FORMS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done BUILTIN-FORMS
movq %rax, 24(%rcx)
# ASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 440(%rax), %rax
# Done ASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSOC KEYWORD BUILTIN-FORMS)
jmp .L590
.L589:
# FALSE
movq $7, %rax
# Done FALSE
.L590:
# Done (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE))
# (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV))
# BUILTIN
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L593
# Done conditional BUILTIN
.L592:
# ((CDR BUILTIN) KEYWORD ARGS ENV)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 32(%rcx)
# (CDR BUILTIN)
# BUILTIN
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done BUILTIN
movq 6(%rax), %rax
# Done (CDR BUILTIN)
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done ((CDR BUILTIN) KEYWORD ARGS ENV)
jmp .L594
.L593:
# (EVAL-CALL FORM ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-CALL
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 104(%rax), %rax
# Done EVAL-CALL
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-CALL FORM ENV)
.L594:
# Done (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV))
addq $8, %rsp
# Done (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))
# Done (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV))))
jmp .L587
.L586:
# (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN)))
# (SYMBOL? FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
cmpq $2055, %rax
jl .L598
andq $7, %rax
cmpq $7, %rax
.L598:
jne .L596
# Done conditional (SYMBOL? FORM)
.L595:
# (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM))))
# (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE VAR (LASSOC FORM ENV))
# (LASSOC FORM ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# LASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 184(%rax), %rax
# Done LASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LASSOC FORM ENV)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE VAR (LASSOC FORM ENV))
# (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM))
# VAR
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L600
# Done conditional VAR
.L599:
# (CDR VAR)
# VAR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VAR
movq 6(%rax), %rax
# Done (CDR VAR)
jmp .L601
.L600:
# (ERROR "unbound variable ~S" FORM)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "unbound variable ~S"
movq $.L582+4, %rax
# Done "unbound variable ~S"
movq %rax, 16(%rcx)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "unbound variable ~S" FORM)
.L601:
# Done (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM))
addq $8, %rsp
# Done (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))
# Done (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM))))
jmp .L597
.L596:
# (IF TRUE (BEGIN FORM) (BEGIN))
# TRUE
# Done conditional TRUE
.L602:
# (BEGIN FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
# Done (BEGIN FORM)
jmp .L604
.L603:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L604:
# Done (IF TRUE (BEGIN FORM) (BEGIN))
.L597:
# Done (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN)))
.L587:
# Done (IF (PAIR? FORM) (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))) (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN))))
addq $8, %rsp
ret
.L584:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L605:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L606
# (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-FORMS)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 168(%rax), %rax
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, 32(%rcx)
# EVAL-FORM-AUX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 144(%rax), %rax
# Done EVAL-FORM-AUX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-FORMS)
addq $8, %rsp
ret
.L606:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L607:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L608
# (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-BODY-FORMS)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 160(%rax), %rax
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, 32(%rcx)
# EVAL-FORM-AUX
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 144(%rax), %rax
# Done EVAL-FORM-AUX
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-BODY-FORMS)
addq $8, %rsp
ret
.L608:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L609:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L610
# (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571)))
# (IF (NULL? #:G1570) FALSE TRUE)
.L616:
# (NULL? #:G1570)
# #:G1570
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1570
movq $31, %rcx
cmpq %rcx, %rax
je .L612
# Done conditional (NULL? #:G1570)
.L615:
# FALSE
# Done conditional FALSE
.L614:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1570) FALSE TRUE)
.L611:
# (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))
# (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE FORM (CAR #:G1570))
# (CAR #:G1570)
# #:G1570
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1570
movq -2(%rax), %rax
# Done (CAR #:G1570)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE FORM (CAR #:G1570))
# (SET! RESULT (EVAL-BODY-FORM FORM ENV))
# (EVAL-BODY-FORM FORM ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-BODY-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 128(%rax), %rax
# Done EVAL-BODY-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-BODY-FORM FORM ENV)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 16(%rcx)
# Done (SET! RESULT (EVAL-BODY-FORM FORM ENV))
addq $8, %rsp
# Done (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV)))
# (SET! #:G1570 (CDR #:G1570))
# (CDR #:G1570)
# #:G1570
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1570
movq 6(%rax), %rax
# Done (CDR #:G1570)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 16(%rcx)
# Done (SET! #:G1570 (CDR #:G1570))
# (#:G1571)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1571
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1571
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1571)
# Done (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))
jmp .L613
.L612:
movq $23, %rax
.L613:
# Done (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571)))
addq $8, %rsp
ret
.L610:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L617:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L618
# (BEGIN (DEFINE RESULT UNSPECIFIED) (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))) RESULT)
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE RESULT UNSPECIFIED)
# UNSPECIFIED
movq $23, %rax
# Done UNSPECIFIED
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE RESULT UNSPECIFIED)
# (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1570 FORMS)
# FORMS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORMS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1570 FORMS)
# (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571)))))
# (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))
movq 0(%rsp), %rax
movq $.L609, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571)))))
# (#:G1571)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G1571
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1571
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1571)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571)))
# RESULT
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done RESULT
addq $8, %rsp
# Done (BEGIN (DEFINE RESULT UNSPECIFIED) (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))) RESULT)
addq $8, %rsp
ret
.L618:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L619:
.quad 160
.ascii "surplus arguments ~S"
.data
.align 8
.L620:
.quad 176
.ascii "insufficient arguments"
.text
.L621:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L622
# (IF (NULL? FORMALS) (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))) (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN))))
# (NULL? FORMALS)
# FORMALS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORMALS
movq $31, %rcx
cmpq %rcx, %rax
jne .L624
# Done conditional (NULL? FORMALS)
.L623:
# (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS)))
# (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))
# (NULL? ACTUALS)
# ACTUALS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ACTUALS
movq $31, %rcx
cmpq %rcx, %rax
jne .L627
# Done conditional (NULL? ACTUALS)
.L626:
# NIL
movq $31, %rax
# Done NIL
jmp .L628
.L627:
# (ERROR "surplus arguments ~S" ACTUALS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "surplus arguments ~S"
movq $.L619+4, %rax
# Done "surplus arguments ~S"
movq %rax, 16(%rcx)
# ACTUALS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ACTUALS
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "surplus arguments ~S" ACTUALS)
.L628:
# Done (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))
# Done (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS)))
jmp .L625
.L624:
# (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN)))
# (SYMBOL? FORMALS)
# FORMALS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORMALS
cmpq $2055, %rax
jl .L632
andq $7, %rax
cmpq $7, %rax
.L632:
jne .L630
# Done conditional (SYMBOL? FORMALS)
.L629:
# (BEGIN (ACONS FORMALS ACTUALS NIL))
# (ACONS FORMALS ACTUALS NIL)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# FORMALS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORMALS
movq %rax, 16(%rcx)
# ACTUALS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ACTUALS
movq %rax, 24(%rcx)
# NIL
movq $31, %rax
# Done NIL
movq %rax, 32(%rcx)
# ACONS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 432(%rax), %rax
# Done ACONS
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ACONS FORMALS ACTUALS NIL)
# Done (BEGIN (ACONS FORMALS ACTUALS NIL))
jmp .L631
.L630:
# (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN))
# TRUE
# Done conditional TRUE
.L633:
# (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS)))))
# (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))
# (NULL? ACTUALS)
# ACTUALS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ACTUALS
movq $31, %rcx
cmpq %rcx, %rax
jne .L637
# Done conditional (NULL? ACTUALS)
.L636:
# (ERROR "insufficient arguments")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# "insufficient arguments"
movq $.L620+4, %rax
# Done "insufficient arguments"
movq %rax, 16(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "insufficient arguments")
jmp .L638
.L637:
# (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS)))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CAR FORMALS)
# FORMALS
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done FORMALS
movq -2(%rax), %rax
# Done (CAR FORMALS)
movq %rax, 16(%rcx)
# (CAR ACTUALS)
# ACTUALS
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done ACTUALS
movq -2(%rax), %rax
# Done (CAR ACTUALS)
movq %rax, 24(%rcx)
# (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR FORMALS)
# FORMALS
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done FORMALS
movq 6(%rax), %rax
# Done (CDR FORMALS)
movq %rax, 16(%rcx)
# (CDR ACTUALS)
# ACTUALS
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done ACTUALS
movq 6(%rax), %rax
# Done (CDR ACTUALS)
movq %rax, 24(%rcx)
# MAKE-LAMBDA-ALIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 112(%rax), %rax
# Done MAKE-LAMBDA-ALIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# ACONS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 432(%rax), %rax
# Done ACONS
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS)))
.L638:
# Done (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))
# Done (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS)))))
jmp .L635
.L634:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L635:
# Done (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN))
.L631:
# Done (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN)))
.L625:
# Done (IF (NULL? FORMALS) (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))) (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN))))
addq $8, %rsp
ret
.L622:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L640:
.quad 48
.ascii "lambda"
.data
.align 8
.L639:
.quad .L640+4
.text
.L641:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L642
# (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR ARGS)
# ARGS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 16(%rcx)
# (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)
# (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# ACTUALS
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done ACTUALS
movq %rax, 24(%rcx)
# MAKE-LAMBDA-ALIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 112(%rax), %rax
# Done MAKE-LAMBDA-ALIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS)
# ENV
movq 8(%rsp), %rcx
movq 8(%rcx), %rcx
movq 32(%rcx), %rcx
# Done ENV
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# EVAL-BODY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 120(%rax), %rax
# Done EVAL-BODY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV))
addq $8, %rsp
ret
.L642:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L643:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L644
# (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)))
movq 0(%rsp), %rax
movq $.L641, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)))
addq $8, %rsp
ret
.L644:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L645:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L646
# (EVAL-FORM SUBFORM ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# SUBFORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SUBFORM
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM SUBFORM ENV)
addq $8, %rsp
ret
.L646:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L647:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L648
# (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579))))
# (IF (NULL? #:G1579) FALSE TRUE)
.L654:
# (NULL? #:G1579)
# #:G1579
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1579
movq $31, %rcx
cmpq %rcx, %rax
je .L650
# Done conditional (NULL? #:G1579)
.L653:
# FALSE
# Done conditional FALSE
.L652:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1579) FALSE TRUE)
.L649:
# (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL))
# (CONS (#:G1577 (CAR #:G1579)) NIL)
# (#:G1577 (CAR #:G1579))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1579)
# #:G1579
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1579
movq -2(%rax), %rax
# Done (CAR #:G1579)
movq %rax, 16(%rcx)
# #:G1577
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1577
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1577 (CAR #:G1579))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1577 (CAR #:G1579)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL))
# (RPLACD #:G1581 #:G1580)
# #:G1581
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1581
# #:G1580
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1580
movq %rcx, 6(%rax)
# Done (RPLACD #:G1581 #:G1580)
# (SET! #:G1581 #:G1580)
# #:G1580
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1580
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1581 #:G1580)
# (#:G1578 (CDR #:G1579))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1579)
# #:G1579
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1579
movq 6(%rax), %rax
# Done (CDR #:G1579)
movq %rax, 16(%rcx)
# #:G1578
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1578
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1578 (CDR #:G1579))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))
jmp .L651
.L650:
movq $23, %rax
.L651:
# Done (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579))))
addq $8, %rsp
ret
.L648:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L655:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L656
# (BEGIN (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))) ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580))))
# (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1579 FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1579 FORM)
# (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580))
# (NULL? #:G1579)
# #:G1579
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1579
movq $31, %rcx
cmpq %rcx, %rax
jne .L658
# Done conditional (NULL? #:G1579)
.L657:
# NIL
movq $31, %rax
# Done NIL
jmp .L659
.L658:
# (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV)))
# (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))
movq 0(%rsp), %rax
movq $.L645, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV)))
# (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL))
# (CONS (#:G1577 (CAR #:G1579)) NIL)
# (#:G1577 (CAR #:G1579))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1579)
# #:G1579
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1579
movq -2(%rax), %rax
# Done (CAR #:G1579)
movq %rax, 16(%rcx)
# #:G1577
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1577
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1577 (CAR #:G1579))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1577 (CAR #:G1579)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL))
# (DEFINE #:G1581 #:G1580)
# #:G1580
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1580
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1581 #:G1580)
# (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579))))))
# (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))
movq 0(%rsp), %rax
movq $.L647, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579))))))
# (#:G1578 (CDR #:G1579))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1579)
# #:G1579
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1579
movq 6(%rax), %rax
# Done (CDR #:G1579)
movq %rax, 16(%rcx)
# #:G1578
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1578
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1578 (CDR #:G1579))
# #:G1580
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1580
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)
.L659:
# Done (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580))))
# ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR EVALED-SUBFORMS)
# EVALED-SUBFORMS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-SUBFORMS
movq 6(%rax), %rax
# Done (CDR EVALED-SUBFORMS)
movq %rax, 16(%rcx)
# (CAR EVALED-SUBFORMS)
# EVALED-SUBFORMS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-SUBFORMS
movq -2(%rax), %rax
# Done (CAR EVALED-SUBFORMS)
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))) ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS)))
addq $8, %rsp
ret
.L656:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L661:
.quad 40
.ascii "begin"
.data
.align 8
.L660:
.quad .L661+4
.text
.L662:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L663
# (EVAL-BODY ARGS (CONS NIL ENV))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 16(%rcx)
# (CONS NIL ENV)
# NIL
movq $31, %rax
# Done NIL
# ENV
movq 0(%rsp), %rdx
movq 32(%rdx), %rdx
# Done ENV
movq %rax, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS NIL ENV)
movq %rax, 24(%rcx)
# EVAL-BODY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 120(%rax), %rax
# Done EVAL-BODY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-BODY ARGS (CONS NIL ENV))
addq $8, %rsp
ret
.L663:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L665:
.quad 88
.ascii "definitions"
.data
.align 8
.L664:
.quad .L665+4
.text
.L666:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L667
# (EVAL-BODY ARGS ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-BODY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 120(%rax), %rax
# Done EVAL-BODY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-BODY ARGS ENV)
addq $8, %rsp
ret
.L667:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L669:
.quad 48
.ascii "define"
.data
.align 8
.L668:
.quad .L669+4
.data
.align 8
.L670:
.quad 160
.ascii "bad variable name ~S"
.data
.align 8
.L671:
.quad 200
.ascii "variable ~S already bound"
.text
.L672:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L673
# (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL)
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE VAR (CAR ARGS))
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE VAR (CAR ARGS))
# (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV)))
# (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))
# (NULL? (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq $31, %rcx
cmpq %rcx, %rax
jne .L675
# Done conditional (NULL? (CDR ARGS))
.L674:
# UNSPECIFIED
movq $23, %rax
# Done UNSPECIFIED
jmp .L676
.L675:
# (EVAL-FORM (CAR (CDR ARGS)) ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq -2(%rax), %rax
# Done (CAR (CDR ARGS))
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM (CAR (CDR ARGS)) ENV)
.L676:
# Done (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV)))
# (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR)))
# (IF (SYMBOL? VAR) FALSE TRUE)
.L682:
# (SYMBOL? VAR)
# VAR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VAR
cmpq $2055, %rax
jl .L683
andq $7, %rax
cmpq $7, %rax
.L683:
je .L678
# Done conditional (SYMBOL? VAR)
.L681:
# FALSE
# Done conditional FALSE
.L680:
# TRUE
# Done conditional TRUE
# Done conditional (IF (SYMBOL? VAR) FALSE TRUE)
.L677:
# (BEGIN (ERROR "bad variable name ~S" VAR))
# (ERROR "bad variable name ~S" VAR)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "bad variable name ~S"
movq $.L670+4, %rax
# Done "bad variable name ~S"
movq %rax, 16(%rcx)
# VAR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VAR
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "bad variable name ~S" VAR)
# Done (BEGIN (ERROR "bad variable name ~S" VAR))
jmp .L679
.L678:
movq $23, %rax
.L679:
# Done (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR)))
# (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR)))
# (ASSOC VAR (CAR ENV))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VAR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VAR
movq %rax, 16(%rcx)
# (CAR ENV)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq -2(%rax), %rax
# Done (CAR ENV)
movq %rax, 24(%rcx)
# ASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 440(%rax), %rax
# Done ASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L685
# Done conditional (ASSOC VAR (CAR ENV))
.L684:
# (BEGIN (ERROR "variable ~S already bound" VAR))
# (ERROR "variable ~S already bound" VAR)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "variable ~S already bound"
movq $.L671+4, %rax
# Done "variable ~S already bound"
movq %rax, 16(%rcx)
# VAR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VAR
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "variable ~S already bound" VAR)
# Done (BEGIN (ERROR "variable ~S already bound" VAR))
jmp .L686
.L685:
movq $23, %rax
.L686:
# Done (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR)))
# (LAPUSH VAR VAL ENV)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# VAR
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VAR
movq %rax, 16(%rcx)
# VAL
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VAL
movq %rax, 24(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 32(%rcx)
# LAPUSH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 176(%rax), %rax
# Done LAPUSH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LAPUSH VAR VAL ENV)
# VAL
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VAL
addq $8, %rsp
# Done (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL)
addq $8, %rsp
ret
.L673:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L688:
.quad 32
.ascii "set!"
.data
.align 8
.L687:
.quad .L688+4
.data
.align 8
.L689:
.quad 152
.ascii "unbound variable ~S"
.text
.L690:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L691
# (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL)
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV))
# (EVAL-FORM (CAR (CDR ARGS)) ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq -2(%rax), %rax
# Done (CAR (CDR ARGS))
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM (CAR (CDR ARGS)) ENV)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV))
# (DEFINE VAR (LASSOC (CAR ARGS) ENV))
# (LASSOC (CAR ARGS) ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# LASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 184(%rax), %rax
# Done LASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LASSOC (CAR ARGS) ENV)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE VAR (LASSOC (CAR ARGS) ENV))
# (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS)))
# VAR
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L693
# Done conditional VAR
.L692:
# (RPLACD VAR VAL)
# VAR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done VAR
# VAL
movq 0(%rsp), %rcx
movq 24(%rcx), %rcx
# Done VAL
movq %rcx, 6(%rax)
# Done (RPLACD VAR VAL)
jmp .L694
.L693:
# (ERROR "unbound variable ~S" (CAR ARGS))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "unbound variable ~S"
movq $.L689+4, %rax
# Done "unbound variable ~S"
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "unbound variable ~S" (CAR ARGS))
.L694:
# Done (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS)))
# VAL
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done VAL
addq $8, %rsp
# Done (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL)
addq $8, %rsp
ret
.L691:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L696:
.quad 16
.ascii "if"
.data
.align 8
.L695:
.quad .L696+4
.text
.L697:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L698
# (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)))
# (EVAL-FORM (CAR ARGS) ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L700
# Done conditional (EVAL-FORM (CAR ARGS) ENV)
.L699:
# (EVAL-FORM (CAR (CDR ARGS)) ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq -2(%rax), %rax
# Done (CAR (CDR ARGS))
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM (CAR (CDR ARGS)) ENV)
jmp .L701
.L700:
# (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV))
# (NULL? (CDR (CDR ARGS)))
# (CDR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 6(%rax), %rax
# Done (CDR (CDR ARGS))
movq $31, %rcx
cmpq %rcx, %rax
jne .L703
# Done conditional (NULL? (CDR (CDR ARGS)))
.L702:
# (QUOTE UNSPECIFIED)
movq $23, %rax
# Done (QUOTE UNSPECIFIED)
jmp .L704
.L703:
# (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR (CDR ARGS)))
# (CDR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq 6(%rax), %rax
# Done (CDR (CDR ARGS))
movq -2(%rax), %rax
# Done (CAR (CDR (CDR ARGS)))
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)
.L704:
# Done (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV))
.L701:
# Done (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)))
addq $8, %rsp
ret
.L698:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L705:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L706
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
addq $8, %rsp
ret
.L706:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L708:
.quad 80
.ascii "error-halt"
.data
.align 8
.L707:
.quad .L708+4
.text
.L709:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L710
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L710:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L711:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L712
# (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589))))
# (IF (NULL? #:G1589) FALSE TRUE)
.L718:
# (NULL? #:G1589)
# #:G1589
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1589
movq $31, %rcx
cmpq %rcx, %rax
je .L714
# Done conditional (NULL? #:G1589)
.L717:
# FALSE
# Done conditional FALSE
.L716:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1589) FALSE TRUE)
.L713:
# (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL))
# (CONS (#:G1587 (CAR #:G1589)) NIL)
# (#:G1587 (CAR #:G1589))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1589)
# #:G1589
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1589
movq -2(%rax), %rax
# Done (CAR #:G1589)
movq %rax, 16(%rcx)
# #:G1587
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1587
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1587 (CAR #:G1589))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1587 (CAR #:G1589)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL))
# (RPLACD #:G1591 #:G1590)
# #:G1591
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1591
# #:G1590
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1590
movq %rcx, 6(%rax)
# Done (RPLACD #:G1591 #:G1590)
# (SET! #:G1591 #:G1590)
# #:G1590
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1590
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1591 #:G1590)
# (#:G1588 (CDR #:G1589))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1589)
# #:G1589
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1589
movq 6(%rax), %rax
# Done (CDR #:G1589)
movq %rax, 16(%rcx)
# #:G1588
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1588
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1588 (CDR #:G1589))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))
jmp .L715
.L714:
movq $23, %rax
.L715:
# Done (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589))))
addq $8, %rsp
ret
.L712:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L719:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L720
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590))))
# (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1589 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1589 ARGS)
# (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590))
# (NULL? #:G1589)
# #:G1589
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1589
movq $31, %rcx
cmpq %rcx, %rax
jne .L722
# Done conditional (NULL? #:G1589)
.L721:
# NIL
movq $31, %rax
# Done NIL
jmp .L723
.L722:
# (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L709, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL))
# (CONS (#:G1587 (CAR #:G1589)) NIL)
# (#:G1587 (CAR #:G1589))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1589)
# #:G1589
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1589
movq -2(%rax), %rax
# Done (CAR #:G1589)
movq %rax, 16(%rcx)
# #:G1587
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1587
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1587 (CAR #:G1589))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1587 (CAR #:G1589)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL))
# (DEFINE #:G1591 #:G1590)
# #:G1590
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1590
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1591 #:G1590)
# (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589))))))
# (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))
movq 0(%rsp), %rax
movq $.L711, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589))))))
# (#:G1588 (CDR #:G1589))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1589)
# #:G1589
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1589
movq 6(%rax), %rax
# Done (CDR #:G1589)
movq %rax, 16(%rcx)
# #:G1588
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1588
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1588 (CDR #:G1589))
# #:G1590
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1590
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)
.L723:
# Done (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590))))
# (APPLY ERROR-HALT EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ERROR-HALT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 848(%rax), %rax
# Done ERROR-HALT
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY ERROR-HALT EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS))
addq $8, %rsp
ret
.L720:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L725:
.quad 24
.ascii "eq?"
.data
.align 8
.L724:
.quad .L725+4
.text
.L726:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L727
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L727:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L728:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L729
# (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599))))
# (IF (NULL? #:G1599) FALSE TRUE)
.L735:
# (NULL? #:G1599)
# #:G1599
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1599
movq $31, %rcx
cmpq %rcx, %rax
je .L731
# Done conditional (NULL? #:G1599)
.L734:
# FALSE
# Done conditional FALSE
.L733:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1599) FALSE TRUE)
.L730:
# (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL))
# (CONS (#:G1597 (CAR #:G1599)) NIL)
# (#:G1597 (CAR #:G1599))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1599)
# #:G1599
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1599
movq -2(%rax), %rax
# Done (CAR #:G1599)
movq %rax, 16(%rcx)
# #:G1597
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1597
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1597 (CAR #:G1599))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1597 (CAR #:G1599)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL))
# (RPLACD #:G1601 #:G1600)
# #:G1601
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1601
# #:G1600
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1600
movq %rcx, 6(%rax)
# Done (RPLACD #:G1601 #:G1600)
# (SET! #:G1601 #:G1600)
# #:G1600
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1600
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1601 #:G1600)
# (#:G1598 (CDR #:G1599))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1599)
# #:G1599
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1599
movq 6(%rax), %rax
# Done (CDR #:G1599)
movq %rax, 16(%rcx)
# #:G1598
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1598
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1598 (CDR #:G1599))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))
jmp .L732
.L731:
movq $23, %rax
.L732:
# Done (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599))))
addq $8, %rsp
ret
.L729:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L736:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L737
# (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# EQ?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 840(%rax), %rax
# Done EQ?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1599 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1599 ARGS)
# (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600))
# (NULL? #:G1599)
# #:G1599
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1599
movq $31, %rcx
cmpq %rcx, %rax
jne .L742
# Done conditional (NULL? #:G1599)
.L741:
# NIL
movq $31, %rax
# Done NIL
jmp .L743
.L742:
# (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L726, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL))
# (CONS (#:G1597 (CAR #:G1599)) NIL)
# (#:G1597 (CAR #:G1599))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1599)
# #:G1599
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1599
movq -2(%rax), %rax
# Done (CAR #:G1599)
movq %rax, 16(%rcx)
# #:G1597
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1597
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1597 (CAR #:G1599))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1597 (CAR #:G1599)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL))
# (DEFINE #:G1601 #:G1600)
# #:G1600
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1600
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1601 #:G1600)
# (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599))))))
# (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))
movq 0(%rsp), %rax
movq $.L728, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599))))))
# (#:G1598 (CDR #:G1599))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1599)
# #:G1599
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1599
movq 6(%rax), %rax
# Done (CDR #:G1599)
movq %rax, 16(%rcx)
# #:G1598
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1598
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1598 (CDR #:G1599))
# #:G1600
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1600
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)
.L743:
# Done (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L739
# Done conditional (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600))))
.L738:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L740
.L739:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L740:
# Done (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L737:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L745:
.quad 72
.ascii "function?"
.data
.align 8
.L744:
.quad .L745+4
.text
.L746:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L747
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L747:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L748:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L749
# (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609))))
# (IF (NULL? #:G1609) FALSE TRUE)
.L755:
# (NULL? #:G1609)
# #:G1609
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1609
movq $31, %rcx
cmpq %rcx, %rax
je .L751
# Done conditional (NULL? #:G1609)
.L754:
# FALSE
# Done conditional FALSE
.L753:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1609) FALSE TRUE)
.L750:
# (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL))
# (CONS (#:G1607 (CAR #:G1609)) NIL)
# (#:G1607 (CAR #:G1609))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1609)
# #:G1609
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1609
movq -2(%rax), %rax
# Done (CAR #:G1609)
movq %rax, 16(%rcx)
# #:G1607
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1607
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1607 (CAR #:G1609))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1607 (CAR #:G1609)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL))
# (RPLACD #:G1611 #:G1610)
# #:G1611
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1611
# #:G1610
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1610
movq %rcx, 6(%rax)
# Done (RPLACD #:G1611 #:G1610)
# (SET! #:G1611 #:G1610)
# #:G1610
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1610
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1611 #:G1610)
# (#:G1608 (CDR #:G1609))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1609)
# #:G1609
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1609
movq 6(%rax), %rax
# Done (CDR #:G1609)
movq %rax, 16(%rcx)
# #:G1608
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1608
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1608 (CDR #:G1609))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))
jmp .L752
.L751:
movq $23, %rax
.L752:
# Done (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609))))
addq $8, %rsp
ret
.L749:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L756:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L757
# (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FUNCTION?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 832(%rax), %rax
# Done FUNCTION?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1609 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1609 ARGS)
# (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610))
# (NULL? #:G1609)
# #:G1609
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1609
movq $31, %rcx
cmpq %rcx, %rax
jne .L762
# Done conditional (NULL? #:G1609)
.L761:
# NIL
movq $31, %rax
# Done NIL
jmp .L763
.L762:
# (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L746, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL))
# (CONS (#:G1607 (CAR #:G1609)) NIL)
# (#:G1607 (CAR #:G1609))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1609)
# #:G1609
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1609
movq -2(%rax), %rax
# Done (CAR #:G1609)
movq %rax, 16(%rcx)
# #:G1607
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1607
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1607 (CAR #:G1609))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1607 (CAR #:G1609)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL))
# (DEFINE #:G1611 #:G1610)
# #:G1610
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1610
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1611 #:G1610)
# (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609))))))
# (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))
movq 0(%rsp), %rax
movq $.L748, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609))))))
# (#:G1608 (CDR #:G1609))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1609)
# #:G1609
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1609
movq 6(%rax), %rax
# Done (CDR #:G1609)
movq %rax, 16(%rcx)
# #:G1608
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1608
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1608 (CDR #:G1609))
# #:G1610
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1610
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)
.L763:
# Done (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L759
# Done conditional (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610))))
.L758:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L760
.L759:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L760:
# Done (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L757:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L765:
.quad 56
.ascii "symbol?"
.data
.align 8
.L764:
.quad .L765+4
.text
.L766:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L767
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L767:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L768:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L769
# (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619))))
# (IF (NULL? #:G1619) FALSE TRUE)
.L775:
# (NULL? #:G1619)
# #:G1619
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1619
movq $31, %rcx
cmpq %rcx, %rax
je .L771
# Done conditional (NULL? #:G1619)
.L774:
# FALSE
# Done conditional FALSE
.L773:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1619) FALSE TRUE)
.L770:
# (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL))
# (CONS (#:G1617 (CAR #:G1619)) NIL)
# (#:G1617 (CAR #:G1619))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1619)
# #:G1619
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1619
movq -2(%rax), %rax
# Done (CAR #:G1619)
movq %rax, 16(%rcx)
# #:G1617
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1617
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1617 (CAR #:G1619))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1617 (CAR #:G1619)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL))
# (RPLACD #:G1621 #:G1620)
# #:G1621
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1621
# #:G1620
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1620
movq %rcx, 6(%rax)
# Done (RPLACD #:G1621 #:G1620)
# (SET! #:G1621 #:G1620)
# #:G1620
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1620
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1621 #:G1620)
# (#:G1618 (CDR #:G1619))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1619)
# #:G1619
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1619
movq 6(%rax), %rax
# Done (CDR #:G1619)
movq %rax, 16(%rcx)
# #:G1618
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1618
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1618 (CDR #:G1619))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))
jmp .L772
.L771:
movq $23, %rax
.L772:
# Done (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619))))
addq $8, %rsp
ret
.L769:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L776:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L777
# (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# SYMBOL?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 824(%rax), %rax
# Done SYMBOL?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1619 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1619 ARGS)
# (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620))
# (NULL? #:G1619)
# #:G1619
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1619
movq $31, %rcx
cmpq %rcx, %rax
jne .L782
# Done conditional (NULL? #:G1619)
.L781:
# NIL
movq $31, %rax
# Done NIL
jmp .L783
.L782:
# (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L766, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL))
# (CONS (#:G1617 (CAR #:G1619)) NIL)
# (#:G1617 (CAR #:G1619))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1619)
# #:G1619
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1619
movq -2(%rax), %rax
# Done (CAR #:G1619)
movq %rax, 16(%rcx)
# #:G1617
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1617
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1617 (CAR #:G1619))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1617 (CAR #:G1619)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL))
# (DEFINE #:G1621 #:G1620)
# #:G1620
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1620
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1621 #:G1620)
# (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619))))))
# (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))
movq 0(%rsp), %rax
movq $.L768, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619))))))
# (#:G1618 (CDR #:G1619))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1619)
# #:G1619
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1619
movq 6(%rax), %rax
# Done (CDR #:G1619)
movq %rax, 16(%rcx)
# #:G1618
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1618
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1618 (CDR #:G1619))
# #:G1620
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1620
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)
.L783:
# Done (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L779
# Done conditional (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620))))
.L778:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L780
.L779:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L780:
# Done (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L777:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L785:
.quad 48
.ascii "gensym"
.data
.align 8
.L784:
.quad .L785+4
.text
.L786:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L787
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L787:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L788:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L789
# (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629))))
# (IF (NULL? #:G1629) FALSE TRUE)
.L795:
# (NULL? #:G1629)
# #:G1629
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1629
movq $31, %rcx
cmpq %rcx, %rax
je .L791
# Done conditional (NULL? #:G1629)
.L794:
# FALSE
# Done conditional FALSE
.L793:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1629) FALSE TRUE)
.L790:
# (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL))
# (CONS (#:G1627 (CAR #:G1629)) NIL)
# (#:G1627 (CAR #:G1629))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1629)
# #:G1629
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1629
movq -2(%rax), %rax
# Done (CAR #:G1629)
movq %rax, 16(%rcx)
# #:G1627
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1627
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1627 (CAR #:G1629))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1627 (CAR #:G1629)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL))
# (RPLACD #:G1631 #:G1630)
# #:G1631
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1631
# #:G1630
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1630
movq %rcx, 6(%rax)
# Done (RPLACD #:G1631 #:G1630)
# (SET! #:G1631 #:G1630)
# #:G1630
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1630
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1631 #:G1630)
# (#:G1628 (CDR #:G1629))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1629)
# #:G1629
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1629
movq 6(%rax), %rax
# Done (CDR #:G1629)
movq %rax, 16(%rcx)
# #:G1628
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1628
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1628 (CDR #:G1629))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))
jmp .L792
.L791:
movq $23, %rax
.L792:
# Done (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629))))
addq $8, %rsp
ret
.L789:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L796:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L797
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630))))
# (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1629 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1629 ARGS)
# (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630))
# (NULL? #:G1629)
# #:G1629
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1629
movq $31, %rcx
cmpq %rcx, %rax
jne .L799
# Done conditional (NULL? #:G1629)
.L798:
# NIL
movq $31, %rax
# Done NIL
jmp .L800
.L799:
# (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L786, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL))
# (CONS (#:G1627 (CAR #:G1629)) NIL)
# (#:G1627 (CAR #:G1629))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1629)
# #:G1629
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1629
movq -2(%rax), %rax
# Done (CAR #:G1629)
movq %rax, 16(%rcx)
# #:G1627
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1627
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1627 (CAR #:G1629))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1627 (CAR #:G1629)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL))
# (DEFINE #:G1631 #:G1630)
# #:G1630
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1630
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1631 #:G1630)
# (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629))))))
# (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))
movq 0(%rsp), %rax
movq $.L788, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629))))))
# (#:G1628 (CDR #:G1629))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1629)
# #:G1629
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1629
movq 6(%rax), %rax
# Done (CDR #:G1629)
movq %rax, 16(%rcx)
# #:G1628
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1628
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1628 (CDR #:G1629))
# #:G1630
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1630
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)
.L800:
# Done (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630))))
# (APPLY GENSYM EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# GENSYM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 816(%rax), %rax
# Done GENSYM
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY GENSYM EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS))
addq $8, %rsp
ret
.L797:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L802:
.quad 88
.ascii "symbol-name"
.data
.align 8
.L801:
.quad .L802+4
.text
.L803:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L804
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L804:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L805:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L806
# (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639))))
# (IF (NULL? #:G1639) FALSE TRUE)
.L812:
# (NULL? #:G1639)
# #:G1639
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1639
movq $31, %rcx
cmpq %rcx, %rax
je .L808
# Done conditional (NULL? #:G1639)
.L811:
# FALSE
# Done conditional FALSE
.L810:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1639) FALSE TRUE)
.L807:
# (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL))
# (CONS (#:G1637 (CAR #:G1639)) NIL)
# (#:G1637 (CAR #:G1639))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1639)
# #:G1639
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1639
movq -2(%rax), %rax
# Done (CAR #:G1639)
movq %rax, 16(%rcx)
# #:G1637
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1637
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1637 (CAR #:G1639))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1637 (CAR #:G1639)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL))
# (RPLACD #:G1641 #:G1640)
# #:G1641
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1641
# #:G1640
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1640
movq %rcx, 6(%rax)
# Done (RPLACD #:G1641 #:G1640)
# (SET! #:G1641 #:G1640)
# #:G1640
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1640
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1641 #:G1640)
# (#:G1638 (CDR #:G1639))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1639)
# #:G1639
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1639
movq 6(%rax), %rax
# Done (CDR #:G1639)
movq %rax, 16(%rcx)
# #:G1638
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1638
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1638 (CDR #:G1639))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))
jmp .L809
.L808:
movq $23, %rax
.L809:
# Done (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639))))
addq $8, %rsp
ret
.L806:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L813:
.quad 24
.ascii "sym"
.text
.L814:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L815
# "sym"
movq $.L813+4, %rax
# Done "sym"
addq $8, %rsp
ret
.L815:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L816:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L817
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640))))
# (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1639 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1639 ARGS)
# (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640))
# (NULL? #:G1639)
# #:G1639
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1639
movq $31, %rcx
cmpq %rcx, %rax
jne .L819
# Done conditional (NULL? #:G1639)
.L818:
# NIL
movq $31, %rax
# Done NIL
jmp .L820
.L819:
# (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L803, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL))
# (CONS (#:G1637 (CAR #:G1639)) NIL)
# (#:G1637 (CAR #:G1639))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1639)
# #:G1639
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1639
movq -2(%rax), %rax
# Done (CAR #:G1639)
movq %rax, 16(%rcx)
# #:G1637
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1637
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1637 (CAR #:G1639))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1637 (CAR #:G1639)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL))
# (DEFINE #:G1641 #:G1640)
# #:G1640
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1640
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1641 #:G1640)
# (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639))))))
# (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))
movq 0(%rsp), %rax
movq $.L805, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639))))))
# (#:G1638 (CDR #:G1639))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1639)
# #:G1639
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1639
movq 6(%rax), %rax
# Done (CDR #:G1639)
movq %rax, 16(%rcx)
# #:G1638
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1638
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1638 (CDR #:G1639))
# #:G1640
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1640
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)
.L820:
# Done (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640))))
# (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (LAMBDA (SYM) "sym")
movq 0(%rsp), %rax
movq $.L814, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (SYM) "sym")
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS))
addq $8, %rsp
ret
.L817:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L822:
.quad 48
.ascii "intern"
.data
.align 8
.L821:
.quad .L822+4
.text
.L823:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L824
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L824:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L825:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L826
# (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649))))
# (IF (NULL? #:G1649) FALSE TRUE)
.L832:
# (NULL? #:G1649)
# #:G1649
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1649
movq $31, %rcx
cmpq %rcx, %rax
je .L828
# Done conditional (NULL? #:G1649)
.L831:
# FALSE
# Done conditional FALSE
.L830:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1649) FALSE TRUE)
.L827:
# (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL))
# (CONS (#:G1647 (CAR #:G1649)) NIL)
# (#:G1647 (CAR #:G1649))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1649)
# #:G1649
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1649
movq -2(%rax), %rax
# Done (CAR #:G1649)
movq %rax, 16(%rcx)
# #:G1647
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1647
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1647 (CAR #:G1649))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1647 (CAR #:G1649)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL))
# (RPLACD #:G1651 #:G1650)
# #:G1651
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1651
# #:G1650
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1650
movq %rcx, 6(%rax)
# Done (RPLACD #:G1651 #:G1650)
# (SET! #:G1651 #:G1650)
# #:G1650
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1650
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1651 #:G1650)
# (#:G1648 (CDR #:G1649))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1649)
# #:G1649
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1649
movq 6(%rax), %rax
# Done (CDR #:G1649)
movq %rax, 16(%rcx)
# #:G1648
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1648
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1648 (CDR #:G1649))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))
jmp .L829
.L828:
movq $23, %rax
.L829:
# Done (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649))))
addq $8, %rsp
ret
.L826:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L833:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L834
# STR
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done STR
addq $8, %rsp
ret
.L834:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L835:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L836
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650))))
# (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1649 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1649 ARGS)
# (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650))
# (NULL? #:G1649)
# #:G1649
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1649
movq $31, %rcx
cmpq %rcx, %rax
jne .L838
# Done conditional (NULL? #:G1649)
.L837:
# NIL
movq $31, %rax
# Done NIL
jmp .L839
.L838:
# (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L823, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL))
# (CONS (#:G1647 (CAR #:G1649)) NIL)
# (#:G1647 (CAR #:G1649))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1649)
# #:G1649
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1649
movq -2(%rax), %rax
# Done (CAR #:G1649)
movq %rax, 16(%rcx)
# #:G1647
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1647
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1647 (CAR #:G1649))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1647 (CAR #:G1649)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL))
# (DEFINE #:G1651 #:G1650)
# #:G1650
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1650
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1651 #:G1650)
# (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649))))))
# (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))
movq 0(%rsp), %rax
movq $.L825, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649))))))
# (#:G1648 (CDR #:G1649))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1649)
# #:G1649
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1649
movq 6(%rax), %rax
# Done (CDR #:G1649)
movq %rax, 16(%rcx)
# #:G1648
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1648
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1648 (CDR #:G1649))
# #:G1650
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1650
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)
.L839:
# Done (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650))))
# (APPLY (LAMBDA (STR) STR) EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (LAMBDA (STR) STR)
movq 0(%rsp), %rax
movq $.L833, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR) STR)
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY (LAMBDA (STR) STR) EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS))
addq $8, %rsp
ret
.L836:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L841:
.quad 40
.ascii "pair?"
.data
.align 8
.L840:
.quad .L841+4
.text
.L842:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L843
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L843:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L844:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L845
# (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659))))
# (IF (NULL? #:G1659) FALSE TRUE)
.L851:
# (NULL? #:G1659)
# #:G1659
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1659
movq $31, %rcx
cmpq %rcx, %rax
je .L847
# Done conditional (NULL? #:G1659)
.L850:
# FALSE
# Done conditional FALSE
.L849:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1659) FALSE TRUE)
.L846:
# (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL))
# (CONS (#:G1657 (CAR #:G1659)) NIL)
# (#:G1657 (CAR #:G1659))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1659)
# #:G1659
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1659
movq -2(%rax), %rax
# Done (CAR #:G1659)
movq %rax, 16(%rcx)
# #:G1657
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1657
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1657 (CAR #:G1659))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1657 (CAR #:G1659)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL))
# (RPLACD #:G1661 #:G1660)
# #:G1661
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1661
# #:G1660
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1660
movq %rcx, 6(%rax)
# Done (RPLACD #:G1661 #:G1660)
# (SET! #:G1661 #:G1660)
# #:G1660
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1660
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1661 #:G1660)
# (#:G1658 (CDR #:G1659))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1659)
# #:G1659
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1659
movq 6(%rax), %rax
# Done (CDR #:G1659)
movq %rax, 16(%rcx)
# #:G1658
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1658
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1658 (CDR #:G1659))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))
jmp .L848
.L847:
movq $23, %rax
.L848:
# Done (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659))))
addq $8, %rsp
ret
.L845:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L852:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L853
# (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# PAIR?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 800(%rax), %rax
# Done PAIR?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1659 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1659 ARGS)
# (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660))
# (NULL? #:G1659)
# #:G1659
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1659
movq $31, %rcx
cmpq %rcx, %rax
jne .L858
# Done conditional (NULL? #:G1659)
.L857:
# NIL
movq $31, %rax
# Done NIL
jmp .L859
.L858:
# (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L842, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL))
# (CONS (#:G1657 (CAR #:G1659)) NIL)
# (#:G1657 (CAR #:G1659))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1659)
# #:G1659
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1659
movq -2(%rax), %rax
# Done (CAR #:G1659)
movq %rax, 16(%rcx)
# #:G1657
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1657
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1657 (CAR #:G1659))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1657 (CAR #:G1659)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL))
# (DEFINE #:G1661 #:G1660)
# #:G1660
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1660
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1661 #:G1660)
# (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659))))))
# (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))
movq 0(%rsp), %rax
movq $.L844, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659))))))
# (#:G1658 (CDR #:G1659))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1659)
# #:G1659
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1659
movq 6(%rax), %rax
# Done (CDR #:G1659)
movq %rax, 16(%rcx)
# #:G1658
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1658
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1658 (CDR #:G1659))
# #:G1660
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1660
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)
.L859:
# Done (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L855
# Done conditional (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660))))
.L854:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L856
.L855:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L856:
# Done (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L853:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L861:
.quad 40
.ascii "null?"
.data
.align 8
.L860:
.quad .L861+4
.text
.L862:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L863
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L863:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L864:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L865
# (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669))))
# (IF (NULL? #:G1669) FALSE TRUE)
.L871:
# (NULL? #:G1669)
# #:G1669
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1669
movq $31, %rcx
cmpq %rcx, %rax
je .L867
# Done conditional (NULL? #:G1669)
.L870:
# FALSE
# Done conditional FALSE
.L869:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1669) FALSE TRUE)
.L866:
# (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL))
# (CONS (#:G1667 (CAR #:G1669)) NIL)
# (#:G1667 (CAR #:G1669))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1669)
# #:G1669
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1669
movq -2(%rax), %rax
# Done (CAR #:G1669)
movq %rax, 16(%rcx)
# #:G1667
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1667
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1667 (CAR #:G1669))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1667 (CAR #:G1669)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL))
# (RPLACD #:G1671 #:G1670)
# #:G1671
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1671
# #:G1670
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1670
movq %rcx, 6(%rax)
# Done (RPLACD #:G1671 #:G1670)
# (SET! #:G1671 #:G1670)
# #:G1670
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1670
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1671 #:G1670)
# (#:G1668 (CDR #:G1669))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1669)
# #:G1669
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1669
movq 6(%rax), %rax
# Done (CDR #:G1669)
movq %rax, 16(%rcx)
# #:G1668
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1668
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1668 (CDR #:G1669))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))
jmp .L868
.L867:
movq $23, %rax
.L868:
# Done (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669))))
addq $8, %rsp
ret
.L865:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L872:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L873
# (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# NULL?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 792(%rax), %rax
# Done NULL?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1669 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1669 ARGS)
# (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670))
# (NULL? #:G1669)
# #:G1669
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1669
movq $31, %rcx
cmpq %rcx, %rax
jne .L878
# Done conditional (NULL? #:G1669)
.L877:
# NIL
movq $31, %rax
# Done NIL
jmp .L879
.L878:
# (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L862, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL))
# (CONS (#:G1667 (CAR #:G1669)) NIL)
# (#:G1667 (CAR #:G1669))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1669)
# #:G1669
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1669
movq -2(%rax), %rax
# Done (CAR #:G1669)
movq %rax, 16(%rcx)
# #:G1667
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1667
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1667 (CAR #:G1669))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1667 (CAR #:G1669)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL))
# (DEFINE #:G1671 #:G1670)
# #:G1670
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1670
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1671 #:G1670)
# (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669))))))
# (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))
movq 0(%rsp), %rax
movq $.L864, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669))))))
# (#:G1668 (CDR #:G1669))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1669)
# #:G1669
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1669
movq 6(%rax), %rax
# Done (CDR #:G1669)
movq %rax, 16(%rcx)
# #:G1668
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1668
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1668 (CDR #:G1669))
# #:G1670
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1670
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)
.L879:
# Done (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L875
# Done conditional (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670))))
.L874:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L876
.L875:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L876:
# Done (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L873:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L881:
.quad 24
.ascii "car"
.data
.align 8
.L880:
.quad .L881+4
.text
.L882:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L883
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L883:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L884:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L885
# (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679))))
# (IF (NULL? #:G1679) FALSE TRUE)
.L891:
# (NULL? #:G1679)
# #:G1679
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1679
movq $31, %rcx
cmpq %rcx, %rax
je .L887
# Done conditional (NULL? #:G1679)
.L890:
# FALSE
# Done conditional FALSE
.L889:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1679) FALSE TRUE)
.L886:
# (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL))
# (CONS (#:G1677 (CAR #:G1679)) NIL)
# (#:G1677 (CAR #:G1679))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1679)
# #:G1679
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1679
movq -2(%rax), %rax
# Done (CAR #:G1679)
movq %rax, 16(%rcx)
# #:G1677
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1677
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1677 (CAR #:G1679))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1677 (CAR #:G1679)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL))
# (RPLACD #:G1681 #:G1680)
# #:G1681
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1681
# #:G1680
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1680
movq %rcx, 6(%rax)
# Done (RPLACD #:G1681 #:G1680)
# (SET! #:G1681 #:G1680)
# #:G1680
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1680
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1681 #:G1680)
# (#:G1678 (CDR #:G1679))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1679)
# #:G1679
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1679
movq 6(%rax), %rax
# Done (CDR #:G1679)
movq %rax, 16(%rcx)
# #:G1678
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1678
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1678 (CDR #:G1679))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))
jmp .L888
.L887:
movq $23, %rax
.L888:
# Done (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679))))
addq $8, %rsp
ret
.L885:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L892:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L893
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680))))
# (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1679 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1679 ARGS)
# (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680))
# (NULL? #:G1679)
# #:G1679
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1679
movq $31, %rcx
cmpq %rcx, %rax
jne .L895
# Done conditional (NULL? #:G1679)
.L894:
# NIL
movq $31, %rax
# Done NIL
jmp .L896
.L895:
# (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L882, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL))
# (CONS (#:G1677 (CAR #:G1679)) NIL)
# (#:G1677 (CAR #:G1679))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1679)
# #:G1679
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1679
movq -2(%rax), %rax
# Done (CAR #:G1679)
movq %rax, 16(%rcx)
# #:G1677
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1677
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1677 (CAR #:G1679))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1677 (CAR #:G1679)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL))
# (DEFINE #:G1681 #:G1680)
# #:G1680
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1680
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1681 #:G1680)
# (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679))))))
# (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))
movq 0(%rsp), %rax
movq $.L884, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679))))))
# (#:G1678 (CDR #:G1679))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1679)
# #:G1679
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1679
movq 6(%rax), %rax
# Done (CDR #:G1679)
movq %rax, 16(%rcx)
# #:G1678
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1678
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1678 (CDR #:G1679))
# #:G1680
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1680
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)
.L896:
# Done (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680))))
# (APPLY CAR EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# CAR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 784(%rax), %rax
# Done CAR
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY CAR EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS))
addq $8, %rsp
ret
.L893:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L898:
.quad 24
.ascii "cdr"
.data
.align 8
.L897:
.quad .L898+4
.text
.L899:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L900
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L900:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L901:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L902
# (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689))))
# (IF (NULL? #:G1689) FALSE TRUE)
.L908:
# (NULL? #:G1689)
# #:G1689
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1689
movq $31, %rcx
cmpq %rcx, %rax
je .L904
# Done conditional (NULL? #:G1689)
.L907:
# FALSE
# Done conditional FALSE
.L906:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1689) FALSE TRUE)
.L903:
# (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL))
# (CONS (#:G1687 (CAR #:G1689)) NIL)
# (#:G1687 (CAR #:G1689))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1689)
# #:G1689
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1689
movq -2(%rax), %rax
# Done (CAR #:G1689)
movq %rax, 16(%rcx)
# #:G1687
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1687
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1687 (CAR #:G1689))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1687 (CAR #:G1689)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL))
# (RPLACD #:G1691 #:G1690)
# #:G1691
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1691
# #:G1690
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1690
movq %rcx, 6(%rax)
# Done (RPLACD #:G1691 #:G1690)
# (SET! #:G1691 #:G1690)
# #:G1690
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1690
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1691 #:G1690)
# (#:G1688 (CDR #:G1689))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1689)
# #:G1689
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1689
movq 6(%rax), %rax
# Done (CDR #:G1689)
movq %rax, 16(%rcx)
# #:G1688
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1688
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1688 (CDR #:G1689))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))
jmp .L905
.L904:
movq $23, %rax
.L905:
# Done (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689))))
addq $8, %rsp
ret
.L902:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L909:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L910
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690))))
# (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1689 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1689 ARGS)
# (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690))
# (NULL? #:G1689)
# #:G1689
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1689
movq $31, %rcx
cmpq %rcx, %rax
jne .L912
# Done conditional (NULL? #:G1689)
.L911:
# NIL
movq $31, %rax
# Done NIL
jmp .L913
.L912:
# (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L899, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL))
# (CONS (#:G1687 (CAR #:G1689)) NIL)
# (#:G1687 (CAR #:G1689))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1689)
# #:G1689
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1689
movq -2(%rax), %rax
# Done (CAR #:G1689)
movq %rax, 16(%rcx)
# #:G1687
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1687
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1687 (CAR #:G1689))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1687 (CAR #:G1689)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL))
# (DEFINE #:G1691 #:G1690)
# #:G1690
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1690
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1691 #:G1690)
# (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689))))))
# (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))
movq 0(%rsp), %rax
movq $.L901, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689))))))
# (#:G1688 (CDR #:G1689))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1689)
# #:G1689
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1689
movq 6(%rax), %rax
# Done (CDR #:G1689)
movq %rax, 16(%rcx)
# #:G1688
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1688
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1688 (CDR #:G1689))
# #:G1690
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1690
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)
.L913:
# Done (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690))))
# (APPLY CDR EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# CDR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 776(%rax), %rax
# Done CDR
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY CDR EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS))
addq $8, %rsp
ret
.L910:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L914:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L915
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L915:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L916:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L917
# (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699))))
# (IF (NULL? #:G1699) FALSE TRUE)
.L923:
# (NULL? #:G1699)
# #:G1699
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1699
movq $31, %rcx
cmpq %rcx, %rax
je .L919
# Done conditional (NULL? #:G1699)
.L922:
# FALSE
# Done conditional FALSE
.L921:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1699) FALSE TRUE)
.L918:
# (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL))
# (CONS (#:G1697 (CAR #:G1699)) NIL)
# (#:G1697 (CAR #:G1699))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1699)
# #:G1699
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1699
movq -2(%rax), %rax
# Done (CAR #:G1699)
movq %rax, 16(%rcx)
# #:G1697
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1697
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1697 (CAR #:G1699))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1697 (CAR #:G1699)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL))
# (RPLACD #:G1701 #:G1700)
# #:G1701
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1701
# #:G1700
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1700
movq %rcx, 6(%rax)
# Done (RPLACD #:G1701 #:G1700)
# (SET! #:G1701 #:G1700)
# #:G1700
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1700
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1701 #:G1700)
# (#:G1698 (CDR #:G1699))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1699)
# #:G1699
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1699
movq 6(%rax), %rax
# Done (CDR #:G1699)
movq %rax, 16(%rcx)
# #:G1698
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1698
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1698 (CDR #:G1699))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))
jmp .L920
.L919:
movq $23, %rax
.L920:
# Done (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699))))
addq $8, %rsp
ret
.L917:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L924:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L925
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700))))
# (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1699 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1699 ARGS)
# (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700))
# (NULL? #:G1699)
# #:G1699
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1699
movq $31, %rcx
cmpq %rcx, %rax
jne .L927
# Done conditional (NULL? #:G1699)
.L926:
# NIL
movq $31, %rax
# Done NIL
jmp .L928
.L927:
# (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L914, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL))
# (CONS (#:G1697 (CAR #:G1699)) NIL)
# (#:G1697 (CAR #:G1699))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1699)
# #:G1699
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1699
movq -2(%rax), %rax
# Done (CAR #:G1699)
movq %rax, 16(%rcx)
# #:G1697
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1697
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1697 (CAR #:G1699))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1697 (CAR #:G1699)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL))
# (DEFINE #:G1701 #:G1700)
# #:G1700
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1700
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1701 #:G1700)
# (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699))))))
# (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))
movq 0(%rsp), %rax
movq $.L916, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699))))))
# (#:G1698 (CDR #:G1699))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1699)
# #:G1699
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1699
movq 6(%rax), %rax
# Done (CDR #:G1699)
movq %rax, 16(%rcx)
# #:G1698
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1698
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1698 (CDR #:G1699))
# #:G1700
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1700
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)
.L928:
# Done (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700))))
# (APPLY CONS EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# CONS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 768(%rax), %rax
# Done CONS
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY CONS EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS))
addq $8, %rsp
ret
.L925:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L930:
.quad 48
.ascii "rplaca"
.data
.align 8
.L929:
.quad .L930+4
.text
.L931:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L932
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L932:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L933:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L934
# (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709))))
# (IF (NULL? #:G1709) FALSE TRUE)
.L940:
# (NULL? #:G1709)
# #:G1709
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1709
movq $31, %rcx
cmpq %rcx, %rax
je .L936
# Done conditional (NULL? #:G1709)
.L939:
# FALSE
# Done conditional FALSE
.L938:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1709) FALSE TRUE)
.L935:
# (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL))
# (CONS (#:G1707 (CAR #:G1709)) NIL)
# (#:G1707 (CAR #:G1709))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1709)
# #:G1709
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1709
movq -2(%rax), %rax
# Done (CAR #:G1709)
movq %rax, 16(%rcx)
# #:G1707
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1707
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1707 (CAR #:G1709))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1707 (CAR #:G1709)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL))
# (RPLACD #:G1711 #:G1710)
# #:G1711
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1711
# #:G1710
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1710
movq %rcx, 6(%rax)
# Done (RPLACD #:G1711 #:G1710)
# (SET! #:G1711 #:G1710)
# #:G1710
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1710
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1711 #:G1710)
# (#:G1708 (CDR #:G1709))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1709)
# #:G1709
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1709
movq 6(%rax), %rax
# Done (CDR #:G1709)
movq %rax, 16(%rcx)
# #:G1708
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1708
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1708 (CDR #:G1709))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))
jmp .L937
.L936:
movq $23, %rax
.L937:
# Done (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709))))
addq $8, %rsp
ret
.L934:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L941:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L942
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710))))
# (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1709 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1709 ARGS)
# (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710))
# (NULL? #:G1709)
# #:G1709
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1709
movq $31, %rcx
cmpq %rcx, %rax
jne .L944
# Done conditional (NULL? #:G1709)
.L943:
# NIL
movq $31, %rax
# Done NIL
jmp .L945
.L944:
# (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L931, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL))
# (CONS (#:G1707 (CAR #:G1709)) NIL)
# (#:G1707 (CAR #:G1709))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1709)
# #:G1709
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1709
movq -2(%rax), %rax
# Done (CAR #:G1709)
movq %rax, 16(%rcx)
# #:G1707
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1707
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1707 (CAR #:G1709))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1707 (CAR #:G1709)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL))
# (DEFINE #:G1711 #:G1710)
# #:G1710
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1710
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1711 #:G1710)
# (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709))))))
# (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))
movq 0(%rsp), %rax
movq $.L933, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709))))))
# (#:G1708 (CDR #:G1709))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1709)
# #:G1709
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1709
movq 6(%rax), %rax
# Done (CDR #:G1709)
movq %rax, 16(%rcx)
# #:G1708
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1708
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1708 (CDR #:G1709))
# #:G1710
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1710
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)
.L945:
# Done (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710))))
# (APPLY RPLACA EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RPLACA
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 760(%rax), %rax
# Done RPLACA
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY RPLACA EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS))
addq $8, %rsp
ret
.L942:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L947:
.quad 48
.ascii "rplacd"
.data
.align 8
.L946:
.quad .L947+4
.text
.L948:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L949
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L949:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L950:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L951
# (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719))))
# (IF (NULL? #:G1719) FALSE TRUE)
.L957:
# (NULL? #:G1719)
# #:G1719
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1719
movq $31, %rcx
cmpq %rcx, %rax
je .L953
# Done conditional (NULL? #:G1719)
.L956:
# FALSE
# Done conditional FALSE
.L955:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1719) FALSE TRUE)
.L952:
# (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL))
# (CONS (#:G1717 (CAR #:G1719)) NIL)
# (#:G1717 (CAR #:G1719))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1719)
# #:G1719
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1719
movq -2(%rax), %rax
# Done (CAR #:G1719)
movq %rax, 16(%rcx)
# #:G1717
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1717
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1717 (CAR #:G1719))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1717 (CAR #:G1719)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL))
# (RPLACD #:G1721 #:G1720)
# #:G1721
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1721
# #:G1720
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1720
movq %rcx, 6(%rax)
# Done (RPLACD #:G1721 #:G1720)
# (SET! #:G1721 #:G1720)
# #:G1720
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1720
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1721 #:G1720)
# (#:G1718 (CDR #:G1719))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1719)
# #:G1719
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1719
movq 6(%rax), %rax
# Done (CDR #:G1719)
movq %rax, 16(%rcx)
# #:G1718
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1718
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1718 (CDR #:G1719))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))
jmp .L954
.L953:
movq $23, %rax
.L954:
# Done (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719))))
addq $8, %rsp
ret
.L951:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L958:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L959
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720))))
# (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1719 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1719 ARGS)
# (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720))
# (NULL? #:G1719)
# #:G1719
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1719
movq $31, %rcx
cmpq %rcx, %rax
jne .L961
# Done conditional (NULL? #:G1719)
.L960:
# NIL
movq $31, %rax
# Done NIL
jmp .L962
.L961:
# (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L948, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL))
# (CONS (#:G1717 (CAR #:G1719)) NIL)
# (#:G1717 (CAR #:G1719))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1719)
# #:G1719
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1719
movq -2(%rax), %rax
# Done (CAR #:G1719)
movq %rax, 16(%rcx)
# #:G1717
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1717
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1717 (CAR #:G1719))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1717 (CAR #:G1719)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL))
# (DEFINE #:G1721 #:G1720)
# #:G1720
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1720
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1721 #:G1720)
# (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719))))))
# (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))
movq 0(%rsp), %rax
movq $.L950, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719))))))
# (#:G1718 (CDR #:G1719))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1719)
# #:G1719
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1719
movq 6(%rax), %rax
# Done (CDR #:G1719)
movq %rax, 16(%rcx)
# #:G1718
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1718
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1718 (CDR #:G1719))
# #:G1720
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1720
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)
.L962:
# Done (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720))))
# (APPLY RPLACD EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RPLACD
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 752(%rax), %rax
# Done RPLACD
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY RPLACD EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS))
addq $8, %rsp
ret
.L959:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L964:
.quad 56
.ascii "number?"
.data
.align 8
.L963:
.quad .L964+4
.text
.L965:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L966
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L966:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L967:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L968
# (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729))))
# (IF (NULL? #:G1729) FALSE TRUE)
.L974:
# (NULL? #:G1729)
# #:G1729
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1729
movq $31, %rcx
cmpq %rcx, %rax
je .L970
# Done conditional (NULL? #:G1729)
.L973:
# FALSE
# Done conditional FALSE
.L972:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1729) FALSE TRUE)
.L969:
# (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL))
# (CONS (#:G1727 (CAR #:G1729)) NIL)
# (#:G1727 (CAR #:G1729))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1729)
# #:G1729
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1729
movq -2(%rax), %rax
# Done (CAR #:G1729)
movq %rax, 16(%rcx)
# #:G1727
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1727
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1727 (CAR #:G1729))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1727 (CAR #:G1729)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL))
# (RPLACD #:G1731 #:G1730)
# #:G1731
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1731
# #:G1730
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1730
movq %rcx, 6(%rax)
# Done (RPLACD #:G1731 #:G1730)
# (SET! #:G1731 #:G1730)
# #:G1730
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1730
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1731 #:G1730)
# (#:G1728 (CDR #:G1729))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1729)
# #:G1729
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1729
movq 6(%rax), %rax
# Done (CDR #:G1729)
movq %rax, 16(%rcx)
# #:G1728
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1728
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1728 (CDR #:G1729))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))
jmp .L971
.L970:
movq $23, %rax
.L971:
# Done (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729))))
addq $8, %rsp
ret
.L968:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L975:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L976
# (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# NUMBER?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 744(%rax), %rax
# Done NUMBER?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1729 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1729 ARGS)
# (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730))
# (NULL? #:G1729)
# #:G1729
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1729
movq $31, %rcx
cmpq %rcx, %rax
jne .L981
# Done conditional (NULL? #:G1729)
.L980:
# NIL
movq $31, %rax
# Done NIL
jmp .L982
.L981:
# (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L965, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL))
# (CONS (#:G1727 (CAR #:G1729)) NIL)
# (#:G1727 (CAR #:G1729))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1729)
# #:G1729
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1729
movq -2(%rax), %rax
# Done (CAR #:G1729)
movq %rax, 16(%rcx)
# #:G1727
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1727
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1727 (CAR #:G1729))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1727 (CAR #:G1729)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL))
# (DEFINE #:G1731 #:G1730)
# #:G1730
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1730
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1731 #:G1730)
# (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729))))))
# (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))
movq 0(%rsp), %rax
movq $.L967, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729))))))
# (#:G1728 (CDR #:G1729))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1729)
# #:G1729
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1729
movq 6(%rax), %rax
# Done (CDR #:G1729)
movq %rax, 16(%rcx)
# #:G1728
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1728
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1728 (CDR #:G1729))
# #:G1730
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1730
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)
.L982:
# Done (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L978
# Done conditional (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730))))
.L977:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L979
.L978:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L979:
# Done (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L976:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L984:
.quad 8
.ascii "<"
.data
.align 8
.L983:
.quad .L984+4
.text
.L985:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L986
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L986:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L987:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L988
# (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739))))
# (IF (NULL? #:G1739) FALSE TRUE)
.L994:
# (NULL? #:G1739)
# #:G1739
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1739
movq $31, %rcx
cmpq %rcx, %rax
je .L990
# Done conditional (NULL? #:G1739)
.L993:
# FALSE
# Done conditional FALSE
.L992:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1739) FALSE TRUE)
.L989:
# (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL))
# (CONS (#:G1737 (CAR #:G1739)) NIL)
# (#:G1737 (CAR #:G1739))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1739)
# #:G1739
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1739
movq -2(%rax), %rax
# Done (CAR #:G1739)
movq %rax, 16(%rcx)
# #:G1737
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1737
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1737 (CAR #:G1739))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1737 (CAR #:G1739)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL))
# (RPLACD #:G1741 #:G1740)
# #:G1741
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1741
# #:G1740
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1740
movq %rcx, 6(%rax)
# Done (RPLACD #:G1741 #:G1740)
# (SET! #:G1741 #:G1740)
# #:G1740
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1740
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1741 #:G1740)
# (#:G1738 (CDR #:G1739))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1739)
# #:G1739
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1739
movq 6(%rax), %rax
# Done (CDR #:G1739)
movq %rax, 16(%rcx)
# #:G1738
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1738
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1738 (CDR #:G1739))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))
jmp .L991
.L990:
movq $23, %rax
.L991:
# Done (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739))))
addq $8, %rsp
ret
.L988:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L995:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L996
# (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# <
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 736(%rax), %rax
# Done <
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1739 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1739 ARGS)
# (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740))
# (NULL? #:G1739)
# #:G1739
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1739
movq $31, %rcx
cmpq %rcx, %rax
jne .L1001
# Done conditional (NULL? #:G1739)
.L1000:
# NIL
movq $31, %rax
# Done NIL
jmp .L1002
.L1001:
# (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L985, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL))
# (CONS (#:G1737 (CAR #:G1739)) NIL)
# (#:G1737 (CAR #:G1739))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1739)
# #:G1739
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1739
movq -2(%rax), %rax
# Done (CAR #:G1739)
movq %rax, 16(%rcx)
# #:G1737
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1737
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1737 (CAR #:G1739))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1737 (CAR #:G1739)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL))
# (DEFINE #:G1741 #:G1740)
# #:G1740
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1740
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1741 #:G1740)
# (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739))))))
# (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))
movq 0(%rsp), %rax
movq $.L987, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739))))))
# (#:G1738 (CDR #:G1739))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1739)
# #:G1739
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1739
movq 6(%rax), %rax
# Done (CDR #:G1739)
movq %rax, 16(%rcx)
# #:G1738
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1738
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1738 (CDR #:G1739))
# #:G1740
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1740
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)
.L1002:
# Done (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L998
# Done conditional (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740))))
.L997:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L999
.L998:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L999:
# Done (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L996:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1004:
.quad 16
.ascii "<="
.data
.align 8
.L1003:
.quad .L1004+4
.text
.L1005:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1006
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1006:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1007:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1008
# (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749))))
# (IF (NULL? #:G1749) FALSE TRUE)
.L1014:
# (NULL? #:G1749)
# #:G1749
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1749
movq $31, %rcx
cmpq %rcx, %rax
je .L1010
# Done conditional (NULL? #:G1749)
.L1013:
# FALSE
# Done conditional FALSE
.L1012:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1749) FALSE TRUE)
.L1009:
# (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL))
# (CONS (#:G1747 (CAR #:G1749)) NIL)
# (#:G1747 (CAR #:G1749))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1749)
# #:G1749
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1749
movq -2(%rax), %rax
# Done (CAR #:G1749)
movq %rax, 16(%rcx)
# #:G1747
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1747
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1747 (CAR #:G1749))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1747 (CAR #:G1749)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL))
# (RPLACD #:G1751 #:G1750)
# #:G1751
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1751
# #:G1750
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1750
movq %rcx, 6(%rax)
# Done (RPLACD #:G1751 #:G1750)
# (SET! #:G1751 #:G1750)
# #:G1750
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1750
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1751 #:G1750)
# (#:G1748 (CDR #:G1749))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1749)
# #:G1749
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1749
movq 6(%rax), %rax
# Done (CDR #:G1749)
movq %rax, 16(%rcx)
# #:G1748
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1748
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1748 (CDR #:G1749))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))
jmp .L1011
.L1010:
movq $23, %rax
.L1011:
# Done (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749))))
addq $8, %rsp
ret
.L1008:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1015:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1016
# (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# <=
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 728(%rax), %rax
# Done <=
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1749 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1749 ARGS)
# (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750))
# (NULL? #:G1749)
# #:G1749
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1749
movq $31, %rcx
cmpq %rcx, %rax
jne .L1021
# Done conditional (NULL? #:G1749)
.L1020:
# NIL
movq $31, %rax
# Done NIL
jmp .L1022
.L1021:
# (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1005, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL))
# (CONS (#:G1747 (CAR #:G1749)) NIL)
# (#:G1747 (CAR #:G1749))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1749)
# #:G1749
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1749
movq -2(%rax), %rax
# Done (CAR #:G1749)
movq %rax, 16(%rcx)
# #:G1747
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1747
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1747 (CAR #:G1749))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1747 (CAR #:G1749)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL))
# (DEFINE #:G1751 #:G1750)
# #:G1750
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1750
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1751 #:G1750)
# (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749))))))
# (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))
movq 0(%rsp), %rax
movq $.L1007, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749))))))
# (#:G1748 (CDR #:G1749))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1749)
# #:G1749
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1749
movq 6(%rax), %rax
# Done (CDR #:G1749)
movq %rax, 16(%rcx)
# #:G1748
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1748
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1748 (CDR #:G1749))
# #:G1750
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1750
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)
.L1022:
# Done (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1018
# Done conditional (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750))))
.L1017:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1019
.L1018:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1019:
# Done (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1016:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1024:
.quad 8
.ascii ">"
.data
.align 8
.L1023:
.quad .L1024+4
.text
.L1025:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1026
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1026:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1027:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1028
# (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759))))
# (IF (NULL? #:G1759) FALSE TRUE)
.L1034:
# (NULL? #:G1759)
# #:G1759
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1759
movq $31, %rcx
cmpq %rcx, %rax
je .L1030
# Done conditional (NULL? #:G1759)
.L1033:
# FALSE
# Done conditional FALSE
.L1032:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1759) FALSE TRUE)
.L1029:
# (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL))
# (CONS (#:G1757 (CAR #:G1759)) NIL)
# (#:G1757 (CAR #:G1759))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1759)
# #:G1759
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1759
movq -2(%rax), %rax
# Done (CAR #:G1759)
movq %rax, 16(%rcx)
# #:G1757
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1757
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1757 (CAR #:G1759))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1757 (CAR #:G1759)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL))
# (RPLACD #:G1761 #:G1760)
# #:G1761
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1761
# #:G1760
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1760
movq %rcx, 6(%rax)
# Done (RPLACD #:G1761 #:G1760)
# (SET! #:G1761 #:G1760)
# #:G1760
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1760
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1761 #:G1760)
# (#:G1758 (CDR #:G1759))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1759)
# #:G1759
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1759
movq 6(%rax), %rax
# Done (CDR #:G1759)
movq %rax, 16(%rcx)
# #:G1758
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1758
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1758 (CDR #:G1759))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))
jmp .L1031
.L1030:
movq $23, %rax
.L1031:
# Done (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759))))
addq $8, %rsp
ret
.L1028:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1035:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1036
# (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# >
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 720(%rax), %rax
# Done >
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1759 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1759 ARGS)
# (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760))
# (NULL? #:G1759)
# #:G1759
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1759
movq $31, %rcx
cmpq %rcx, %rax
jne .L1041
# Done conditional (NULL? #:G1759)
.L1040:
# NIL
movq $31, %rax
# Done NIL
jmp .L1042
.L1041:
# (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1025, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL))
# (CONS (#:G1757 (CAR #:G1759)) NIL)
# (#:G1757 (CAR #:G1759))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1759)
# #:G1759
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1759
movq -2(%rax), %rax
# Done (CAR #:G1759)
movq %rax, 16(%rcx)
# #:G1757
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1757
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1757 (CAR #:G1759))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1757 (CAR #:G1759)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL))
# (DEFINE #:G1761 #:G1760)
# #:G1760
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1760
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1761 #:G1760)
# (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759))))))
# (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))
movq 0(%rsp), %rax
movq $.L1027, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759))))))
# (#:G1758 (CDR #:G1759))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1759)
# #:G1759
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1759
movq 6(%rax), %rax
# Done (CDR #:G1759)
movq %rax, 16(%rcx)
# #:G1758
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1758
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1758 (CDR #:G1759))
# #:G1760
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1760
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)
.L1042:
# Done (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1038
# Done conditional (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760))))
.L1037:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1039
.L1038:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1039:
# Done (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1036:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1044:
.quad 16
.ascii ">="
.data
.align 8
.L1043:
.quad .L1044+4
.text
.L1045:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1046
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1046:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1047:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1048
# (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769))))
# (IF (NULL? #:G1769) FALSE TRUE)
.L1054:
# (NULL? #:G1769)
# #:G1769
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1769
movq $31, %rcx
cmpq %rcx, %rax
je .L1050
# Done conditional (NULL? #:G1769)
.L1053:
# FALSE
# Done conditional FALSE
.L1052:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1769) FALSE TRUE)
.L1049:
# (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL))
# (CONS (#:G1767 (CAR #:G1769)) NIL)
# (#:G1767 (CAR #:G1769))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1769)
# #:G1769
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1769
movq -2(%rax), %rax
# Done (CAR #:G1769)
movq %rax, 16(%rcx)
# #:G1767
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1767
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1767 (CAR #:G1769))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1767 (CAR #:G1769)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL))
# (RPLACD #:G1771 #:G1770)
# #:G1771
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1771
# #:G1770
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1770
movq %rcx, 6(%rax)
# Done (RPLACD #:G1771 #:G1770)
# (SET! #:G1771 #:G1770)
# #:G1770
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1770
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1771 #:G1770)
# (#:G1768 (CDR #:G1769))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1769)
# #:G1769
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1769
movq 6(%rax), %rax
# Done (CDR #:G1769)
movq %rax, 16(%rcx)
# #:G1768
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1768
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1768 (CDR #:G1769))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))
jmp .L1051
.L1050:
movq $23, %rax
.L1051:
# Done (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769))))
addq $8, %rsp
ret
.L1048:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1055:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1056
# (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# >=
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 712(%rax), %rax
# Done >=
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1769 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1769 ARGS)
# (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770))
# (NULL? #:G1769)
# #:G1769
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1769
movq $31, %rcx
cmpq %rcx, %rax
jne .L1061
# Done conditional (NULL? #:G1769)
.L1060:
# NIL
movq $31, %rax
# Done NIL
jmp .L1062
.L1061:
# (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1045, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL))
# (CONS (#:G1767 (CAR #:G1769)) NIL)
# (#:G1767 (CAR #:G1769))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1769)
# #:G1769
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1769
movq -2(%rax), %rax
# Done (CAR #:G1769)
movq %rax, 16(%rcx)
# #:G1767
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1767
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1767 (CAR #:G1769))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1767 (CAR #:G1769)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL))
# (DEFINE #:G1771 #:G1770)
# #:G1770
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1770
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1771 #:G1770)
# (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769))))))
# (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))
movq 0(%rsp), %rax
movq $.L1047, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769))))))
# (#:G1768 (CDR #:G1769))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1769)
# #:G1769
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1769
movq 6(%rax), %rax
# Done (CDR #:G1769)
movq %rax, 16(%rcx)
# #:G1768
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1768
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1768 (CDR #:G1769))
# #:G1770
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1770
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)
.L1062:
# Done (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1058
# Done conditional (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770))))
.L1057:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1059
.L1058:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1059:
# Done (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1056:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1064:
.quad 8
.ascii "="
.data
.align 8
.L1063:
.quad .L1064+4
.text
.L1065:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1066
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1066:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1067:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1068
# (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779))))
# (IF (NULL? #:G1779) FALSE TRUE)
.L1074:
# (NULL? #:G1779)
# #:G1779
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1779
movq $31, %rcx
cmpq %rcx, %rax
je .L1070
# Done conditional (NULL? #:G1779)
.L1073:
# FALSE
# Done conditional FALSE
.L1072:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1779) FALSE TRUE)
.L1069:
# (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL))
# (CONS (#:G1777 (CAR #:G1779)) NIL)
# (#:G1777 (CAR #:G1779))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1779)
# #:G1779
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1779
movq -2(%rax), %rax
# Done (CAR #:G1779)
movq %rax, 16(%rcx)
# #:G1777
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1777
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1777 (CAR #:G1779))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1777 (CAR #:G1779)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL))
# (RPLACD #:G1781 #:G1780)
# #:G1781
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1781
# #:G1780
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1780
movq %rcx, 6(%rax)
# Done (RPLACD #:G1781 #:G1780)
# (SET! #:G1781 #:G1780)
# #:G1780
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1780
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1781 #:G1780)
# (#:G1778 (CDR #:G1779))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1779)
# #:G1779
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1779
movq 6(%rax), %rax
# Done (CDR #:G1779)
movq %rax, 16(%rcx)
# #:G1778
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1778
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1778 (CDR #:G1779))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))
jmp .L1071
.L1070:
movq $23, %rax
.L1071:
# Done (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779))))
addq $8, %rsp
ret
.L1068:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1075:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1076
# (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# =
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 704(%rax), %rax
# Done =
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1779 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1779 ARGS)
# (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780))
# (NULL? #:G1779)
# #:G1779
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1779
movq $31, %rcx
cmpq %rcx, %rax
jne .L1081
# Done conditional (NULL? #:G1779)
.L1080:
# NIL
movq $31, %rax
# Done NIL
jmp .L1082
.L1081:
# (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1065, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL))
# (CONS (#:G1777 (CAR #:G1779)) NIL)
# (#:G1777 (CAR #:G1779))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1779)
# #:G1779
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1779
movq -2(%rax), %rax
# Done (CAR #:G1779)
movq %rax, 16(%rcx)
# #:G1777
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1777
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1777 (CAR #:G1779))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1777 (CAR #:G1779)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL))
# (DEFINE #:G1781 #:G1780)
# #:G1780
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1780
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1781 #:G1780)
# (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779))))))
# (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))
movq 0(%rsp), %rax
movq $.L1067, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779))))))
# (#:G1778 (CDR #:G1779))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1779)
# #:G1779
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1779
movq 6(%rax), %rax
# Done (CDR #:G1779)
movq %rax, 16(%rcx)
# #:G1778
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1778
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1778 (CDR #:G1779))
# #:G1780
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1780
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)
.L1082:
# Done (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1078
# Done conditional (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780))))
.L1077:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1079
.L1078:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1079:
# Done (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1076:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1084:
.quad 16
.ascii "/="
.data
.align 8
.L1083:
.quad .L1084+4
.text
.L1085:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1086
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1086:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1087:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1088
# (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789))))
# (IF (NULL? #:G1789) FALSE TRUE)
.L1094:
# (NULL? #:G1789)
# #:G1789
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1789
movq $31, %rcx
cmpq %rcx, %rax
je .L1090
# Done conditional (NULL? #:G1789)
.L1093:
# FALSE
# Done conditional FALSE
.L1092:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1789) FALSE TRUE)
.L1089:
# (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL))
# (CONS (#:G1787 (CAR #:G1789)) NIL)
# (#:G1787 (CAR #:G1789))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1789)
# #:G1789
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1789
movq -2(%rax), %rax
# Done (CAR #:G1789)
movq %rax, 16(%rcx)
# #:G1787
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1787
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1787 (CAR #:G1789))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1787 (CAR #:G1789)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL))
# (RPLACD #:G1791 #:G1790)
# #:G1791
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1791
# #:G1790
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1790
movq %rcx, 6(%rax)
# Done (RPLACD #:G1791 #:G1790)
# (SET! #:G1791 #:G1790)
# #:G1790
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1790
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1791 #:G1790)
# (#:G1788 (CDR #:G1789))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1789)
# #:G1789
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1789
movq 6(%rax), %rax
# Done (CDR #:G1789)
movq %rax, 16(%rcx)
# #:G1788
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1788
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1788 (CDR #:G1789))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))
jmp .L1091
.L1090:
movq $23, %rax
.L1091:
# Done (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789))))
addq $8, %rsp
ret
.L1088:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1095:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1096
# (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# /=
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 696(%rax), %rax
# Done /=
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1789 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1789 ARGS)
# (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790))
# (NULL? #:G1789)
# #:G1789
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1789
movq $31, %rcx
cmpq %rcx, %rax
jne .L1101
# Done conditional (NULL? #:G1789)
.L1100:
# NIL
movq $31, %rax
# Done NIL
jmp .L1102
.L1101:
# (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1085, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL))
# (CONS (#:G1787 (CAR #:G1789)) NIL)
# (#:G1787 (CAR #:G1789))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1789)
# #:G1789
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1789
movq -2(%rax), %rax
# Done (CAR #:G1789)
movq %rax, 16(%rcx)
# #:G1787
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1787
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1787 (CAR #:G1789))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1787 (CAR #:G1789)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL))
# (DEFINE #:G1791 #:G1790)
# #:G1790
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1790
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1791 #:G1790)
# (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789))))))
# (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))
movq 0(%rsp), %rax
movq $.L1087, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789))))))
# (#:G1788 (CDR #:G1789))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1789)
# #:G1789
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1789
movq 6(%rax), %rax
# Done (CDR #:G1789)
movq %rax, 16(%rcx)
# #:G1788
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1788
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1788 (CDR #:G1789))
# #:G1790
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1790
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)
.L1102:
# Done (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1098
# Done conditional (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790))))
.L1097:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1099
.L1098:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1099:
# Done (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1096:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1104:
.quad 8
.ascii "+"
.data
.align 8
.L1103:
.quad .L1104+4
.text
.L1105:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1106
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1106:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1107:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1108
# (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799))))
# (IF (NULL? #:G1799) FALSE TRUE)
.L1114:
# (NULL? #:G1799)
# #:G1799
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1799
movq $31, %rcx
cmpq %rcx, %rax
je .L1110
# Done conditional (NULL? #:G1799)
.L1113:
# FALSE
# Done conditional FALSE
.L1112:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1799) FALSE TRUE)
.L1109:
# (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL))
# (CONS (#:G1797 (CAR #:G1799)) NIL)
# (#:G1797 (CAR #:G1799))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1799)
# #:G1799
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1799
movq -2(%rax), %rax
# Done (CAR #:G1799)
movq %rax, 16(%rcx)
# #:G1797
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1797
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1797 (CAR #:G1799))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1797 (CAR #:G1799)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL))
# (RPLACD #:G1801 #:G1800)
# #:G1801
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1801
# #:G1800
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1800
movq %rcx, 6(%rax)
# Done (RPLACD #:G1801 #:G1800)
# (SET! #:G1801 #:G1800)
# #:G1800
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1800
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1801 #:G1800)
# (#:G1798 (CDR #:G1799))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1799)
# #:G1799
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1799
movq 6(%rax), %rax
# Done (CDR #:G1799)
movq %rax, 16(%rcx)
# #:G1798
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1798
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1798 (CDR #:G1799))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))
jmp .L1111
.L1110:
movq $23, %rax
.L1111:
# Done (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799))))
addq $8, %rsp
ret
.L1108:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1115:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1116
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800))))
# (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1799 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1799 ARGS)
# (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800))
# (NULL? #:G1799)
# #:G1799
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1799
movq $31, %rcx
cmpq %rcx, %rax
jne .L1118
# Done conditional (NULL? #:G1799)
.L1117:
# NIL
movq $31, %rax
# Done NIL
jmp .L1119
.L1118:
# (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1105, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL))
# (CONS (#:G1797 (CAR #:G1799)) NIL)
# (#:G1797 (CAR #:G1799))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1799)
# #:G1799
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1799
movq -2(%rax), %rax
# Done (CAR #:G1799)
movq %rax, 16(%rcx)
# #:G1797
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1797
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1797 (CAR #:G1799))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1797 (CAR #:G1799)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL))
# (DEFINE #:G1801 #:G1800)
# #:G1800
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1800
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1801 #:G1800)
# (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799))))))
# (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))
movq 0(%rsp), %rax
movq $.L1107, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799))))))
# (#:G1798 (CDR #:G1799))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1799)
# #:G1799
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1799
movq 6(%rax), %rax
# Done (CDR #:G1799)
movq %rax, 16(%rcx)
# #:G1798
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1798
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1798 (CDR #:G1799))
# #:G1800
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1800
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)
.L1119:
# Done (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800))))
# (APPLY + EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# +
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 688(%rax), %rax
# Done +
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY + EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS))
addq $8, %rsp
ret
.L1116:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1121:
.quad 8
.ascii "-"
.data
.align 8
.L1120:
.quad .L1121+4
.text
.L1122:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1123
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1123:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1124:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1125
# (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809))))
# (IF (NULL? #:G1809) FALSE TRUE)
.L1131:
# (NULL? #:G1809)
# #:G1809
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1809
movq $31, %rcx
cmpq %rcx, %rax
je .L1127
# Done conditional (NULL? #:G1809)
.L1130:
# FALSE
# Done conditional FALSE
.L1129:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1809) FALSE TRUE)
.L1126:
# (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL))
# (CONS (#:G1807 (CAR #:G1809)) NIL)
# (#:G1807 (CAR #:G1809))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1809)
# #:G1809
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1809
movq -2(%rax), %rax
# Done (CAR #:G1809)
movq %rax, 16(%rcx)
# #:G1807
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1807
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1807 (CAR #:G1809))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1807 (CAR #:G1809)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL))
# (RPLACD #:G1811 #:G1810)
# #:G1811
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1811
# #:G1810
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1810
movq %rcx, 6(%rax)
# Done (RPLACD #:G1811 #:G1810)
# (SET! #:G1811 #:G1810)
# #:G1810
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1810
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1811 #:G1810)
# (#:G1808 (CDR #:G1809))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1809)
# #:G1809
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1809
movq 6(%rax), %rax
# Done (CDR #:G1809)
movq %rax, 16(%rcx)
# #:G1808
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1808
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1808 (CDR #:G1809))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))
jmp .L1128
.L1127:
movq $23, %rax
.L1128:
# Done (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809))))
addq $8, %rsp
ret
.L1125:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1132:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1133
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810))))
# (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1809 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1809 ARGS)
# (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810))
# (NULL? #:G1809)
# #:G1809
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1809
movq $31, %rcx
cmpq %rcx, %rax
jne .L1135
# Done conditional (NULL? #:G1809)
.L1134:
# NIL
movq $31, %rax
# Done NIL
jmp .L1136
.L1135:
# (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1122, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL))
# (CONS (#:G1807 (CAR #:G1809)) NIL)
# (#:G1807 (CAR #:G1809))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1809)
# #:G1809
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1809
movq -2(%rax), %rax
# Done (CAR #:G1809)
movq %rax, 16(%rcx)
# #:G1807
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1807
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1807 (CAR #:G1809))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1807 (CAR #:G1809)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL))
# (DEFINE #:G1811 #:G1810)
# #:G1810
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1810
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1811 #:G1810)
# (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809))))))
# (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))
movq 0(%rsp), %rax
movq $.L1124, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809))))))
# (#:G1808 (CDR #:G1809))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1809)
# #:G1809
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1809
movq 6(%rax), %rax
# Done (CDR #:G1809)
movq %rax, 16(%rcx)
# #:G1808
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1808
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1808 (CDR #:G1809))
# #:G1810
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1810
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)
.L1136:
# Done (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810))))
# (APPLY - EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# -
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 672(%rax), %rax
# Done -
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY - EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS))
addq $8, %rsp
ret
.L1133:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1138:
.quad 8
.ascii "*"
.data
.align 8
.L1137:
.quad .L1138+4
.text
.L1139:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1140
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1140:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1141:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1142
# (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819))))
# (IF (NULL? #:G1819) FALSE TRUE)
.L1148:
# (NULL? #:G1819)
# #:G1819
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1819
movq $31, %rcx
cmpq %rcx, %rax
je .L1144
# Done conditional (NULL? #:G1819)
.L1147:
# FALSE
# Done conditional FALSE
.L1146:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1819) FALSE TRUE)
.L1143:
# (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL))
# (CONS (#:G1817 (CAR #:G1819)) NIL)
# (#:G1817 (CAR #:G1819))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1819)
# #:G1819
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1819
movq -2(%rax), %rax
# Done (CAR #:G1819)
movq %rax, 16(%rcx)
# #:G1817
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1817
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1817 (CAR #:G1819))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1817 (CAR #:G1819)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL))
# (RPLACD #:G1821 #:G1820)
# #:G1821
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1821
# #:G1820
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1820
movq %rcx, 6(%rax)
# Done (RPLACD #:G1821 #:G1820)
# (SET! #:G1821 #:G1820)
# #:G1820
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1820
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1821 #:G1820)
# (#:G1818 (CDR #:G1819))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1819)
# #:G1819
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1819
movq 6(%rax), %rax
# Done (CDR #:G1819)
movq %rax, 16(%rcx)
# #:G1818
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1818
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1818 (CDR #:G1819))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))
jmp .L1145
.L1144:
movq $23, %rax
.L1145:
# Done (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819))))
addq $8, %rsp
ret
.L1142:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1149:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1150
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820))))
# (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1819 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1819 ARGS)
# (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820))
# (NULL? #:G1819)
# #:G1819
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1819
movq $31, %rcx
cmpq %rcx, %rax
jne .L1152
# Done conditional (NULL? #:G1819)
.L1151:
# NIL
movq $31, %rax
# Done NIL
jmp .L1153
.L1152:
# (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1139, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL))
# (CONS (#:G1817 (CAR #:G1819)) NIL)
# (#:G1817 (CAR #:G1819))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1819)
# #:G1819
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1819
movq -2(%rax), %rax
# Done (CAR #:G1819)
movq %rax, 16(%rcx)
# #:G1817
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1817
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1817 (CAR #:G1819))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1817 (CAR #:G1819)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL))
# (DEFINE #:G1821 #:G1820)
# #:G1820
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1820
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1821 #:G1820)
# (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819))))))
# (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))
movq 0(%rsp), %rax
movq $.L1141, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819))))))
# (#:G1818 (CDR #:G1819))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1819)
# #:G1819
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1819
movq 6(%rax), %rax
# Done (CDR #:G1819)
movq %rax, 16(%rcx)
# #:G1818
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1818
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1818 (CDR #:G1819))
# #:G1820
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1820
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)
.L1153:
# Done (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820))))
# (APPLY * EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# *
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 680(%rax), %rax
# Done *
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY * EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS))
addq $8, %rsp
ret
.L1150:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1155:
.quad 24
.ascii "rem"
.data
.align 8
.L1154:
.quad .L1155+4
.text
.L1156:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1157
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1157:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1158:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1159
# (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829))))
# (IF (NULL? #:G1829) FALSE TRUE)
.L1165:
# (NULL? #:G1829)
# #:G1829
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1829
movq $31, %rcx
cmpq %rcx, %rax
je .L1161
# Done conditional (NULL? #:G1829)
.L1164:
# FALSE
# Done conditional FALSE
.L1163:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1829) FALSE TRUE)
.L1160:
# (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL))
# (CONS (#:G1827 (CAR #:G1829)) NIL)
# (#:G1827 (CAR #:G1829))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1829)
# #:G1829
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1829
movq -2(%rax), %rax
# Done (CAR #:G1829)
movq %rax, 16(%rcx)
# #:G1827
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1827
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1827 (CAR #:G1829))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1827 (CAR #:G1829)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL))
# (RPLACD #:G1831 #:G1830)
# #:G1831
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1831
# #:G1830
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1830
movq %rcx, 6(%rax)
# Done (RPLACD #:G1831 #:G1830)
# (SET! #:G1831 #:G1830)
# #:G1830
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1830
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1831 #:G1830)
# (#:G1828 (CDR #:G1829))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1829)
# #:G1829
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1829
movq 6(%rax), %rax
# Done (CDR #:G1829)
movq %rax, 16(%rcx)
# #:G1828
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1828
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1828 (CDR #:G1829))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))
jmp .L1162
.L1161:
movq $23, %rax
.L1162:
# Done (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829))))
addq $8, %rsp
ret
.L1159:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1166:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1167
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830))))
# (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1829 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1829 ARGS)
# (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830))
# (NULL? #:G1829)
# #:G1829
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1829
movq $31, %rcx
cmpq %rcx, %rax
jne .L1169
# Done conditional (NULL? #:G1829)
.L1168:
# NIL
movq $31, %rax
# Done NIL
jmp .L1170
.L1169:
# (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1156, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL))
# (CONS (#:G1827 (CAR #:G1829)) NIL)
# (#:G1827 (CAR #:G1829))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1829)
# #:G1829
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1829
movq -2(%rax), %rax
# Done (CAR #:G1829)
movq %rax, 16(%rcx)
# #:G1827
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1827
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1827 (CAR #:G1829))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1827 (CAR #:G1829)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL))
# (DEFINE #:G1831 #:G1830)
# #:G1830
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1830
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1831 #:G1830)
# (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829))))))
# (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))
movq 0(%rsp), %rax
movq $.L1158, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829))))))
# (#:G1828 (CDR #:G1829))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1829)
# #:G1829
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1829
movq 6(%rax), %rax
# Done (CDR #:G1829)
movq %rax, 16(%rcx)
# #:G1828
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1828
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1828 (CDR #:G1829))
# #:G1830
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1830
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)
.L1170:
# Done (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830))))
# (APPLY REM EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# REM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 664(%rax), %rax
# Done REM
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY REM EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS))
addq $8, %rsp
ret
.L1167:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1172:
.quad 64
.ascii "truncate"
.data
.align 8
.L1171:
.quad .L1172+4
.text
.L1173:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1174
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1174:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1175:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1176
# (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839))))
# (IF (NULL? #:G1839) FALSE TRUE)
.L1182:
# (NULL? #:G1839)
# #:G1839
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1839
movq $31, %rcx
cmpq %rcx, %rax
je .L1178
# Done conditional (NULL? #:G1839)
.L1181:
# FALSE
# Done conditional FALSE
.L1180:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1839) FALSE TRUE)
.L1177:
# (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL))
# (CONS (#:G1837 (CAR #:G1839)) NIL)
# (#:G1837 (CAR #:G1839))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1839)
# #:G1839
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1839
movq -2(%rax), %rax
# Done (CAR #:G1839)
movq %rax, 16(%rcx)
# #:G1837
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1837
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1837 (CAR #:G1839))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1837 (CAR #:G1839)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL))
# (RPLACD #:G1841 #:G1840)
# #:G1841
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1841
# #:G1840
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1840
movq %rcx, 6(%rax)
# Done (RPLACD #:G1841 #:G1840)
# (SET! #:G1841 #:G1840)
# #:G1840
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1840
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1841 #:G1840)
# (#:G1838 (CDR #:G1839))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1839)
# #:G1839
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1839
movq 6(%rax), %rax
# Done (CDR #:G1839)
movq %rax, 16(%rcx)
# #:G1838
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1838
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1838 (CDR #:G1839))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))
jmp .L1179
.L1178:
movq $23, %rax
.L1179:
# Done (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839))))
addq $8, %rsp
ret
.L1176:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1183:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1184
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840))))
# (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1839 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1839 ARGS)
# (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840))
# (NULL? #:G1839)
# #:G1839
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1839
movq $31, %rcx
cmpq %rcx, %rax
jne .L1186
# Done conditional (NULL? #:G1839)
.L1185:
# NIL
movq $31, %rax
# Done NIL
jmp .L1187
.L1186:
# (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1173, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL))
# (CONS (#:G1837 (CAR #:G1839)) NIL)
# (#:G1837 (CAR #:G1839))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1839)
# #:G1839
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1839
movq -2(%rax), %rax
# Done (CAR #:G1839)
movq %rax, 16(%rcx)
# #:G1837
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1837
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1837 (CAR #:G1839))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1837 (CAR #:G1839)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL))
# (DEFINE #:G1841 #:G1840)
# #:G1840
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1840
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1841 #:G1840)
# (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839))))))
# (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))
movq 0(%rsp), %rax
movq $.L1175, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839))))))
# (#:G1838 (CDR #:G1839))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1839)
# #:G1839
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1839
movq 6(%rax), %rax
# Done (CDR #:G1839)
movq %rax, 16(%rcx)
# #:G1838
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1838
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1838 (CDR #:G1839))
# #:G1840
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1840
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)
.L1187:
# Done (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840))))
# (APPLY TRUNCATE EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# TRUNCATE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 656(%rax), %rax
# Done TRUNCATE
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY TRUNCATE EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS))
addq $8, %rsp
ret
.L1184:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1189:
.quad 56
.ascii "string?"
.data
.align 8
.L1188:
.quad .L1189+4
.text
.L1190:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1191
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1191:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1192:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1193
# (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849))))
# (IF (NULL? #:G1849) FALSE TRUE)
.L1199:
# (NULL? #:G1849)
# #:G1849
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1849
movq $31, %rcx
cmpq %rcx, %rax
je .L1195
# Done conditional (NULL? #:G1849)
.L1198:
# FALSE
# Done conditional FALSE
.L1197:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1849) FALSE TRUE)
.L1194:
# (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL))
# (CONS (#:G1847 (CAR #:G1849)) NIL)
# (#:G1847 (CAR #:G1849))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1849)
# #:G1849
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1849
movq -2(%rax), %rax
# Done (CAR #:G1849)
movq %rax, 16(%rcx)
# #:G1847
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1847
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1847 (CAR #:G1849))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1847 (CAR #:G1849)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL))
# (RPLACD #:G1851 #:G1850)
# #:G1851
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1851
# #:G1850
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1850
movq %rcx, 6(%rax)
# Done (RPLACD #:G1851 #:G1850)
# (SET! #:G1851 #:G1850)
# #:G1850
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1850
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1851 #:G1850)
# (#:G1848 (CDR #:G1849))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1849)
# #:G1849
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1849
movq 6(%rax), %rax
# Done (CDR #:G1849)
movq %rax, 16(%rcx)
# #:G1848
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1848
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1848 (CDR #:G1849))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))
jmp .L1196
.L1195:
movq $23, %rax
.L1196:
# Done (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849))))
addq $8, %rsp
ret
.L1193:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1200:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1201
# (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STRING?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 648(%rax), %rax
# Done STRING?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1849 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1849 ARGS)
# (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850))
# (NULL? #:G1849)
# #:G1849
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1849
movq $31, %rcx
cmpq %rcx, %rax
jne .L1206
# Done conditional (NULL? #:G1849)
.L1205:
# NIL
movq $31, %rax
# Done NIL
jmp .L1207
.L1206:
# (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1190, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL))
# (CONS (#:G1847 (CAR #:G1849)) NIL)
# (#:G1847 (CAR #:G1849))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1849)
# #:G1849
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1849
movq -2(%rax), %rax
# Done (CAR #:G1849)
movq %rax, 16(%rcx)
# #:G1847
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1847
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1847 (CAR #:G1849))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1847 (CAR #:G1849)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL))
# (DEFINE #:G1851 #:G1850)
# #:G1850
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1850
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1851 #:G1850)
# (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849))))))
# (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))
movq 0(%rsp), %rax
movq $.L1192, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849))))))
# (#:G1848 (CDR #:G1849))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1849)
# #:G1849
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1849
movq 6(%rax), %rax
# Done (CDR #:G1849)
movq %rax, 16(%rcx)
# #:G1848
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1848
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1848 (CDR #:G1849))
# #:G1850
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1850
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)
.L1207:
# Done (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1203
# Done conditional (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850))))
.L1202:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1204
.L1203:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1204:
# Done (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1201:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1209:
.quad 88
.ascii "make-string"
.data
.align 8
.L1208:
.quad .L1209+4
.text
.L1210:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1211
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1211:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1212:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1213
# (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859))))
# (IF (NULL? #:G1859) FALSE TRUE)
.L1219:
# (NULL? #:G1859)
# #:G1859
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1859
movq $31, %rcx
cmpq %rcx, %rax
je .L1215
# Done conditional (NULL? #:G1859)
.L1218:
# FALSE
# Done conditional FALSE
.L1217:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1859) FALSE TRUE)
.L1214:
# (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL))
# (CONS (#:G1857 (CAR #:G1859)) NIL)
# (#:G1857 (CAR #:G1859))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1859)
# #:G1859
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1859
movq -2(%rax), %rax
# Done (CAR #:G1859)
movq %rax, 16(%rcx)
# #:G1857
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1857
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1857 (CAR #:G1859))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1857 (CAR #:G1859)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL))
# (RPLACD #:G1861 #:G1860)
# #:G1861
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1861
# #:G1860
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1860
movq %rcx, 6(%rax)
# Done (RPLACD #:G1861 #:G1860)
# (SET! #:G1861 #:G1860)
# #:G1860
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1860
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1861 #:G1860)
# (#:G1858 (CDR #:G1859))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1859)
# #:G1859
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1859
movq 6(%rax), %rax
# Done (CDR #:G1859)
movq %rax, 16(%rcx)
# #:G1858
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1858
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1858 (CDR #:G1859))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))
jmp .L1216
.L1215:
movq $23, %rax
.L1216:
# Done (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859))))
addq $8, %rsp
ret
.L1213:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1220:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1221
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860))))
# (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1859 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1859 ARGS)
# (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860))
# (NULL? #:G1859)
# #:G1859
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1859
movq $31, %rcx
cmpq %rcx, %rax
jne .L1223
# Done conditional (NULL? #:G1859)
.L1222:
# NIL
movq $31, %rax
# Done NIL
jmp .L1224
.L1223:
# (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1210, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL))
# (CONS (#:G1857 (CAR #:G1859)) NIL)
# (#:G1857 (CAR #:G1859))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1859)
# #:G1859
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1859
movq -2(%rax), %rax
# Done (CAR #:G1859)
movq %rax, 16(%rcx)
# #:G1857
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1857
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1857 (CAR #:G1859))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1857 (CAR #:G1859)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL))
# (DEFINE #:G1861 #:G1860)
# #:G1860
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1860
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1861 #:G1860)
# (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859))))))
# (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))
movq 0(%rsp), %rax
movq $.L1212, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859))))))
# (#:G1858 (CDR #:G1859))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1859)
# #:G1859
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1859
movq 6(%rax), %rax
# Done (CDR #:G1859)
movq %rax, 16(%rcx)
# #:G1858
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1858
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1858 (CDR #:G1859))
# #:G1860
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1860
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)
.L1224:
# Done (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860))))
# (APPLY MAKE-STRING EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# MAKE-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 640(%rax), %rax
# Done MAKE-STRING
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY MAKE-STRING EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS))
addq $8, %rsp
ret
.L1221:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1226:
.quad 104
.ascii "string-length"
.data
.align 8
.L1225:
.quad .L1226+4
.text
.L1227:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1228
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1228:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1229:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1230
# (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869))))
# (IF (NULL? #:G1869) FALSE TRUE)
.L1236:
# (NULL? #:G1869)
# #:G1869
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1869
movq $31, %rcx
cmpq %rcx, %rax
je .L1232
# Done conditional (NULL? #:G1869)
.L1235:
# FALSE
# Done conditional FALSE
.L1234:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1869) FALSE TRUE)
.L1231:
# (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL))
# (CONS (#:G1867 (CAR #:G1869)) NIL)
# (#:G1867 (CAR #:G1869))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1869)
# #:G1869
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1869
movq -2(%rax), %rax
# Done (CAR #:G1869)
movq %rax, 16(%rcx)
# #:G1867
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1867
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1867 (CAR #:G1869))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1867 (CAR #:G1869)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL))
# (RPLACD #:G1871 #:G1870)
# #:G1871
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1871
# #:G1870
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1870
movq %rcx, 6(%rax)
# Done (RPLACD #:G1871 #:G1870)
# (SET! #:G1871 #:G1870)
# #:G1870
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1870
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1871 #:G1870)
# (#:G1868 (CDR #:G1869))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1869)
# #:G1869
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1869
movq 6(%rax), %rax
# Done (CDR #:G1869)
movq %rax, 16(%rcx)
# #:G1868
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1868
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1868 (CDR #:G1869))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))
jmp .L1233
.L1232:
movq $23, %rax
.L1233:
# Done (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869))))
addq $8, %rsp
ret
.L1230:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1237:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1238
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870))))
# (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1869 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1869 ARGS)
# (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870))
# (NULL? #:G1869)
# #:G1869
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1869
movq $31, %rcx
cmpq %rcx, %rax
jne .L1240
# Done conditional (NULL? #:G1869)
.L1239:
# NIL
movq $31, %rax
# Done NIL
jmp .L1241
.L1240:
# (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1227, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL))
# (CONS (#:G1867 (CAR #:G1869)) NIL)
# (#:G1867 (CAR #:G1869))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1869)
# #:G1869
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1869
movq -2(%rax), %rax
# Done (CAR #:G1869)
movq %rax, 16(%rcx)
# #:G1867
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1867
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1867 (CAR #:G1869))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1867 (CAR #:G1869)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL))
# (DEFINE #:G1871 #:G1870)
# #:G1870
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1870
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1871 #:G1870)
# (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869))))))
# (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))
movq 0(%rsp), %rax
movq $.L1229, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869))))))
# (#:G1868 (CDR #:G1869))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1869)
# #:G1869
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1869
movq 6(%rax), %rax
# Done (CDR #:G1869)
movq %rax, 16(%rcx)
# #:G1868
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1868
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1868 (CDR #:G1869))
# #:G1870
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1870
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)
.L1241:
# Done (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870))))
# (APPLY STRING-LENGTH EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STRING-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 632(%rax), %rax
# Done STRING-LENGTH
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY STRING-LENGTH EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS))
addq $8, %rsp
ret
.L1238:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1243:
.quad 80
.ascii "string-ref"
.data
.align 8
.L1242:
.quad .L1243+4
.text
.L1244:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1245
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1245:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1246:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1247
# (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879))))
# (IF (NULL? #:G1879) FALSE TRUE)
.L1253:
# (NULL? #:G1879)
# #:G1879
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1879
movq $31, %rcx
cmpq %rcx, %rax
je .L1249
# Done conditional (NULL? #:G1879)
.L1252:
# FALSE
# Done conditional FALSE
.L1251:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1879) FALSE TRUE)
.L1248:
# (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL))
# (CONS (#:G1877 (CAR #:G1879)) NIL)
# (#:G1877 (CAR #:G1879))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1879)
# #:G1879
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1879
movq -2(%rax), %rax
# Done (CAR #:G1879)
movq %rax, 16(%rcx)
# #:G1877
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1877
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1877 (CAR #:G1879))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1877 (CAR #:G1879)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL))
# (RPLACD #:G1881 #:G1880)
# #:G1881
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1881
# #:G1880
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1880
movq %rcx, 6(%rax)
# Done (RPLACD #:G1881 #:G1880)
# (SET! #:G1881 #:G1880)
# #:G1880
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1880
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1881 #:G1880)
# (#:G1878 (CDR #:G1879))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1879)
# #:G1879
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1879
movq 6(%rax), %rax
# Done (CDR #:G1879)
movq %rax, 16(%rcx)
# #:G1878
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1878
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1878 (CDR #:G1879))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))
jmp .L1250
.L1249:
movq $23, %rax
.L1250:
# Done (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879))))
addq $8, %rsp
ret
.L1247:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1254:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1255
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880))))
# (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1879 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1879 ARGS)
# (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880))
# (NULL? #:G1879)
# #:G1879
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1879
movq $31, %rcx
cmpq %rcx, %rax
jne .L1257
# Done conditional (NULL? #:G1879)
.L1256:
# NIL
movq $31, %rax
# Done NIL
jmp .L1258
.L1257:
# (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1244, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL))
# (CONS (#:G1877 (CAR #:G1879)) NIL)
# (#:G1877 (CAR #:G1879))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1879)
# #:G1879
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1879
movq -2(%rax), %rax
# Done (CAR #:G1879)
movq %rax, 16(%rcx)
# #:G1877
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1877
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1877 (CAR #:G1879))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1877 (CAR #:G1879)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL))
# (DEFINE #:G1881 #:G1880)
# #:G1880
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1880
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1881 #:G1880)
# (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879))))))
# (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))
movq 0(%rsp), %rax
movq $.L1246, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879))))))
# (#:G1878 (CDR #:G1879))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1879)
# #:G1879
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1879
movq 6(%rax), %rax
# Done (CDR #:G1879)
movq %rax, 16(%rcx)
# #:G1878
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1878
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1878 (CDR #:G1879))
# #:G1880
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1880
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)
.L1258:
# Done (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880))))
# (APPLY STRING-REF EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STRING-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 536(%rax), %rax
# Done STRING-REF
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY STRING-REF EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS))
addq $8, %rsp
ret
.L1255:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1260:
.quad 88
.ascii "string-set!"
.data
.align 8
.L1259:
.quad .L1260+4
.text
.L1261:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1262
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1262:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1263:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1264
# (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889))))
# (IF (NULL? #:G1889) FALSE TRUE)
.L1270:
# (NULL? #:G1889)
# #:G1889
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1889
movq $31, %rcx
cmpq %rcx, %rax
je .L1266
# Done conditional (NULL? #:G1889)
.L1269:
# FALSE
# Done conditional FALSE
.L1268:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1889) FALSE TRUE)
.L1265:
# (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL))
# (CONS (#:G1887 (CAR #:G1889)) NIL)
# (#:G1887 (CAR #:G1889))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1889)
# #:G1889
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1889
movq -2(%rax), %rax
# Done (CAR #:G1889)
movq %rax, 16(%rcx)
# #:G1887
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1887
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1887 (CAR #:G1889))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1887 (CAR #:G1889)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL))
# (RPLACD #:G1891 #:G1890)
# #:G1891
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1891
# #:G1890
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1890
movq %rcx, 6(%rax)
# Done (RPLACD #:G1891 #:G1890)
# (SET! #:G1891 #:G1890)
# #:G1890
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1890
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1891 #:G1890)
# (#:G1888 (CDR #:G1889))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1889)
# #:G1889
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1889
movq 6(%rax), %rax
# Done (CDR #:G1889)
movq %rax, 16(%rcx)
# #:G1888
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1888
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1888 (CDR #:G1889))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))
jmp .L1267
.L1266:
movq $23, %rax
.L1267:
# Done (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889))))
addq $8, %rsp
ret
.L1264:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1271:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1272
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890))))
# (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1889 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1889 ARGS)
# (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890))
# (NULL? #:G1889)
# #:G1889
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1889
movq $31, %rcx
cmpq %rcx, %rax
jne .L1274
# Done conditional (NULL? #:G1889)
.L1273:
# NIL
movq $31, %rax
# Done NIL
jmp .L1275
.L1274:
# (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1261, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL))
# (CONS (#:G1887 (CAR #:G1889)) NIL)
# (#:G1887 (CAR #:G1889))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1889)
# #:G1889
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1889
movq -2(%rax), %rax
# Done (CAR #:G1889)
movq %rax, 16(%rcx)
# #:G1887
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1887
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1887 (CAR #:G1889))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1887 (CAR #:G1889)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL))
# (DEFINE #:G1891 #:G1890)
# #:G1890
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1890
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1891 #:G1890)
# (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889))))))
# (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))
movq 0(%rsp), %rax
movq $.L1263, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889))))))
# (#:G1888 (CDR #:G1889))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1889)
# #:G1889
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1889
movq 6(%rax), %rax
# Done (CDR #:G1889)
movq %rax, 16(%rcx)
# #:G1888
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1888
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1888 (CDR #:G1889))
# #:G1890
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1890
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)
.L1275:
# Done (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890))))
# (APPLY STRING-SET! EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STRING-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 528(%rax), %rax
# Done STRING-SET!
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY STRING-SET! EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS))
addq $8, %rsp
ret
.L1272:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1277:
.quad 88
.ascii "string-copy"
.data
.align 8
.L1276:
.quad .L1277+4
.text
.L1278:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1279
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1279:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1280:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1281
# (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899))))
# (IF (NULL? #:G1899) FALSE TRUE)
.L1287:
# (NULL? #:G1899)
# #:G1899
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1899
movq $31, %rcx
cmpq %rcx, %rax
je .L1283
# Done conditional (NULL? #:G1899)
.L1286:
# FALSE
# Done conditional FALSE
.L1285:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1899) FALSE TRUE)
.L1282:
# (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL))
# (CONS (#:G1897 (CAR #:G1899)) NIL)
# (#:G1897 (CAR #:G1899))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1899)
# #:G1899
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1899
movq -2(%rax), %rax
# Done (CAR #:G1899)
movq %rax, 16(%rcx)
# #:G1897
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1897
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1897 (CAR #:G1899))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1897 (CAR #:G1899)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL))
# (RPLACD #:G1901 #:G1900)
# #:G1901
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1901
# #:G1900
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1900
movq %rcx, 6(%rax)
# Done (RPLACD #:G1901 #:G1900)
# (SET! #:G1901 #:G1900)
# #:G1900
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1900
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1901 #:G1900)
# (#:G1898 (CDR #:G1899))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1899)
# #:G1899
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1899
movq 6(%rax), %rax
# Done (CDR #:G1899)
movq %rax, 16(%rcx)
# #:G1898
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1898
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1898 (CDR #:G1899))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))
jmp .L1284
.L1283:
movq $23, %rax
.L1284:
# Done (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899))))
addq $8, %rsp
ret
.L1281:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1288:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1289
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900))))
# (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1899 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1899 ARGS)
# (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900))
# (NULL? #:G1899)
# #:G1899
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1899
movq $31, %rcx
cmpq %rcx, %rax
jne .L1291
# Done conditional (NULL? #:G1899)
.L1290:
# NIL
movq $31, %rax
# Done NIL
jmp .L1292
.L1291:
# (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1278, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL))
# (CONS (#:G1897 (CAR #:G1899)) NIL)
# (#:G1897 (CAR #:G1899))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1899)
# #:G1899
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1899
movq -2(%rax), %rax
# Done (CAR #:G1899)
movq %rax, 16(%rcx)
# #:G1897
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1897
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1897 (CAR #:G1899))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1897 (CAR #:G1899)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL))
# (DEFINE #:G1901 #:G1900)
# #:G1900
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1900
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1901 #:G1900)
# (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899))))))
# (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))
movq 0(%rsp), %rax
movq $.L1280, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899))))))
# (#:G1898 (CDR #:G1899))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1899)
# #:G1899
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1899
movq 6(%rax), %rax
# Done (CDR #:G1899)
movq %rax, 16(%rcx)
# #:G1898
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1898
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1898 (CDR #:G1899))
# #:G1900
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1900
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)
.L1292:
# Done (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900))))
# (APPLY STRING-COPY EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STRING-COPY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 520(%rax), %rax
# Done STRING-COPY
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY STRING-COPY EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS))
addq $8, %rsp
ret
.L1289:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1294:
.quad 56
.ascii "vector?"
.data
.align 8
.L1293:
.quad .L1294+4
.text
.L1295:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1296
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1296:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1297:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1298
# (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909))))
# (IF (NULL? #:G1909) FALSE TRUE)
.L1304:
# (NULL? #:G1909)
# #:G1909
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1909
movq $31, %rcx
cmpq %rcx, %rax
je .L1300
# Done conditional (NULL? #:G1909)
.L1303:
# FALSE
# Done conditional FALSE
.L1302:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1909) FALSE TRUE)
.L1299:
# (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL))
# (CONS (#:G1907 (CAR #:G1909)) NIL)
# (#:G1907 (CAR #:G1909))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1909)
# #:G1909
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1909
movq -2(%rax), %rax
# Done (CAR #:G1909)
movq %rax, 16(%rcx)
# #:G1907
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1907
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1907 (CAR #:G1909))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1907 (CAR #:G1909)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL))
# (RPLACD #:G1911 #:G1910)
# #:G1911
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1911
# #:G1910
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1910
movq %rcx, 6(%rax)
# Done (RPLACD #:G1911 #:G1910)
# (SET! #:G1911 #:G1910)
# #:G1910
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1910
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1911 #:G1910)
# (#:G1908 (CDR #:G1909))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1909)
# #:G1909
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1909
movq 6(%rax), %rax
# Done (CDR #:G1909)
movq %rax, 16(%rcx)
# #:G1908
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1908
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1908 (CDR #:G1909))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))
jmp .L1301
.L1300:
movq $23, %rax
.L1301:
# Done (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909))))
addq $8, %rsp
ret
.L1298:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1305:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1306
# (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE))
# (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910))))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VECTOR?
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 624(%rax), %rax
# Done VECTOR?
movq %rax, 16(%rcx)
# (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))
subq $24, %rbx
movq 8(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1909 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1909 ARGS)
# (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910))
# (NULL? #:G1909)
# #:G1909
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1909
movq $31, %rcx
cmpq %rcx, %rax
jne .L1311
# Done conditional (NULL? #:G1909)
.L1310:
# NIL
movq $31, %rax
# Done NIL
jmp .L1312
.L1311:
# (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1295, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL))
# (CONS (#:G1907 (CAR #:G1909)) NIL)
# (#:G1907 (CAR #:G1909))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1909)
# #:G1909
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1909
movq -2(%rax), %rax
# Done (CAR #:G1909)
movq %rax, 16(%rcx)
# #:G1907
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1907
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1907 (CAR #:G1909))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1907 (CAR #:G1909)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL))
# (DEFINE #:G1911 #:G1910)
# #:G1910
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1910
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1911 #:G1910)
# (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909))))))
# (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))
movq 0(%rsp), %rax
movq $.L1297, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909))))))
# (#:G1908 (CDR #:G1909))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1909)
# #:G1909
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1909
movq 6(%rax), %rax
# Done (CDR #:G1909)
movq %rax, 16(%rcx)
# #:G1908
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1908
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1908 (CDR #:G1909))
# #:G1910
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1910
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)
.L1312:
# Done (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1308
# Done conditional (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910))))
.L1307:
# (QUOTE TRUE)
movq $15, %rax
# Done (QUOTE TRUE)
jmp .L1309
.L1308:
# (QUOTE FALSE)
movq $7, %rax
# Done (QUOTE FALSE)
.L1309:
# Done (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE))
addq $8, %rsp
ret
.L1306:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1314:
.quad 88
.ascii "make-vector"
.data
.align 8
.L1313:
.quad .L1314+4
.text
.L1315:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1316
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1316:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1317:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1318
# (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919))))
# (IF (NULL? #:G1919) FALSE TRUE)
.L1324:
# (NULL? #:G1919)
# #:G1919
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1919
movq $31, %rcx
cmpq %rcx, %rax
je .L1320
# Done conditional (NULL? #:G1919)
.L1323:
# FALSE
# Done conditional FALSE
.L1322:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1919) FALSE TRUE)
.L1319:
# (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL))
# (CONS (#:G1917 (CAR #:G1919)) NIL)
# (#:G1917 (CAR #:G1919))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1919)
# #:G1919
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1919
movq -2(%rax), %rax
# Done (CAR #:G1919)
movq %rax, 16(%rcx)
# #:G1917
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1917
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1917 (CAR #:G1919))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1917 (CAR #:G1919)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL))
# (RPLACD #:G1921 #:G1920)
# #:G1921
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1921
# #:G1920
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1920
movq %rcx, 6(%rax)
# Done (RPLACD #:G1921 #:G1920)
# (SET! #:G1921 #:G1920)
# #:G1920
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1920
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1921 #:G1920)
# (#:G1918 (CDR #:G1919))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1919)
# #:G1919
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1919
movq 6(%rax), %rax
# Done (CDR #:G1919)
movq %rax, 16(%rcx)
# #:G1918
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1918
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1918 (CDR #:G1919))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))
jmp .L1321
.L1320:
movq $23, %rax
.L1321:
# Done (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919))))
addq $8, %rsp
ret
.L1318:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1325:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1326
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920))))
# (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1919 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1919 ARGS)
# (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920))
# (NULL? #:G1919)
# #:G1919
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1919
movq $31, %rcx
cmpq %rcx, %rax
jne .L1328
# Done conditional (NULL? #:G1919)
.L1327:
# NIL
movq $31, %rax
# Done NIL
jmp .L1329
.L1328:
# (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1315, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL))
# (CONS (#:G1917 (CAR #:G1919)) NIL)
# (#:G1917 (CAR #:G1919))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1919)
# #:G1919
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1919
movq -2(%rax), %rax
# Done (CAR #:G1919)
movq %rax, 16(%rcx)
# #:G1917
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1917
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1917 (CAR #:G1919))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1917 (CAR #:G1919)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL))
# (DEFINE #:G1921 #:G1920)
# #:G1920
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1920
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1921 #:G1920)
# (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919))))))
# (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))
movq 0(%rsp), %rax
movq $.L1317, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919))))))
# (#:G1918 (CDR #:G1919))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1919)
# #:G1919
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1919
movq 6(%rax), %rax
# Done (CDR #:G1919)
movq %rax, 16(%rcx)
# #:G1918
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1918
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1918 (CDR #:G1919))
# #:G1920
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1920
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)
.L1329:
# Done (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920))))
# (APPLY MAKE-VECTOR EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# MAKE-VECTOR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 616(%rax), %rax
# Done MAKE-VECTOR
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY MAKE-VECTOR EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS))
addq $8, %rsp
ret
.L1326:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1331:
.quad 104
.ascii "vector-length"
.data
.align 8
.L1330:
.quad .L1331+4
.text
.L1332:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1333
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1333:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1334:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1335
# (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929))))
# (IF (NULL? #:G1929) FALSE TRUE)
.L1341:
# (NULL? #:G1929)
# #:G1929
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1929
movq $31, %rcx
cmpq %rcx, %rax
je .L1337
# Done conditional (NULL? #:G1929)
.L1340:
# FALSE
# Done conditional FALSE
.L1339:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1929) FALSE TRUE)
.L1336:
# (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL))
# (CONS (#:G1927 (CAR #:G1929)) NIL)
# (#:G1927 (CAR #:G1929))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1929)
# #:G1929
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1929
movq -2(%rax), %rax
# Done (CAR #:G1929)
movq %rax, 16(%rcx)
# #:G1927
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1927
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1927 (CAR #:G1929))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1927 (CAR #:G1929)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL))
# (RPLACD #:G1931 #:G1930)
# #:G1931
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1931
# #:G1930
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1930
movq %rcx, 6(%rax)
# Done (RPLACD #:G1931 #:G1930)
# (SET! #:G1931 #:G1930)
# #:G1930
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1930
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1931 #:G1930)
# (#:G1928 (CDR #:G1929))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1929)
# #:G1929
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1929
movq 6(%rax), %rax
# Done (CDR #:G1929)
movq %rax, 16(%rcx)
# #:G1928
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1928
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1928 (CDR #:G1929))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))
jmp .L1338
.L1337:
movq $23, %rax
.L1338:
# Done (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929))))
addq $8, %rsp
ret
.L1335:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1342:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1343
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930))))
# (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1929 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1929 ARGS)
# (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930))
# (NULL? #:G1929)
# #:G1929
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1929
movq $31, %rcx
cmpq %rcx, %rax
jne .L1345
# Done conditional (NULL? #:G1929)
.L1344:
# NIL
movq $31, %rax
# Done NIL
jmp .L1346
.L1345:
# (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1332, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL))
# (CONS (#:G1927 (CAR #:G1929)) NIL)
# (#:G1927 (CAR #:G1929))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1929)
# #:G1929
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1929
movq -2(%rax), %rax
# Done (CAR #:G1929)
movq %rax, 16(%rcx)
# #:G1927
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1927
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1927 (CAR #:G1929))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1927 (CAR #:G1929)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL))
# (DEFINE #:G1931 #:G1930)
# #:G1930
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1930
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1931 #:G1930)
# (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929))))))
# (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))
movq 0(%rsp), %rax
movq $.L1334, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929))))))
# (#:G1928 (CDR #:G1929))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1929)
# #:G1929
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1929
movq 6(%rax), %rax
# Done (CDR #:G1929)
movq %rax, 16(%rcx)
# #:G1928
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1928
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1928 (CDR #:G1929))
# #:G1930
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1930
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)
.L1346:
# Done (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930))))
# (APPLY VECTOR-LENGTH EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VECTOR-LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 608(%rax), %rax
# Done VECTOR-LENGTH
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY VECTOR-LENGTH EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS))
addq $8, %rsp
ret
.L1343:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1348:
.quad 80
.ascii "vector-ref"
.data
.align 8
.L1347:
.quad .L1348+4
.text
.L1349:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1350
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1350:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1351:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1352
# (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939))))
# (IF (NULL? #:G1939) FALSE TRUE)
.L1358:
# (NULL? #:G1939)
# #:G1939
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1939
movq $31, %rcx
cmpq %rcx, %rax
je .L1354
# Done conditional (NULL? #:G1939)
.L1357:
# FALSE
# Done conditional FALSE
.L1356:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1939) FALSE TRUE)
.L1353:
# (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL))
# (CONS (#:G1937 (CAR #:G1939)) NIL)
# (#:G1937 (CAR #:G1939))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1939)
# #:G1939
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1939
movq -2(%rax), %rax
# Done (CAR #:G1939)
movq %rax, 16(%rcx)
# #:G1937
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1937
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1937 (CAR #:G1939))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1937 (CAR #:G1939)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL))
# (RPLACD #:G1941 #:G1940)
# #:G1941
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1941
# #:G1940
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1940
movq %rcx, 6(%rax)
# Done (RPLACD #:G1941 #:G1940)
# (SET! #:G1941 #:G1940)
# #:G1940
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1940
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1941 #:G1940)
# (#:G1938 (CDR #:G1939))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1939)
# #:G1939
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1939
movq 6(%rax), %rax
# Done (CDR #:G1939)
movq %rax, 16(%rcx)
# #:G1938
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1938
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1938 (CDR #:G1939))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))
jmp .L1355
.L1354:
movq $23, %rax
.L1355:
# Done (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939))))
addq $8, %rsp
ret
.L1352:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1359:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1360
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940))))
# (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1939 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1939 ARGS)
# (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940))
# (NULL? #:G1939)
# #:G1939
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1939
movq $31, %rcx
cmpq %rcx, %rax
jne .L1362
# Done conditional (NULL? #:G1939)
.L1361:
# NIL
movq $31, %rax
# Done NIL
jmp .L1363
.L1362:
# (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1349, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL))
# (CONS (#:G1937 (CAR #:G1939)) NIL)
# (#:G1937 (CAR #:G1939))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1939)
# #:G1939
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1939
movq -2(%rax), %rax
# Done (CAR #:G1939)
movq %rax, 16(%rcx)
# #:G1937
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1937
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1937 (CAR #:G1939))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1937 (CAR #:G1939)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL))
# (DEFINE #:G1941 #:G1940)
# #:G1940
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1940
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1941 #:G1940)
# (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939))))))
# (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))
movq 0(%rsp), %rax
movq $.L1351, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939))))))
# (#:G1938 (CDR #:G1939))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1939)
# #:G1939
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1939
movq 6(%rax), %rax
# Done (CDR #:G1939)
movq %rax, 16(%rcx)
# #:G1938
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1938
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1938 (CDR #:G1939))
# #:G1940
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1940
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)
.L1363:
# Done (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940))))
# (APPLY VECTOR-REF EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VECTOR-REF
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 496(%rax), %rax
# Done VECTOR-REF
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY VECTOR-REF EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS))
addq $8, %rsp
ret
.L1360:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1365:
.quad 88
.ascii "vector-set!"
.data
.align 8
.L1364:
.quad .L1365+4
.text
.L1366:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1367
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1367:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1368:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1369
# (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949))))
# (IF (NULL? #:G1949) FALSE TRUE)
.L1375:
# (NULL? #:G1949)
# #:G1949
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1949
movq $31, %rcx
cmpq %rcx, %rax
je .L1371
# Done conditional (NULL? #:G1949)
.L1374:
# FALSE
# Done conditional FALSE
.L1373:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1949) FALSE TRUE)
.L1370:
# (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL))
# (CONS (#:G1947 (CAR #:G1949)) NIL)
# (#:G1947 (CAR #:G1949))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1949)
# #:G1949
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1949
movq -2(%rax), %rax
# Done (CAR #:G1949)
movq %rax, 16(%rcx)
# #:G1947
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1947
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1947 (CAR #:G1949))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1947 (CAR #:G1949)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL))
# (RPLACD #:G1951 #:G1950)
# #:G1951
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1951
# #:G1950
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1950
movq %rcx, 6(%rax)
# Done (RPLACD #:G1951 #:G1950)
# (SET! #:G1951 #:G1950)
# #:G1950
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1950
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1951 #:G1950)
# (#:G1948 (CDR #:G1949))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1949)
# #:G1949
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1949
movq 6(%rax), %rax
# Done (CDR #:G1949)
movq %rax, 16(%rcx)
# #:G1948
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1948
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1948 (CDR #:G1949))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))
jmp .L1372
.L1371:
movq $23, %rax
.L1372:
# Done (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949))))
addq $8, %rsp
ret
.L1369:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1376:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1377
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950))))
# (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1949 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1949 ARGS)
# (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950))
# (NULL? #:G1949)
# #:G1949
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1949
movq $31, %rcx
cmpq %rcx, %rax
jne .L1379
# Done conditional (NULL? #:G1949)
.L1378:
# NIL
movq $31, %rax
# Done NIL
jmp .L1380
.L1379:
# (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1366, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL))
# (CONS (#:G1947 (CAR #:G1949)) NIL)
# (#:G1947 (CAR #:G1949))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1949)
# #:G1949
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1949
movq -2(%rax), %rax
# Done (CAR #:G1949)
movq %rax, 16(%rcx)
# #:G1947
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1947
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1947 (CAR #:G1949))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1947 (CAR #:G1949)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL))
# (DEFINE #:G1951 #:G1950)
# #:G1950
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1950
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1951 #:G1950)
# (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949))))))
# (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))
movq 0(%rsp), %rax
movq $.L1368, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949))))))
# (#:G1948 (CDR #:G1949))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1949)
# #:G1949
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1949
movq 6(%rax), %rax
# Done (CDR #:G1949)
movq %rax, 16(%rcx)
# #:G1948
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1948
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1948 (CDR #:G1949))
# #:G1950
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1950
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)
.L1380:
# Done (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950))))
# (APPLY VECTOR-SET! EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VECTOR-SET!
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 488(%rax), %rax
# Done VECTOR-SET!
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY VECTOR-SET! EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS))
addq $8, %rsp
ret
.L1377:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1382:
.quad 88
.ascii "vector-copy"
.data
.align 8
.L1381:
.quad .L1382+4
.text
.L1383:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1384
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1384:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1385:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1386
# (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959))))
# (IF (NULL? #:G1959) FALSE TRUE)
.L1392:
# (NULL? #:G1959)
# #:G1959
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1959
movq $31, %rcx
cmpq %rcx, %rax
je .L1388
# Done conditional (NULL? #:G1959)
.L1391:
# FALSE
# Done conditional FALSE
.L1390:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1959) FALSE TRUE)
.L1387:
# (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL))
# (CONS (#:G1957 (CAR #:G1959)) NIL)
# (#:G1957 (CAR #:G1959))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1959)
# #:G1959
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1959
movq -2(%rax), %rax
# Done (CAR #:G1959)
movq %rax, 16(%rcx)
# #:G1957
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1957
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1957 (CAR #:G1959))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1957 (CAR #:G1959)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL))
# (RPLACD #:G1961 #:G1960)
# #:G1961
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1961
# #:G1960
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1960
movq %rcx, 6(%rax)
# Done (RPLACD #:G1961 #:G1960)
# (SET! #:G1961 #:G1960)
# #:G1960
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1960
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1961 #:G1960)
# (#:G1958 (CDR #:G1959))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1959)
# #:G1959
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1959
movq 6(%rax), %rax
# Done (CDR #:G1959)
movq %rax, 16(%rcx)
# #:G1958
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1958
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1958 (CDR #:G1959))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))
jmp .L1389
.L1388:
movq $23, %rax
.L1389:
# Done (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959))))
addq $8, %rsp
ret
.L1386:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1393:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1394
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960))))
# (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1959 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1959 ARGS)
# (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960))
# (NULL? #:G1959)
# #:G1959
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1959
movq $31, %rcx
cmpq %rcx, %rax
jne .L1396
# Done conditional (NULL? #:G1959)
.L1395:
# NIL
movq $31, %rax
# Done NIL
jmp .L1397
.L1396:
# (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1383, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL))
# (CONS (#:G1957 (CAR #:G1959)) NIL)
# (#:G1957 (CAR #:G1959))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1959)
# #:G1959
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1959
movq -2(%rax), %rax
# Done (CAR #:G1959)
movq %rax, 16(%rcx)
# #:G1957
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1957
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1957 (CAR #:G1959))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1957 (CAR #:G1959)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL))
# (DEFINE #:G1961 #:G1960)
# #:G1960
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1960
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1961 #:G1960)
# (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959))))))
# (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))
movq 0(%rsp), %rax
movq $.L1385, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959))))))
# (#:G1958 (CDR #:G1959))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1959)
# #:G1959
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1959
movq 6(%rax), %rax
# Done (CDR #:G1959)
movq %rax, 16(%rcx)
# #:G1958
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1958
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1958 (CDR #:G1959))
# #:G1960
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1960
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)
.L1397:
# Done (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960))))
# (APPLY VECTOR-COPY EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# VECTOR-COPY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 480(%rax), %rax
# Done VECTOR-COPY
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY VECTOR-COPY EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS))
addq $8, %rsp
ret
.L1394:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1399:
.quad 48
.ascii "stdout"
.data
.align 8
.L1398:
.quad .L1399+4
.text
.L1400:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1401
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1401:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1402:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1403
# (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969))))
# (IF (NULL? #:G1969) FALSE TRUE)
.L1409:
# (NULL? #:G1969)
# #:G1969
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1969
movq $31, %rcx
cmpq %rcx, %rax
je .L1405
# Done conditional (NULL? #:G1969)
.L1408:
# FALSE
# Done conditional FALSE
.L1407:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1969) FALSE TRUE)
.L1404:
# (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL))
# (CONS (#:G1967 (CAR #:G1969)) NIL)
# (#:G1967 (CAR #:G1969))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1969)
# #:G1969
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1969
movq -2(%rax), %rax
# Done (CAR #:G1969)
movq %rax, 16(%rcx)
# #:G1967
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1967
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1967 (CAR #:G1969))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1967 (CAR #:G1969)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL))
# (RPLACD #:G1971 #:G1970)
# #:G1971
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1971
# #:G1970
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1970
movq %rcx, 6(%rax)
# Done (RPLACD #:G1971 #:G1970)
# (SET! #:G1971 #:G1970)
# #:G1970
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1970
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1971 #:G1970)
# (#:G1968 (CDR #:G1969))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1969)
# #:G1969
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1969
movq 6(%rax), %rax
# Done (CDR #:G1969)
movq %rax, 16(%rcx)
# #:G1968
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1968
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1968 (CDR #:G1969))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))
jmp .L1406
.L1405:
movq $23, %rax
.L1406:
# Done (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969))))
addq $8, %rsp
ret
.L1403:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1410:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1411
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970))))
# (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1969 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1969 ARGS)
# (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970))
# (NULL? #:G1969)
# #:G1969
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1969
movq $31, %rcx
cmpq %rcx, %rax
jne .L1413
# Done conditional (NULL? #:G1969)
.L1412:
# NIL
movq $31, %rax
# Done NIL
jmp .L1414
.L1413:
# (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1400, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL))
# (CONS (#:G1967 (CAR #:G1969)) NIL)
# (#:G1967 (CAR #:G1969))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1969)
# #:G1969
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1969
movq -2(%rax), %rax
# Done (CAR #:G1969)
movq %rax, 16(%rcx)
# #:G1967
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1967
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1967 (CAR #:G1969))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1967 (CAR #:G1969)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL))
# (DEFINE #:G1971 #:G1970)
# #:G1970
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1970
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1971 #:G1970)
# (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969))))))
# (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))
movq 0(%rsp), %rax
movq $.L1402, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969))))))
# (#:G1968 (CDR #:G1969))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1969)
# #:G1969
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1969
movq 6(%rax), %rax
# Done (CDR #:G1969)
movq %rax, 16(%rcx)
# #:G1968
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1968
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1968 (CDR #:G1969))
# #:G1970
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1970
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)
.L1414:
# Done (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970))))
# (APPLY STDOUT EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STDOUT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 456(%rax), %rax
# Done STDOUT
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY STDOUT EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS))
addq $8, %rsp
ret
.L1411:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1416:
.quad 48
.ascii "stderr"
.data
.align 8
.L1415:
.quad .L1416+4
.text
.L1417:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1418
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1418:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1419:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1420
# (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979))))
# (IF (NULL? #:G1979) FALSE TRUE)
.L1426:
# (NULL? #:G1979)
# #:G1979
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1979
movq $31, %rcx
cmpq %rcx, %rax
je .L1422
# Done conditional (NULL? #:G1979)
.L1425:
# FALSE
# Done conditional FALSE
.L1424:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1979) FALSE TRUE)
.L1421:
# (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL))
# (CONS (#:G1977 (CAR #:G1979)) NIL)
# (#:G1977 (CAR #:G1979))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1979)
# #:G1979
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1979
movq -2(%rax), %rax
# Done (CAR #:G1979)
movq %rax, 16(%rcx)
# #:G1977
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1977
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1977 (CAR #:G1979))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1977 (CAR #:G1979)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL))
# (RPLACD #:G1981 #:G1980)
# #:G1981
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1981
# #:G1980
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1980
movq %rcx, 6(%rax)
# Done (RPLACD #:G1981 #:G1980)
# (SET! #:G1981 #:G1980)
# #:G1980
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1980
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1981 #:G1980)
# (#:G1978 (CDR #:G1979))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1979)
# #:G1979
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1979
movq 6(%rax), %rax
# Done (CDR #:G1979)
movq %rax, 16(%rcx)
# #:G1978
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1978
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1978 (CDR #:G1979))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))
jmp .L1423
.L1422:
movq $23, %rax
.L1423:
# Done (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979))))
addq $8, %rsp
ret
.L1420:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1427:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1428
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980))))
# (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1979 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1979 ARGS)
# (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980))
# (NULL? #:G1979)
# #:G1979
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1979
movq $31, %rcx
cmpq %rcx, %rax
jne .L1430
# Done conditional (NULL? #:G1979)
.L1429:
# NIL
movq $31, %rax
# Done NIL
jmp .L1431
.L1430:
# (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1417, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL))
# (CONS (#:G1977 (CAR #:G1979)) NIL)
# (#:G1977 (CAR #:G1979))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1979)
# #:G1979
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1979
movq -2(%rax), %rax
# Done (CAR #:G1979)
movq %rax, 16(%rcx)
# #:G1977
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1977
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1977 (CAR #:G1979))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1977 (CAR #:G1979)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL))
# (DEFINE #:G1981 #:G1980)
# #:G1980
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1980
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1981 #:G1980)
# (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979))))))
# (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))
movq 0(%rsp), %rax
movq $.L1419, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979))))))
# (#:G1978 (CDR #:G1979))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1979)
# #:G1979
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1979
movq 6(%rax), %rax
# Done (CDR #:G1979)
movq %rax, 16(%rcx)
# #:G1978
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1978
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1978 (CDR #:G1979))
# #:G1980
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1980
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)
.L1431:
# Done (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980))))
# (APPLY STDERR EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# STDERR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 448(%rax), %rax
# Done STDERR
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY STDERR EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS))
addq $8, %rsp
ret
.L1428:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1433:
.quad 40
.ascii "apply"
.data
.align 8
.L1432:
.quad .L1433+4
.text
.L1434:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1435
# (EVAL-FORM ARG ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARG
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARG
movq %rax, 16(%rcx)
# ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ENV
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM ARG ENV)
addq $8, %rsp
ret
.L1435:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1436:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1437
# (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989))))
# (IF (NULL? #:G1989) FALSE TRUE)
.L1443:
# (NULL? #:G1989)
# #:G1989
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1989
movq $31, %rcx
cmpq %rcx, %rax
je .L1439
# Done conditional (NULL? #:G1989)
.L1442:
# FALSE
# Done conditional FALSE
.L1441:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1989) FALSE TRUE)
.L1438:
# (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL))
# (CONS (#:G1987 (CAR #:G1989)) NIL)
# (#:G1987 (CAR #:G1989))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1989)
# #:G1989
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1989
movq -2(%rax), %rax
# Done (CAR #:G1989)
movq %rax, 16(%rcx)
# #:G1987
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1987
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1987 (CAR #:G1989))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1987 (CAR #:G1989)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL))
# (RPLACD #:G1991 #:G1990)
# #:G1991
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G1991
# #:G1990
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G1990
movq %rcx, 6(%rax)
# Done (RPLACD #:G1991 #:G1990)
# (SET! #:G1991 #:G1990)
# #:G1990
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1990
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G1991 #:G1990)
# (#:G1988 (CDR #:G1989))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1989)
# #:G1989
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1989
movq 6(%rax), %rax
# Done (CDR #:G1989)
movq %rax, 16(%rcx)
# #:G1988
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1988
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1988 (CDR #:G1989))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))
jmp .L1440
.L1439:
movq $23, %rax
.L1440:
# Done (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989))))
addq $8, %rsp
ret
.L1437:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1444:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1445
# (FUNC (APPLY LIST* ARGS))
subq $24, %rbx
pushq %rbx
movq $16, 0(%rbx)
# (APPLY LIST* ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# LIST*
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 576(%rax), %rax
# Done LIST*
movq %rax, 16(%rcx)
# ARGS
movq 8(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# APPLY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY LIST* ARGS)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# FUNC
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done FUNC
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FUNC (APPLY LIST* ARGS))
addq $8, %rsp
ret
.L1445:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1446:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1447
# (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990))))
# (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1989 ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1989 ARGS)
# (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990))
# (NULL? #:G1989)
# #:G1989
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1989
movq $31, %rcx
cmpq %rcx, %rax
jne .L1449
# Done conditional (NULL? #:G1989)
.L1448:
# NIL
movq $31, %rax
# Done NIL
jmp .L1450
.L1449:
# (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rax
movq $.L1434, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG) (EVAL-FORM ARG ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV)))
# (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL))
# (CONS (#:G1987 (CAR #:G1989)) NIL)
# (#:G1987 (CAR #:G1989))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1989)
# #:G1989
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1989
movq -2(%rax), %rax
# Done (CAR #:G1989)
movq %rax, 16(%rcx)
# #:G1987
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1987
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1987 (CAR #:G1989))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1987 (CAR #:G1989)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL))
# (DEFINE #:G1991 #:G1990)
# #:G1990
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1990
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G1991 #:G1990)
# (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989))))))
# (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))
movq 0(%rsp), %rax
movq $.L1436, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989))))))
# (#:G1988 (CDR #:G1989))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1989)
# #:G1989
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1989
movq 6(%rax), %rax
# Done (CDR #:G1989)
movq %rax, 16(%rcx)
# #:G1988
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1988
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1988 (CDR #:G1989))
# #:G1990
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G1990
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)
.L1450:
# Done (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990))))
# (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS)))
movq 0(%rsp), %rax
movq $.L1444, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS)))
movq %rax, 16(%rcx)
# EVALED-ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EVALED-ARGS
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS)
addq $8, %rsp
# Done (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS))
addq $8, %rsp
ret
.L1447:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1451:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L1452
# (CONS (LIST BUILTIN-EXPANDERS) (LIST NIL))
# (LIST BUILTIN-EXPANDERS)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# BUILTIN-EXPANDERS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 96(%rax), %rax
# Done BUILTIN-EXPANDERS
movq %rax, 16(%rcx)
# LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST BUILTIN-EXPANDERS)
pushq %rax
# (LIST NIL)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# NIL
movq $31, %rax
# Done NIL
movq %rax, 16(%rcx)
# LIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (LIST NIL)
popq %rax
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (LIST BUILTIN-EXPANDERS) (LIST NIL))
addq $8, %rsp
ret
.L1452:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1453:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1454
# (LAPUSH KEYWORD EXPANDER (CAR MACRO-ENV))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# EXPANDER
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done EXPANDER
movq %rax, 24(%rcx)
# (CAR MACRO-ENV)
# MACRO-ENV
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done MACRO-ENV
movq -2(%rax), %rax
# Done (CAR MACRO-ENV)
movq %rax, 32(%rcx)
# LAPUSH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 176(%rax), %rax
# Done LAPUSH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LAPUSH KEYWORD EXPANDER (CAR MACRO-ENV))
addq $8, %rsp
ret
.L1454:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1455:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1456
# (LAPUSH SYM EXPANSION (CDR MACRO-ENV))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# SYM
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done SYM
movq %rax, 16(%rcx)
# EXPANSION
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done EXPANSION
movq %rax, 24(%rcx)
# (CDR MACRO-ENV)
# MACRO-ENV
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done MACRO-ENV
movq 6(%rax), %rax
# Done (CDR MACRO-ENV)
movq %rax, 32(%rcx)
# LAPUSH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 176(%rax), %rax
# Done LAPUSH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LAPUSH SYM EXPANSION (CDR MACRO-ENV))
addq $8, %rsp
ret
.L1456:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1457:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1458
# (EXPAND-FORM SUBFORM DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# SUBFORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done SUBFORM
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 64(%rax), %rax
# Done EXPAND-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-FORM SUBFORM DUAL-ENV)
addq $8, %rsp
ret
.L1458:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1459:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1460
# (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999))))
# (IF (NULL? #:G1999) FALSE TRUE)
.L1466:
# (NULL? #:G1999)
# #:G1999
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1999
movq $31, %rcx
cmpq %rcx, %rax
je .L1462
# Done conditional (NULL? #:G1999)
.L1465:
# FALSE
# Done conditional FALSE
.L1464:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G1999) FALSE TRUE)
.L1461:
# (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL))
# (CONS (#:G1997 (CAR #:G1999)) NIL)
# (#:G1997 (CAR #:G1999))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1999)
# #:G1999
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1999
movq -2(%rax), %rax
# Done (CAR #:G1999)
movq %rax, 16(%rcx)
# #:G1997
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G1997
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1997 (CAR #:G1999))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1997 (CAR #:G1999)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL))
# (RPLACD #:G2001 #:G2000)
# #:G2001
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G2001
# #:G2000
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G2000
movq %rcx, 6(%rax)
# Done (RPLACD #:G2001 #:G2000)
# (SET! #:G2001 #:G2000)
# #:G2000
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2000
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G2001 #:G2000)
# (#:G1998 (CDR #:G1999))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1999)
# #:G1999
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1999
movq 6(%rax), %rax
# Done (CDR #:G1999)
movq %rax, 16(%rcx)
# #:G1998
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1998
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1998 (CDR #:G1999))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))
jmp .L1463
.L1462:
movq $23, %rax
.L1463:
# Done (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999))))
addq $8, %rsp
ret
.L1460:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1467:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L1468
# (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))) (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM)))
# (PAIR? FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
andb $7, %al
cmpb $2, %al
jne .L1470
# Done conditional (PAIR? FORM)
.L1469:
# (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000)))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE KEYWORD (CAR FORM))
# (CAR FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq -2(%rax), %rax
# Done (CAR FORM)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE KEYWORD (CAR FORM))
# (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV))))
# (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# (CAR (CAR DUAL-ENV))
# (CAR DUAL-ENV)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq -2(%rax), %rax
# Done (CAR DUAL-ENV)
movq -2(%rax), %rax
# Done (CAR (CAR DUAL-ENV))
movq %rax, 24(%rcx)
# LASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 184(%rax), %rax
# Done LASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV))))
# (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))
# EXPANDER
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L1473
# Done conditional EXPANDER
.L1472:
# ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV)
subq $48, %rbx
movq $40, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# KEYWORD
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, 24(%rcx)
# (CDR FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq %rax, 32(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 40(%rcx)
# (CDR EXPANDER)
# EXPANDER
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPANDER
movq 6(%rax), %rax
# Done (CDR EXPANDER)
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV)
jmp .L1474
.L1473:
# (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G1999 FORM)
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1999 FORM)
# (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))
# (NULL? #:G1999)
# #:G1999
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1999
movq $31, %rcx
cmpq %rcx, %rax
jne .L1476
# Done conditional (NULL? #:G1999)
.L1475:
# NIL
movq $31, %rax
# Done NIL
jmp .L1477
.L1476:
# (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV)))
# (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))
movq 0(%rsp), %rax
movq $.L1457, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV)))
# (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL))
# (CONS (#:G1997 (CAR #:G1999)) NIL)
# (#:G1997 (CAR #:G1999))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G1999)
# #:G1999
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1999
movq -2(%rax), %rax
# Done (CAR #:G1999)
movq %rax, 16(%rcx)
# #:G1997
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G1997
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1997 (CAR #:G1999))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G1997 (CAR #:G1999)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL))
# (DEFINE #:G2001 #:G2000)
# #:G2000
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2000
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G2001 #:G2000)
# (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999))))))
# (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))
movq 0(%rsp), %rax
movq $.L1459, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999))))))
# (#:G1998 (CDR #:G1999))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G1999)
# #:G1999
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G1999
movq 6(%rax), %rax
# Done (CDR #:G1999)
movq %rax, 16(%rcx)
# #:G1998
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G1998
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G1998 (CDR #:G1999))
# #:G2000
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2000
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000)
.L1477:
# Done (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000)))
.L1474:
# Done (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))
addq $8, %rsp
# Done (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000)))))
jmp .L1471
.L1470:
# (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV))))
# (LASSOC FORM (CDR (CAR DUAL-ENV)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# (CDR (CAR DUAL-ENV))
# (CAR DUAL-ENV)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq -2(%rax), %rax
# Done (CAR DUAL-ENV)
movq 6(%rax), %rax
# Done (CDR (CAR DUAL-ENV))
movq %rax, 24(%rcx)
# LASSOC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 184(%rax), %rax
# Done LASSOC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LASSOC FORM (CDR (CAR DUAL-ENV)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV))))
# (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM)
# EXPANSION
movq 0(%rsp), %rax
movq 16(%rax), %rax
cmpq $7, %rax
je .L1479
# Done conditional EXPANSION
.L1478:
# (EXPAND-FORM (CDR EXPANSION) DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR EXPANSION)
# EXPANSION
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPANSION
movq 6(%rax), %rax
# Done (CDR EXPANSION)
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 64(%rax), %rax
# Done EXPAND-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-FORM (CDR EXPANSION) DUAL-ENV)
jmp .L1480
.L1479:
# FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FORM
.L1480:
# Done (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM)
addq $8, %rsp
# Done (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM))
.L1471:
# Done (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))) (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM)))
addq $8, %rsp
ret
.L1468:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1481:
.quad 216
.ascii "strange arguments to ~S: ~S"
.text
.L1482:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1483
# (BEGIN (DEFINE LHS (CAR ARGS)) (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN)))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE LHS (CAR ARGS))
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE LHS (CAR ARGS))
# (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN))))
# (PAIR? LHS)
# LHS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LHS
andb $7, %al
cmpb $2, %al
jne .L1485
# Done conditional (PAIR? LHS)
.L1484:
# (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))))
# (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR LHS)
# LHS
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done LHS
movq -2(%rax), %rax
# Done (CAR LHS)
movq %rax, 16(%rcx)
# (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (QUOTE LAMBDA)
movq $.L639+7, %rax
# Done (QUOTE LAMBDA)
movq %rax, 16(%rcx)
# (CDR LHS)
# LHS
movq 16(%rsp), %rax
movq 16(%rax), %rax
# Done LHS
movq 6(%rax), %rax
# Done (CDR LHS)
movq %rax, 24(%rcx)
# (EXPAND-BODY (CDR ARGS) DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR ARGS)
# ARGS
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 16(%rcx)
# DUAL-ENV
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-BODY
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done EXPAND-BODY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-BODY (CDR ARGS) DUAL-ENV)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# LIST*
movq 16(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 576(%rax), %rax
# Done LIST*
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# LIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))
# Done (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))))
jmp .L1486
.L1485:
# (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN)))
# (SYMBOL? LHS)
# LHS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done LHS
cmpq $2055, %rax
jl .L1490
andq $7, %rax
cmpq $7, %rax
.L1490:
jne .L1488
# Done conditional (SYMBOL? LHS)
.L1487:
# (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV))))
# (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))
# (NULL? (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq $31, %rcx
cmpq %rcx, %rax
jne .L1492
# Done conditional (NULL? (CDR ARGS))
.L1491:
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
jmp .L1493
.L1492:
# (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV))
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# LHS
movq 8(%rsp), %rax
movq 16(%rax), %rax
# Done LHS
movq %rax, 16(%rcx)
# (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq -2(%rax), %rax
# Done (CAR (CDR ARGS))
movq %rax, 16(%rcx)
# DUAL-ENV
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-FORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 64(%rax), %rax
# Done EXPAND-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# LIST
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV))
.L1493:
# Done (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))
# Done (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV))))
jmp .L1489
.L1488:
# (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN))
# TRUE
# Done conditional TRUE
.L1494:
# (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS))
# (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "strange arguments to ~S: ~S"
movq $.L1481+4, %rax
# Done "strange arguments to ~S: ~S"
movq %rax, 16(%rcx)
# KEYWORD
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done KEYWORD
movq %rax, 24(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done ARGS
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)
# Done (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS))
jmp .L1496
.L1495:
# (BEGIN)
movq $23, %rax
# Done (BEGIN)
.L1496:
# Done (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN))
.L1489:
# Done (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN)))
.L1486:
# Done (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN))))
addq $8, %rsp
# Done (BEGIN (DEFINE LHS (CAR ARGS)) (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN)))))
addq $8, %rsp
ret
.L1483:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1498:
.quad 64
.ascii "defmacro"
.data
.align 8
.L1497:
.quad .L1498+4
.text
.L1499:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L1500
# (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)
subq $32, %rbx
pushq %rbx
movq $24, 0(%rbx)
# (MACRO-LAMBDA ARGS)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# ARGS
movq 8(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 16(%rcx)
# MACRO-LAMBDA
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done MACRO-LAMBDA
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (MACRO-LAMBDA ARGS)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# DUAL-ENV
movq 8(%rsp), %rax
movq 40(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-FORM
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 64(%rax), %rax
# Done EXPAND-FORM
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)
addq $8, %rsp
ret
.L1500:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1501:
.quad .L664+7
.quad 31
.text
.L1502:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L1503
# (IF (PAIR? (CAR ARGS)) (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))) (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS))))
# (PAIR? (CAR ARGS))
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
andb $7, %al
cmpb $2, %al
jne .L1505
# Done conditional (PAIR? (CAR ARGS))
.L1504:
# (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV))
# (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (QUOTE DEFMACRO)
movq $.L1497+7, %rax
# Done (QUOTE DEFMACRO)
movq %rax, 16(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 32(%rcx)
# EXPAND-DEFINE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 56(%rax), %rax
# Done EXPAND-DEFINE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV))
# (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV)))
# (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CAR (CDR DEF))
# (CDR DEF)
# DEF
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done DEF
movq 6(%rax), %rax
# Done (CDR DEF)
movq -2(%rax), %rax
# Done (CAR (CDR DEF))
movq %rax, 16(%rcx)
# (CDR DUAL-ENV)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq 6(%rax), %rax
# Done (CDR DUAL-ENV)
movq %rax, 24(%rcx)
# EVAL-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 136(%rax), %rax
# Done EVAL-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV)))
# (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CAR DUAL-ENV)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq -2(%rax), %rax
# Done (CAR DUAL-ENV)
movq %rax, 16(%rcx)
# (CAR DEF)
# DEF
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done DEF
movq -2(%rax), %rax
# Done (CAR DEF)
movq %rax, 24(%rcx)
# (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV))
movq 0(%rsp), %rax
movq $.L1499, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV))
movq %rax, 32(%rcx)
# ADD-FORM-EXPANDER
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 80(%rax), %rax
# Done ADD-FORM-EXPANDER
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))
addq $8, %rsp
# Done (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV))))
jmp .L1506
.L1505:
# (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS)))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (CAR DUAL-ENV)
# DUAL-ENV
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq -2(%rax), %rax
# Done (CAR DUAL-ENV)
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# (CAR (CDR ARGS))
# (CDR ARGS)
# ARGS
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq -2(%rax), %rax
# Done (CAR (CDR ARGS))
movq %rax, 32(%rcx)
# ADD-SYMBOL-EXPANSION
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 72(%rax), %rax
# Done ADD-SYMBOL-EXPANSION
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS)))
.L1506:
# Done (IF (PAIR? (CAR ARGS)) (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))) (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS))))
# (QUOTE (DEFINITIONS))
movq $.L1501+2, %rax
# Done (QUOTE (DEFINITIONS))
addq $8, %rsp
ret
.L1503:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1507:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L1508
# (SET! FORM (EXPAND-FORM FORM DUAL-ENV))
# (EXPAND-FORM FORM DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 64(%rax), %rax
# Done EXPAND-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-FORM FORM DUAL-ENV)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (SET! FORM (EXPAND-FORM FORM DUAL-ENV))
# (IF (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE) (DO-DEFMACRO (CDR FORM) DUAL-ENV) FORM)
# (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE)
.L1514:
# (PAIR? FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
andb $7, %al
cmpb $2, %al
jne .L1510
# Done conditional (PAIR? FORM)
.L1513:
# (EQ? (QUOTE DEFMACRO) (CAR FORM))
# (QUOTE DEFMACRO)
movq $.L1497+7, %rax
# Done (QUOTE DEFMACRO)
# (CAR FORM)
# FORM
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done FORM
movq -2(%rcx), %rcx
# Done (CAR FORM)
cmpq %rcx, %rax
jne .L1510
# Done conditional (EQ? (QUOTE DEFMACRO) (CAR FORM))
.L1512:
# FALSE
# Done conditional FALSE
# Done conditional (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE)
.L1509:
# (DO-DEFMACRO (CDR FORM) DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR FORM)
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq 6(%rax), %rax
# Done (CDR FORM)
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# DO-DEFMACRO
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 48(%rax), %rax
# Done DO-DEFMACRO
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (DO-DEFMACRO (CDR FORM) DUAL-ENV)
jmp .L1511
.L1510:
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
.L1511:
# Done (IF (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE) (DO-DEFMACRO (CDR FORM) DUAL-ENV) FORM)
addq $8, %rsp
ret
.L1508:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1515:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1516
# (EXPAND-BODY-FORM FORM DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-BODY-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done EXPAND-BODY-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-BODY-FORM FORM DUAL-ENV)
addq $8, %rsp
ret
.L1516:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1517:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1518
# (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009))))
# (IF (NULL? #:G2009) FALSE TRUE)
.L1524:
# (NULL? #:G2009)
# #:G2009
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2009
movq $31, %rcx
cmpq %rcx, %rax
je .L1520
# Done conditional (NULL? #:G2009)
.L1523:
# FALSE
# Done conditional FALSE
.L1522:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G2009) FALSE TRUE)
.L1519:
# (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL))
# (CONS (#:G2007 (CAR #:G2009)) NIL)
# (#:G2007 (CAR #:G2009))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2009)
# #:G2009
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2009
movq -2(%rax), %rax
# Done (CAR #:G2009)
movq %rax, 16(%rcx)
# #:G2007
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G2007
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2007 (CAR #:G2009))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2007 (CAR #:G2009)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL))
# (RPLACD #:G2011 #:G2010)
# #:G2011
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G2011
# #:G2010
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G2010
movq %rcx, 6(%rax)
# Done (RPLACD #:G2011 #:G2010)
# (SET! #:G2011 #:G2010)
# #:G2010
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2010
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G2011 #:G2010)
# (#:G2008 (CDR #:G2009))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2009)
# #:G2009
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2009
movq 6(%rax), %rax
# Done (CDR #:G2009)
movq %rax, 16(%rcx)
# #:G2008
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2008
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2008 (CDR #:G2009))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))
jmp .L1521
.L1520:
movq $23, %rax
.L1521:
# Done (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009))))
addq $8, %rsp
ret
.L1518:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1525:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L1526
# (BEGIN (DEFINE #:G2009 BODY) (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2009 BODY)
# BODY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done BODY
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2009 BODY)
# (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010))
# (NULL? #:G2009)
# #:G2009
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2009
movq $31, %rcx
cmpq %rcx, %rax
jne .L1528
# Done conditional (NULL? #:G2009)
.L1527:
# NIL
movq $31, %rax
# Done NIL
jmp .L1529
.L1528:
# (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV)))
# (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))
movq 0(%rsp), %rax
movq $.L1515, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV)))
# (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL))
# (CONS (#:G2007 (CAR #:G2009)) NIL)
# (#:G2007 (CAR #:G2009))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2009)
# #:G2009
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2009
movq -2(%rax), %rax
# Done (CAR #:G2009)
movq %rax, 16(%rcx)
# #:G2007
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G2007
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2007 (CAR #:G2009))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2007 (CAR #:G2009)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL))
# (DEFINE #:G2011 #:G2010)
# #:G2010
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2010
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G2011 #:G2010)
# (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009))))))
# (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))
movq 0(%rsp), %rax
movq $.L1517, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009))))))
# (#:G2008 (CDR #:G2009))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2009)
# #:G2009
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2009
movq 6(%rax), %rax
# Done (CDR #:G2009)
movq %rax, 16(%rcx)
# #:G2008
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2008
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2008 (CDR #:G2009))
# #:G2010
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2010
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010)
.L1529:
# Done (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2009 BODY) (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010)))
addq $8, %rsp
ret
.L1526:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1530:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L1531
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
addq $8, %rsp
ret
.L1531:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1532:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L1533
# (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))
subq $40, %rbx
pushq %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 8(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# (CAR ARGS)
# ARGS
movq 8(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq -2(%rax), %rax
# Done (CAR ARGS)
movq %rax, 24(%rcx)
# (EXPAND-BODY (CDR ARGS) DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (CDR ARGS)
# ARGS
movq 8(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq 6(%rax), %rax
# Done (CDR ARGS)
movq %rax, 16(%rcx)
# DUAL-ENV
movq 8(%rsp), %rax
movq 40(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-BODY
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done EXPAND-BODY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-BODY (CDR ARGS) DUAL-ENV)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# LIST*
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 576(%rax), %rax
# Done LIST*
movq 7(%rax), %rdx
addq $8, %rsp
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))
addq $8, %rsp
ret
.L1533:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1535:
.quad .L664+7
.quad 31
.data
.align 8
.L1534:
.quad .L660+7
.quad .L1535+2
.text
.L1536:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L1537
# (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV))
# (EXPAND-BODY ARGS DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# ARGS
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-BODY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done EXPAND-BODY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (EXPAND-BODY ARGS DUAL-ENV)
# KEYWORD
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV))
addq $8, %rsp
ret
.L1537:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1538:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L1539
# (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015)))
# (IF (NULL? #:G2014) FALSE TRUE)
.L1545:
# (NULL? #:G2014)
# #:G2014
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2014
movq $31, %rcx
cmpq %rcx, %rax
je .L1541
# Done conditional (NULL? #:G2014)
.L1544:
# FALSE
# Done conditional FALSE
.L1543:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G2014) FALSE TRUE)
.L1540:
# (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))
# (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE K (CAR #:G2014))
# (CAR #:G2014)
# #:G2014
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2014
movq -2(%rax), %rax
# Done (CAR #:G2014)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE K (CAR #:G2014))
# (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))
# (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)
# (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV))))
# K
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done K
# (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))
movq 0(%rsp), %rcx
movq $.L1536, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV))))
# BUILTIN-EXPANDERS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 96(%rcx), %rcx
# Done BUILTIN-EXPANDERS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 96(%rcx)
# Done (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))
addq $8, %rsp
# Done (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)))
# (SET! #:G2014 (CDR #:G2014))
# (CDR #:G2014)
# #:G2014
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2014
movq 6(%rax), %rax
# Done (CDR #:G2014)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 16(%rcx)
# Done (SET! #:G2014 (CDR #:G2014))
# (#:G2015)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G2015
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2015
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2015)
# Done (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))
jmp .L1542
.L1541:
movq $23, %rax
.L1542:
# Done (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015)))
addq $8, %rsp
ret
.L1539:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1549:
.quad 24
.ascii "let"
.data
.align 8
.L1548:
.quad .L1549+4
.data
.align 8
.L1550:
.quad .L687+7
.quad 31
.data
.align 8
.L1547:
.quad .L1548+7
.quad .L1550+2
.data
.align 8
.L1546:
.quad .L668+7
.quad .L1547+2
.text
.L1551:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L1552
# (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV))
# (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# KEYWORD
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, 16(%rcx)
# ARGS
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done ARGS
movq %rax, 24(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done DUAL-ENV
movq %rax, 32(%rcx)
# EXPAND-DEFINE
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 56(%rax), %rax
# Done EXPAND-DEFINE
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)
# KEYWORD
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done KEYWORD
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV))
addq $8, %rsp
ret
.L1552:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1553:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L1554
# (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019)))
# (IF (NULL? #:G2018) FALSE TRUE)
.L1560:
# (NULL? #:G2018)
# #:G2018
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2018
movq $31, %rcx
cmpq %rcx, %rax
je .L1556
# Done conditional (NULL? #:G2018)
.L1559:
# FALSE
# Done conditional FALSE
.L1558:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G2018) FALSE TRUE)
.L1555:
# (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))
# (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE K (CAR #:G2018))
# (CAR #:G2018)
# #:G2018
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2018
movq -2(%rax), %rax
# Done (CAR #:G2018)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE K (CAR #:G2018))
# (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))
# (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)
# (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV))))
# K
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done K
# (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))
movq 0(%rsp), %rcx
movq $.L1551, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV))))
# BUILTIN-EXPANDERS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 96(%rcx), %rcx
# Done BUILTIN-EXPANDERS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 96(%rcx)
# Done (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))
addq $8, %rsp
# Done (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS)))
# (SET! #:G2018 (CDR #:G2018))
# (CDR #:G2018)
# #:G2018
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2018
movq 6(%rax), %rax
# Done (CDR #:G2018)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 16(%rcx)
# Done (SET! #:G2018 (CDR #:G2018))
# (#:G2019)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G2019
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2019
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2019)
# Done (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))
jmp .L1557
.L1556:
movq $23, %rax
.L1557:
# Done (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019)))
addq $8, %rsp
ret
.L1554:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1561:
pushq %rcx
cmpq $40, 0(%rcx)
jne .L1562
# FORM
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done FORM
addq $8, %rsp
ret
.L1562:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $40, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1563:
.quad 392
.ascii "Evaluation of (function? ()) gave ~S, expected ~S"
.text
.L1564:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L1565
movq $23, %rax
addq $8, %rsp
ret
.L1565:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1566:
.quad 464
.ascii "Evaluation of (function? (lambda ())) gave ~S, expected ~S"
.data
.align 8
.L1568:
.quad 16
.quad 31
.data
.align 8
.L1567:
.quad 8
.quad .L1568+2
.data
.align 8
.L1570:
.quad 8
.ascii "a"
.data
.align 8
.L1569:
.quad .L1570+4
.data
.align 8
.L1572:
.quad 8
.ascii "b"
.data
.align 8
.L1571:
.quad .L1572+4
.data
.align 8
.L1574:
.quad 8
.ascii "c"
.data
.align 8
.L1573:
.quad .L1574+4
.data
.align 8
.L1577:
.quad .L1573+7
.quad 31
.data
.align 8
.L1576:
.quad .L1571+7
.quad .L1577+2
.data
.align 8
.L1575:
.quad .L1569+7
.quad .L1576+2
.data
.align 8
.L1578:
.quad 440
.ascii "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S"
.data
.align 8
.L1581:
.quad 16
.quad 31
.data
.align 8
.L1580:
.quad 8
.quad .L1581+2
.data
.align 8
.L1583:
.quad .L1573+7
.quad 31
.data
.align 8
.L1582:
.quad .L1571+7
.quad .L1583+2
.data
.align 8
.L1579:
.quad .L1580+2
.quad .L1582+2
.data
.align 8
.L1584:
.quad 520
.ascii "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S"
.data
.align 8
.L1588:
.quad 16
.quad 31
.data
.align 8
.L1587:
.quad 8
.quad .L1588+2
.data
.align 8
.L1589:
.quad .L1573+7
.quad 31
.data
.align 8
.L1586:
.quad .L1587+2
.quad .L1589+2
.data
.align 8
.L1585:
.quad .L1569+7
.quad .L1586+2
.data
.align 8
.L1590:
.quad 520
.ascii "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S"
.data
.align 8
.L1595:
.quad 16
.quad 31
.data
.align 8
.L1594:
.quad 8
.quad .L1595+2
.data
.align 8
.L1593:
.quad .L1594+2
.quad 31
.data
.align 8
.L1592:
.quad .L1571+7
.quad .L1593+2
.data
.align 8
.L1591:
.quad .L1569+7
.quad .L1592+2
.data
.align 8
.L1596:
.quad 520
.ascii "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S"
.data
.align 8
.L1600:
.quad .L1573+7
.quad 31
.data
.align 8
.L1599:
.quad .L1571+7
.quad .L1600+2
.data
.align 8
.L1598:
.quad 16
.quad .L1599+2
.data
.align 8
.L1597:
.quad 8
.quad .L1598+2
.data
.align 8
.L1601:
.quad 592
.ascii "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S"
.data
.align 8
.L1605:
.quad .L1573+7
.quad 31
.data
.align 8
.L1604:
.quad 16
.quad .L1605+2
.data
.align 8
.L1603:
.quad 8
.quad .L1604+2
.data
.align 8
.L1602:
.quad .L1569+7
.quad .L1603+2
.data
.align 8
.L1606:
.quad 592
.ascii "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S"
.data
.align 8
.L1610:
.quad 16
.quad 31
.data
.align 8
.L1609:
.quad 8
.quad .L1610+2
.data
.align 8
.L1608:
.quad .L1571+7
.quad .L1609+2
.data
.align 8
.L1607:
.quad .L1569+7
.quad .L1608+2
.data
.align 8
.L1611:
.quad 592
.ascii "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S"
.data
.align 8
.L1614:
.quad 24
.quad 31
.data
.align 8
.L1613:
.quad 16
.quad .L1614+2
.data
.align 8
.L1612:
.quad 8
.quad .L1613+2
.data
.align 8
.L1615:
.quad 472
.ascii "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S"
.data
.align 8
.L1618:
.quad 24
.quad 31
.data
.align 8
.L1617:
.quad 16
.quad .L1618+2
.data
.align 8
.L1616:
.quad 8
.quad .L1617+2
.data
.align 8
.L1619:
.quad 376
.ascii "Evaluation of (list 1 2 3) gave ~S, expected ~S"
.data
.align 8
.L1620:
.quad 320
.ascii "Evaluation of (and) gave ~S, expected ~S"
.data
.align 8
.L1621:
.quad 360
.ascii "Evaluation of (and true) gave ~S, expected ~S"
.data
.align 8
.L1622:
.quad 368
.ascii "Evaluation of (and false) gave ~S, expected ~S"
.data
.align 8
.L1623:
.quad 408
.ascii "Evaluation of (and true false) gave ~S, expected ~S"
.data
.align 8
.L1624:
.quad 408
.ascii "Evaluation of (and false true) gave ~S, expected ~S"
.data
.align 8
.L1625:
.quad 440
.ascii "Evaluation of (and true true true) gave ~S, expected ~S"
.data
.align 8
.L1626:
.quad 312
.ascii "Evaluation of (or) gave ~S, expected ~S"
.data
.align 8
.L1627:
.quad 352
.ascii "Evaluation of (or true) gave ~S, expected ~S"
.data
.align 8
.L1628:
.quad 360
.ascii "Evaluation of (or false) gave ~S, expected ~S"
.data
.align 8
.L1629:
.quad 24
.ascii "foo"
.data
.align 8
.L1631:
.quad 24
.ascii "foo"
.data
.align 8
.L1630:
.quad .L1631+4
.data
.align 8
.L1632:
.quad 536
.ascii "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S"
.data
.align 8
.L1633:
.quad 24
.ascii "bar"
.data
.align 8
.L1634:
.quad 24
.ascii "bar"
.data
.align 8
.L1635:
.quad 504
.ascii "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S"
.data
.align 8
.L1636:
.quad 328
.ascii "Evaluation of (1+ 1) gave ~S, expected ~S"
.data
.align 8
.L1637:
.quad 328
.ascii "Evaluation of (1- 1) gave ~S, expected ~S"
.data
.align 8
.L1640:
.quad 24
.quad 31
.data
.align 8
.L1639:
.quad 16
.quad .L1640+2
.data
.align 8
.L1638:
.quad 8
.quad .L1639+2
.text
.L1641:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1642
# (+ X 1)
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ X 1)
addq $8, %rsp
ret
.L1642:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1643:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1644
# (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043))))
# (IF (NULL? #:G2043) FALSE TRUE)
.L1650:
# (NULL? #:G2043)
# #:G2043
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2043
movq $31, %rcx
cmpq %rcx, %rax
je .L1646
# Done conditional (NULL? #:G2043)
.L1649:
# FALSE
# Done conditional FALSE
.L1648:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G2043) FALSE TRUE)
.L1645:
# (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL))
# (CONS (#:G2041 (CAR #:G2043)) NIL)
# (#:G2041 (CAR #:G2043))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2043)
# #:G2043
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2043
movq -2(%rax), %rax
# Done (CAR #:G2043)
movq %rax, 16(%rcx)
# #:G2041
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G2041
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2041 (CAR #:G2043))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2041 (CAR #:G2043)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL))
# (RPLACD #:G2045 #:G2044)
# #:G2045
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G2045
# #:G2044
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G2044
movq %rcx, 6(%rax)
# Done (RPLACD #:G2045 #:G2044)
# (SET! #:G2045 #:G2044)
# #:G2044
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2044
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G2045 #:G2044)
# (#:G2042 (CDR #:G2043))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2043)
# #:G2043
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2043
movq 6(%rax), %rax
# Done (CDR #:G2043)
movq %rax, 16(%rcx)
# #:G2042
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2042
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2042 (CDR #:G2043))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))
jmp .L1647
.L1646:
movq $23, %rax
.L1647:
# Done (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043))))
addq $8, %rsp
ret
.L1644:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1653:
.quad 32
.quad 31
.data
.align 8
.L1652:
.quad 24
.quad .L1653+2
.data
.align 8
.L1651:
.quad 16
.quad .L1652+2
.data
.align 8
.L1654:
.quad 560
.ascii "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S"
.data
.align 8
.L1655:
.quad 40
.ascii "Whoa!"
.text
.L1656:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1657
# (ERROR "Whoa!")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# "Whoa!"
movq $.L1655+4, %rax
# Done "Whoa!"
movq %rax, 16(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Whoa!")
addq $8, %rsp
ret
.L1657:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1658:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1659
# (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048))))
# (IF (NULL? #:G2048) FALSE TRUE)
.L1665:
# (NULL? #:G2048)
# #:G2048
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2048
movq $31, %rcx
cmpq %rcx, %rax
je .L1661
# Done conditional (NULL? #:G2048)
.L1664:
# FALSE
# Done conditional FALSE
.L1663:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G2048) FALSE TRUE)
.L1660:
# (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL))
# (CONS (#:G2046 (CAR #:G2048)) NIL)
# (#:G2046 (CAR #:G2048))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2048)
# #:G2048
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2048
movq -2(%rax), %rax
# Done (CAR #:G2048)
movq %rax, 16(%rcx)
# #:G2046
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G2046
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2046 (CAR #:G2048))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2046 (CAR #:G2048)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL))
# (RPLACD #:G2050 #:G2049)
# #:G2050
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G2050
# #:G2049
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G2049
movq %rcx, 6(%rax)
# Done (RPLACD #:G2050 #:G2049)
# (SET! #:G2050 #:G2049)
# #:G2049
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2049
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G2050 #:G2049)
# (#:G2047 (CDR #:G2048))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2048)
# #:G2048
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2048
movq 6(%rax), %rax
# Done (CDR #:G2048)
movq %rax, 16(%rcx)
# #:G2047
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2047
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2047 (CDR #:G2048))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))
jmp .L1662
.L1661:
movq $23, %rax
.L1662:
# Done (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048))))
addq $8, %rsp
ret
.L1659:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1666:
.quad 528
.ascii "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S"
.data
.align 8
.L1667:
.quad .L1569+7
.quad 31
.text
.L1668:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1669
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
addq $8, %rsp
ret
.L1669:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.text
.L1670:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1671
# (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053))))
# (IF (NULL? #:G2053) FALSE TRUE)
.L1677:
# (NULL? #:G2053)
# #:G2053
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2053
movq $31, %rcx
cmpq %rcx, %rax
je .L1673
# Done conditional (NULL? #:G2053)
.L1676:
# FALSE
# Done conditional FALSE
.L1675:
# TRUE
# Done conditional TRUE
# Done conditional (IF (NULL? #:G2053) FALSE TRUE)
.L1672:
# (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL))
# (CONS (#:G2051 (CAR #:G2053)) NIL)
# (#:G2051 (CAR #:G2053))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2053)
# #:G2053
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2053
movq -2(%rax), %rax
# Done (CAR #:G2053)
movq %rax, 16(%rcx)
# #:G2051
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done #:G2051
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2051 (CAR #:G2053))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2051 (CAR #:G2053)) NIL)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL))
# (RPLACD #:G2055 #:G2054)
# #:G2055
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done #:G2055
# #:G2054
movq 0(%rsp), %rcx
movq 16(%rcx), %rcx
# Done #:G2054
movq %rcx, 6(%rax)
# Done (RPLACD #:G2055 #:G2054)
# (SET! #:G2055 #:G2054)
# #:G2054
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2054
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 8(%rcx), %rcx
movq %rax, 24(%rcx)
# Done (SET! #:G2055 #:G2054)
# (#:G2052 (CDR #:G2053))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2053)
# #:G2053
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2053
movq 6(%rax), %rax
# Done (CDR #:G2053)
movq %rax, 16(%rcx)
# #:G2052
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2052
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2052 (CDR #:G2053))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))
jmp .L1674
.L1673:
movq $23, %rax
.L1674:
# Done (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053))))
addq $8, %rsp
ret
.L1671:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1678:
.quad .L1569+7
.quad 31
.data
.align 8
.L1679:
.quad 488
.ascii "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S"
.text
.L1680:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1681
# (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057)))))
# (NULL? #:G2057)
# #:G2057
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2057
movq $31, %rcx
cmpq %rcx, %rax
jne .L1683
# Done conditional (NULL? #:G2057)
.L1682:
# FALSE
movq $7, %rax
# Done FALSE
jmp .L1684
.L1683:
# (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE X (CAR #:G2057))
# (CAR #:G2057)
# #:G2057
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2057
movq -2(%rax), %rax
# Done (CAR #:G2057)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE X (CAR #:G2057))
# (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057)))
# (BEGIN (> X 1))
# (> X 1)
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
# 1
movq $8, %rcx
# Done 1
cmpq %rcx, %rax
jng .L1686
# Done conditional (> X 1)
# Done conditional (BEGIN (> X 1))
.L1685:
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
jmp .L1687
.L1686:
# (#:G2056 (CDR #:G2057))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2057)
# #:G2057
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2057
movq 6(%rax), %rax
# Done (CDR #:G2057)
movq %rax, 16(%rcx)
# #:G2056
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2056
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2056 (CDR #:G2057))
.L1687:
# Done (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057)))
addq $8, %rsp
# Done (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))
.L1684:
# Done (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057)))))
addq $8, %rsp
ret
.L1681:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1690:
.quad 24
.quad 31
.data
.align 8
.L1689:
.quad 16
.quad .L1690+2
.data
.align 8
.L1688:
.quad 8
.quad .L1689+2
.data
.align 8
.L1691:
.quad 576
.ascii "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S"
.data
.align 8
.L1692:
.quad 40
.ascii "Whoa!"
.text
.L1693:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1694
# (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059)))))
# (NULL? #:G2059)
# #:G2059
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2059
movq $31, %rcx
cmpq %rcx, %rax
jne .L1696
# Done conditional (NULL? #:G2059)
.L1695:
# FALSE
movq $7, %rax
# Done FALSE
jmp .L1697
.L1696:
# (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE X (CAR #:G2059))
# (CAR #:G2059)
# #:G2059
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2059
movq -2(%rax), %rax
# Done (CAR #:G2059)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE X (CAR #:G2059))
# (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059)))
# (BEGIN (ERROR "Whoa!"))
# (ERROR "Whoa!")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# "Whoa!"
movq $.L1692+4, %rax
# Done "Whoa!"
movq %rax, 16(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
je .L1699
# Done conditional (ERROR "Whoa!")
# Done conditional (BEGIN (ERROR "Whoa!"))
.L1698:
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
jmp .L1700
.L1699:
# (#:G2058 (CDR #:G2059))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2059)
# #:G2059
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2059
movq 6(%rax), %rax
# Done (CDR #:G2059)
movq %rax, 16(%rcx)
# #:G2058
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2058
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2058 (CDR #:G2059))
.L1700:
# Done (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059)))
addq $8, %rsp
# Done (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))
.L1697:
# Done (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059)))))
addq $8, %rsp
ret
.L1694:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1701:
.quad 536
.ascii "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S"
.text
.L1702:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1703
# (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061)))))
# (NULL? #:G2061)
# #:G2061
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2061
movq $31, %rcx
cmpq %rcx, %rax
jne .L1705
# Done conditional (NULL? #:G2061)
.L1704:
# FALSE
movq $7, %rax
# Done FALSE
jmp .L1706
.L1705:
# (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE X (CAR #:G2061))
# (CAR #:G2061)
# #:G2061
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2061
movq -2(%rax), %rax
# Done (CAR #:G2061)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE X (CAR #:G2061))
# (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061)))
# (BEGIN (> X 1))
# (> X 1)
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
# 1
movq $8, %rcx
# Done 1
cmpq %rcx, %rax
jng .L1708
# Done conditional (> X 1)
# Done conditional (BEGIN (> X 1))
.L1707:
# X
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done X
jmp .L1709
.L1708:
# (#:G2060 (CDR #:G2061))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2061)
# #:G2061
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2061
movq 6(%rax), %rax
# Done (CDR #:G2061)
movq %rax, 16(%rcx)
# #:G2060
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2060
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2060 (CDR #:G2061))
.L1709:
# Done (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061)))
addq $8, %rsp
# Done (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))
.L1706:
# Done (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061)))))
addq $8, %rsp
ret
.L1703:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1710:
.quad 8
.quad 31
.data
.align 8
.L1711:
.quad 544
.ascii "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S"
.data
.align 8
.L1712:
.quad 304
.ascii "Evaluation of (+) gave ~S, expected ~S"
.data
.align 8
.L1713:
.quad 440
.ascii "Evaluation of (apply + (quote ())) gave ~S, expected ~S"
.data
.align 8
.L1714:
.quad 320
.ascii "Evaluation of (+ 1) gave ~S, expected ~S"
.data
.align 8
.L1715:
.quad 8
.quad 31
.data
.align 8
.L1716:
.quad 448
.ascii "Evaluation of (apply + (quote (1))) gave ~S, expected ~S"
.data
.align 8
.L1717:
.quad 336
.ascii "Evaluation of (+ 1 2) gave ~S, expected ~S"
.data
.align 8
.L1719:
.quad 16
.quad 31
.data
.align 8
.L1718:
.quad 8
.quad .L1719+2
.data
.align 8
.L1720:
.quad 464
.ascii "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S"
.data
.align 8
.L1721:
.quad 352
.ascii "Evaluation of (+ 1 2 3) gave ~S, expected ~S"
.data
.align 8
.L1724:
.quad 24
.quad 31
.data
.align 8
.L1723:
.quad 16
.quad .L1724+2
.data
.align 8
.L1722:
.quad 8
.quad .L1723+2
.data
.align 8
.L1725:
.quad 480
.ascii "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S"
.data
.align 8
.L1726:
.quad 304
.ascii "Evaluation of (*) gave ~S, expected ~S"
.data
.align 8
.L1727:
.quad 440
.ascii "Evaluation of (apply * (quote ())) gave ~S, expected ~S"
.data
.align 8
.L1728:
.quad 320
.ascii "Evaluation of (* 1) gave ~S, expected ~S"
.data
.align 8
.L1729:
.quad 8
.quad 31
.data
.align 8
.L1730:
.quad 448
.ascii "Evaluation of (apply * (quote (1))) gave ~S, expected ~S"
.data
.align 8
.L1731:
.quad 336
.ascii "Evaluation of (* 1 2) gave ~S, expected ~S"
.data
.align 8
.L1733:
.quad 16
.quad 31
.data
.align 8
.L1732:
.quad 8
.quad .L1733+2
.data
.align 8
.L1734:
.quad 464
.ascii "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S"
.data
.align 8
.L1735:
.quad 352
.ascii "Evaluation of (* 1 2 3) gave ~S, expected ~S"
.data
.align 8
.L1738:
.quad 24
.quad 31
.data
.align 8
.L1737:
.quad 16
.quad .L1738+2
.data
.align 8
.L1736:
.quad 8
.quad .L1737+2
.data
.align 8
.L1739:
.quad 480
.ascii "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S"
.data
.align 8
.L1740:
.quad 320
.ascii "Evaluation of (- 1) gave ~S, expected ~S"
.data
.align 8
.L1741:
.quad 8
.quad 31
.data
.align 8
.L1742:
.quad 448
.ascii "Evaluation of (apply - (quote (1))) gave ~S, expected ~S"
.data
.align 8
.L1743:
.quad 336
.ascii "Evaluation of (- 1 2) gave ~S, expected ~S"
.data
.align 8
.L1745:
.quad 16
.quad 31
.data
.align 8
.L1744:
.quad 8
.quad .L1745+2
.data
.align 8
.L1746:
.quad 464
.ascii "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S"
.data
.align 8
.L1747:
.quad 352
.ascii "Evaluation of (- 1 2 3) gave ~S, expected ~S"
.data
.align 8
.L1750:
.quad 24
.quad 31
.data
.align 8
.L1749:
.quad 16
.quad .L1750+2
.data
.align 8
.L1748:
.quad 8
.quad .L1749+2
.data
.align 8
.L1751:
.quad 480
.ascii "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S"
.text
.L1752:
pushq %rcx
cmpq $16, 0(%rcx)
jne .L1753
# (IF (< N 2) 1 (* N (FAC (- N 1))))
# (< N 2)
# N
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done N
# 2
movq $16, %rcx
# Done 2
cmpq %rcx, %rax
jnl .L1755
# Done conditional (< N 2)
.L1754:
# 1
movq $8, %rax
# Done 1
jmp .L1756
.L1755:
# (* N (FAC (- N 1)))
# (FAC (- N 1))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (- N 1)
# N
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done N
# 1
movq $8, %rdx
# Done 1
subq %rdx, %rax
# Done (- N 1)
movq %rax, 16(%rcx)
# FAC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FAC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (FAC (- N 1))
# N
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done N
sarq $3, %rax
imulq %rcx, %rax
# Done (* N (FAC (- N 1)))
.L1756:
# Done (IF (< N 2) 1 (* N (FAC (- N 1))))
addq $8, %rsp
ret
.L1753:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $16, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1757:
.quad 336
.ascii "Evaluation of (fac 6) gave ~S, expected ~S"
.data
.align 8
.L1760:
.quad 24
.quad 31
.data
.align 8
.L1759:
.quad 16
.quad .L1760+2
.data
.align 8
.L1758:
.quad 8
.quad .L1759+2
.data
.align 8
.L1761:
.quad 400
.ascii "Evaluation of (buffer-list b) gave ~S, expected ~S"
.data
.align 8
.L1762:
.quad 24
.ascii "foo"
.data
.align 8
.L1763:
.quad 24
.ascii "foo"
.data
.align 8
.L1764:
.quad 496
.ascii "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S"
.data
.align 8
.L1765:
.quad 24
.ascii "foo"
.data
.align 8
.L1766:
.quad 24
.ascii "bar"
.data
.align 8
.L1767:
.quad 496
.ascii "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S"
.data
.align 8
.L1768:
.quad 16
.ascii "~S"
.data
.align 8
.L1769:
.quad 400
.ascii "Evaluation of (format \"~S\" a) gave ~S, expected ~S"
.data
.align 8
.L1770:
.quad 16
.ascii "~A"
.data
.align 8
.L1771:
.quad 400
.ascii "Evaluation of (format \"~A\" a) gave ~S, expected ~S"
.text
.L1772:
pushq %rcx
cmpq $24, 0(%rcx)
jne .L1773
# (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FORMAT "~S" A))
# (FORMAT "~S" A)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "~S"
movq $.L1768+4, %rax
# Done "~S"
movq %rax, 16(%rcx)
# A
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 24(%rcx)
# FORMAT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 240(%rax), %rax
# Done FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMAT "~S" A)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FORMAT "~S" A))
# (DEFINE EXPECTED RES)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED RES)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1779:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1775
# Done conditional (EQUAL? RES EXPECTED)
.L1778:
# FALSE
# Done conditional FALSE
.L1777:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1774:
# (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (format \"~S\" a) gave ~S, expected ~S"
movq $.L1769+4, %rax
# Done "Evaluation of (format \"~S\" a) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))
jmp .L1776
.L1775:
movq $23, %rax
.L1776:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FORMAT "~A" A))
# (FORMAT "~A" A)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "~A"
movq $.L1770+4, %rax
# Done "~A"
movq %rax, 16(%rcx)
# A
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 24(%rcx)
# FORMAT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 240(%rax), %rax
# Done FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMAT "~A" A)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FORMAT "~A" A))
# (DEFINE EXPECTED RES)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED RES)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1785:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1781
# Done conditional (EQUAL? RES EXPECTED)
.L1784:
# FALSE
# Done conditional FALSE
.L1783:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1780:
# (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (format \"~A\" a) gave ~S, expected ~S"
movq $.L1771+4, %rax
# Done "Evaluation of (format \"~A\" a) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))
jmp .L1782
.L1781:
movq $23, %rax
.L1782:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))
addq $8, %rsp
ret
.L1773:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $24, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1786:
.quad 16
.ascii "~S"
.data
.align 8
.L1787:
.quad 400
.ascii "Evaluation of (format \"~S\" a) gave ~S, expected ~S"
.data
.align 8
.L1788:
.quad 16
.ascii "~A"
.data
.align 8
.L1789:
.quad 400
.ascii "Evaluation of (format \"~A\" a) gave ~S, expected ~S"
.text
.L1790:
pushq %rcx
cmpq $32, 0(%rcx)
jne .L1791
# (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FORMAT "~S" A))
# (FORMAT "~S" A)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "~S"
movq $.L1786+4, %rax
# Done "~S"
movq %rax, 16(%rcx)
# A
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 24(%rcx)
# FORMAT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 240(%rax), %rax
# Done FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMAT "~S" A)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FORMAT "~S" A))
# (DEFINE EXPECTED SRES)
# SRES
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 24(%rax), %rax
# Done SRES
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED SRES)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1797:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1793
# Done conditional (EQUAL? RES EXPECTED)
.L1796:
# FALSE
# Done conditional FALSE
.L1795:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1792:
# (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (format \"~S\" a) gave ~S, expected ~S"
movq $.L1787+4, %rax
# Done "Evaluation of (format \"~S\" a) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))
jmp .L1794
.L1793:
movq $23, %rax
.L1794:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FORMAT "~A" A))
# (FORMAT "~A" A)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "~A"
movq $.L1788+4, %rax
# Done "~A"
movq %rax, 16(%rcx)
# A
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done A
movq %rax, 24(%rcx)
# FORMAT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 240(%rax), %rax
# Done FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMAT "~A" A)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FORMAT "~A" A))
# (DEFINE EXPECTED ARES)
# ARES
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 32(%rax), %rax
# Done ARES
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED ARES)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1803:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1799
# Done conditional (EQUAL? RES EXPECTED)
.L1802:
# FALSE
# Done conditional FALSE
.L1801:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1798:
# (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (format \"~A\" a) gave ~S, expected ~S"
movq $.L1789+4, %rax
# Done "Evaluation of (format \"~A\" a) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))
jmp .L1800
.L1799:
movq $23, %rax
.L1800:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))
addq $8, %rsp
ret
.L1791:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $32, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1804:
.quad 8
.ascii "0"
.data
.align 8
.L1805:
.quad 48
.ascii "242143"
.data
.align 8
.L1806:
.quad 16
.ascii "-1"
.data
.align 8
.L1807:
.quad 16
.ascii "()"
.data
.align 8
.L1808:
.quad 24
.ascii "foo"
.data
.align 8
.L1810:
.quad .L1571+7
.quad 31
.data
.align 8
.L1809:
.quad .L1569+7
.quad .L1810+2
.data
.align 8
.L1811:
.quad 40
.ascii "(a b)"
.data
.align 8
.L1812:
.quad .L1569+7
.quad .L1571+7
.data
.align 8
.L1813:
.quad 56
.ascii "(a . b)"
.text
.L1814:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L1815
movq $23, %rax
addq $8, %rsp
ret
.L1815:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L1816:
.quad 88
.ascii "#<function>"
.data
.align 8
.L1817:
.quad 40
.ascii "Hello"
.data
.align 8
.L1818:
.quad 56
.ascii "\"Hello\""
.data
.align 8
.L1819:
.quad 40
.ascii "Hello"
.data
.align 8
.L1821:
.quad 40
.ascii "Hello"
.data
.align 8
.L1823:
.quad 40
.ascii "there"
.data
.align 8
.L1822:
.quad .L1823+4
.quad 31
.data
.align 8
.L1820:
.quad .L1821+4
.quad .L1822+2
.data
.align 8
.L1824:
.quad 136
.ascii "(\"Hello\" \"there\")"
.data
.align 8
.L1825:
.quad 104
.ascii "(Hello there)"
.data
.align 8
.L1828:
.quad 16
.quad 31
.data
.align 8
.L1827:
.quad 8
.quad .L1828+2
.data
.align 8
.L1831:
.quad 32
.quad 31
.data
.align 8
.L1830:
.quad 24
.quad .L1831+2
.data
.align 8
.L1829:
.quad .L1830+2
.quad 31
.data
.align 8
.L1826:
.quad .L1827+2
.quad .L1829+2
.data
.align 8
.L1834:
.quad 48
.quad 31
.data
.align 8
.L1833:
.quad 40
.quad .L1834+2
.data
.align 8
.L1837:
.quad 64
.quad 31
.data
.align 8
.L1836:
.quad 56
.quad .L1837+2
.data
.align 8
.L1835:
.quad .L1836+2
.quad 31
.data
.align 8
.L1832:
.quad .L1833+2
.quad .L1835+2
.data
.align 8
.L1840:
.quad 16
.quad 31
.data
.align 8
.L1839:
.quad 8
.quad .L1840+2
.data
.align 8
.L1843:
.quad 32
.quad 31
.data
.align 8
.L1842:
.quad 24
.quad .L1843+2
.data
.align 8
.L1847:
.quad 64
.quad 31
.data
.align 8
.L1846:
.quad 56
.quad .L1847+2
.data
.align 8
.L1845:
.quad 48
.quad .L1846+2
.data
.align 8
.L1844:
.quad 40
.quad .L1845+2
.data
.align 8
.L1841:
.quad .L1842+2
.quad .L1844+2
.data
.align 8
.L1838:
.quad .L1839+2
.quad .L1841+2
.data
.align 8
.L1848:
.quad 744
.ascii "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S"
.text
.L1849:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L1850
# (BEGIN (DEFINE RES (FUNCTION? NIL)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FUNCTION? NIL))
# (FUNCTION? NIL)
# NIL
movq $31, %rcx
# Done NIL
xorl %eax, %eax
andb $7, %cl
cmpb $1, %cl
sete %al
shlb $3, %al
addb $7, %al
# Done (FUNCTION? NIL)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FUNCTION? NIL))
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1856:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1852
# Done conditional (EQUAL? RES EXPECTED)
.L1855:
# FALSE
# Done conditional FALSE
.L1854:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1851:
# (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (function? ()) gave ~S, expected ~S"
movq $.L1563+4, %rax
# Done "Evaluation of (function? ()) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED))
jmp .L1853
.L1852:
movq $23, %rax
.L1853:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FUNCTION? NIL)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (FUNCTION? (LAMBDA NIL))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FUNCTION? (LAMBDA NIL)))
# (FUNCTION? (LAMBDA NIL))
# (LAMBDA NIL)
movq 0(%rsp), %rcx
movq $.L1564, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA NIL)
xorl %eax, %eax
andb $7, %cl
cmpb $1, %cl
sete %al
shlb $3, %al
addb $7, %al
# Done (FUNCTION? (LAMBDA NIL))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FUNCTION? (LAMBDA NIL)))
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1862:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1858
# Done conditional (EQUAL? RES EXPECTED)
.L1861:
# FALSE
# Done conditional FALSE
.L1860:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1857:
# (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (function? (lambda ())) gave ~S, expected ~S"
movq $.L1566+4, %rax
# Done "Evaluation of (function? (lambda ())) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED))
jmp .L1859
.L1858:
movq $23, %rax
.L1859:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FUNCTION? (LAMBDA NIL))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE X (QUOTE (1 2))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED)))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE X (QUOTE (1 2)))
# (QUOTE (1 2))
movq $.L1567+2, %rax
# Done (QUOTE (1 2))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE X (QUOTE (1 2)))
# (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL))))
# (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))
# (QUOTE A)
movq $.L1569+7, %rax
# Done (QUOTE A)
# (CONS (QUOTE B) (CONS (QUOTE C) NIL))
# (QUOTE B)
movq $.L1571+7, %rcx
# Done (QUOTE B)
# (CONS (QUOTE C) NIL)
# (QUOTE C)
movq $.L1573+7, %rdx
# Done (QUOTE C)
# NIL
movq $31, %rsi
# Done NIL
movq %rdx, -16(%rbx)
movq %rsi, -8(%rbx)
leaq -14(%rbx), %rdx
subq $16, %rbx
# Done (CONS (QUOTE C) NIL)
movq %rcx, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS (QUOTE B) (CONS (QUOTE C) NIL))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL))))
# (DEFINE EXPECTED (QUOTE (A B C)))
# (QUOTE (A B C))
movq $.L1575+2, %rax
# Done (QUOTE (A B C))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (A B C)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1868:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1864
# Done conditional (EQUAL? RES EXPECTED)
.L1867:
# FALSE
# Done conditional FALSE
.L1866:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1863:
# (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S"
movq $.L1578+4, %rax
# Done "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED))
jmp .L1865
.L1864:
movq $23, %rax
.L1865:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL))))
# (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))
# X
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done X
# (CONS (QUOTE B) (CONS (QUOTE C) NIL))
# (QUOTE B)
movq $.L1571+7, %rcx
# Done (QUOTE B)
# (CONS (QUOTE C) NIL)
# (QUOTE C)
movq $.L1573+7, %rdx
# Done (QUOTE C)
# NIL
movq $31, %rsi
# Done NIL
movq %rdx, -16(%rbx)
movq %rsi, -8(%rbx)
leaq -14(%rbx), %rdx
subq $16, %rbx
# Done (CONS (QUOTE C) NIL)
movq %rcx, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS (QUOTE B) (CONS (QUOTE C) NIL))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL))))
# (DEFINE EXPECTED (QUOTE ((1 2) B C)))
# (QUOTE ((1 2) B C))
movq $.L1579+2, %rax
# Done (QUOTE ((1 2) B C))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE ((1 2) B C)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1874:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1870
# Done conditional (EQUAL? RES EXPECTED)
.L1873:
# FALSE
# Done conditional FALSE
.L1872:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1869:
# (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S"
movq $.L1584+4, %rax
# Done "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED))
jmp .L1871
.L1870:
movq $23, %rax
.L1871:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL))))
# (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))
# (QUOTE A)
movq $.L1569+7, %rax
# Done (QUOTE A)
# (CONS X (CONS (QUOTE C) NIL))
# X
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 16(%rcx), %rcx
# Done X
# (CONS (QUOTE C) NIL)
# (QUOTE C)
movq $.L1573+7, %rdx
# Done (QUOTE C)
# NIL
movq $31, %rsi
# Done NIL
movq %rdx, -16(%rbx)
movq %rsi, -8(%rbx)
leaq -14(%rbx), %rdx
subq $16, %rbx
# Done (CONS (QUOTE C) NIL)
movq %rcx, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS X (CONS (QUOTE C) NIL))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL))))
# (DEFINE EXPECTED (QUOTE (A (1 2) C)))
# (QUOTE (A (1 2) C))
movq $.L1585+2, %rax
# Done (QUOTE (A (1 2) C))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (A (1 2) C)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1880:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1876
# Done conditional (EQUAL? RES EXPECTED)
.L1879:
# FALSE
# Done conditional FALSE
.L1878:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1875:
# (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S"
movq $.L1590+4, %rax
# Done "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED))
jmp .L1877
.L1876:
movq $23, %rax
.L1877:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL))))
# (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))
# (QUOTE A)
movq $.L1569+7, %rax
# Done (QUOTE A)
# (CONS (QUOTE B) (CONS X NIL))
# (QUOTE B)
movq $.L1571+7, %rcx
# Done (QUOTE B)
# (CONS X NIL)
# X
movq 0(%rsp), %rdx
movq 8(%rdx), %rdx
movq 16(%rdx), %rdx
# Done X
# NIL
movq $31, %rsi
# Done NIL
movq %rdx, -16(%rbx)
movq %rsi, -8(%rbx)
leaq -14(%rbx), %rdx
subq $16, %rbx
# Done (CONS X NIL)
movq %rcx, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS (QUOTE B) (CONS X NIL))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL))))
# (DEFINE EXPECTED (QUOTE (A B (1 2))))
# (QUOTE (A B (1 2)))
movq $.L1591+2, %rax
# Done (QUOTE (A B (1 2)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (A B (1 2))))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1886:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1882
# Done conditional (EQUAL? RES EXPECTED)
.L1885:
# FALSE
# Done conditional FALSE
.L1884:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1881:
# (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S"
movq $.L1596+4, %rax
# Done "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED))
jmp .L1883
.L1882:
movq $23, %rax
.L1883:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL))))
# (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# X
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done X
movq %rax, 16(%rcx)
# (CONS (QUOTE B) (CONS (QUOTE C) NIL))
# (QUOTE B)
movq $.L1571+7, %rax
# Done (QUOTE B)
# (CONS (QUOTE C) NIL)
# (QUOTE C)
movq $.L1573+7, %rdx
# Done (QUOTE C)
# NIL
movq $31, %rsi
# Done NIL
movq %rdx, -16(%rbx)
movq %rsi, -8(%rbx)
leaq -14(%rbx), %rdx
subq $16, %rbx
# Done (CONS (QUOTE C) NIL)
movq %rax, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE B) (CONS (QUOTE C) NIL))
movq %rax, 24(%rcx)
# APPEND
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 872(%rax), %rax
# Done APPEND
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL))))
# (DEFINE EXPECTED (QUOTE (1 2 B C)))
# (QUOTE (1 2 B C))
movq $.L1597+2, %rax
# Done (QUOTE (1 2 B C))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (1 2 B C)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1892:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1888
# Done conditional (EQUAL? RES EXPECTED)
.L1891:
# FALSE
# Done conditional FALSE
.L1890:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1887:
# (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S"
movq $.L1601+4, %rax
# Done "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED))
jmp .L1889
.L1888:
movq $23, %rax
.L1889:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL))))
# (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))
# (APPEND X (CONS (QUOTE C) NIL))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# X
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done X
movq %rax, 16(%rcx)
# (CONS (QUOTE C) NIL)
# (QUOTE C)
movq $.L1573+7, %rax
# Done (QUOTE C)
# NIL
movq $31, %rdx
# Done NIL
movq %rax, -16(%rbx)
movq %rdx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE C) NIL)
movq %rax, 24(%rcx)
# APPEND
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 872(%rax), %rax
# Done APPEND
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (APPEND X (CONS (QUOTE C) NIL))
# (QUOTE A)
movq $.L1569+7, %rax
# Done (QUOTE A)
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL))))
# (DEFINE EXPECTED (QUOTE (A 1 2 C)))
# (QUOTE (A 1 2 C))
movq $.L1602+2, %rax
# Done (QUOTE (A 1 2 C))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (A 1 2 C)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1898:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1894
# Done conditional (EQUAL? RES EXPECTED)
.L1897:
# FALSE
# Done conditional FALSE
.L1896:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1893:
# (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S"
movq $.L1606+4, %rax
# Done "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED))
jmp .L1895
.L1894:
movq $23, %rax
.L1895:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL))))
# (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))
# (CONS (QUOTE B) (APPEND X NIL))
# (APPEND X NIL)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# X
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done X
movq %rax, 16(%rcx)
# NIL
movq $31, %rax
# Done NIL
movq %rax, 24(%rcx)
# APPEND
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 872(%rax), %rax
# Done APPEND
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPEND X NIL)
# (QUOTE B)
movq $.L1571+7, %rcx
# Done (QUOTE B)
movq %rcx, -16(%rbx)
movq %rax, -8(%rbx)
leaq -14(%rbx), %rcx
subq $16, %rbx
# Done (CONS (QUOTE B) (APPEND X NIL))
# (QUOTE A)
movq $.L1569+7, %rax
# Done (QUOTE A)
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL))))
# (DEFINE EXPECTED (QUOTE (A B 1 2)))
# (QUOTE (A B 1 2))
movq $.L1607+2, %rax
# Done (QUOTE (A B 1 2))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (A B 1 2)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1904:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1900
# Done conditional (EQUAL? RES EXPECTED)
.L1903:
# FALSE
# Done conditional FALSE
.L1902:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1899:
# (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S"
movq $.L1611+4, %rax
# Done "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))
jmp .L1901
.L1900:
movq $23, %rax
.L1901:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))))
addq $8, %rsp
# Done (BEGIN (DEFINE X (QUOTE (1 2))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (LENGTH (QUOTE (1 2 3)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (LENGTH (QUOTE (1 2 3))))
# (LENGTH (QUOTE (1 2 3)))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (QUOTE (1 2 3))
movq $.L1612+2, %rax
# Done (QUOTE (1 2 3))
movq %rax, 16(%rcx)
# LENGTH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 600(%rax), %rax
# Done LENGTH
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LENGTH (QUOTE (1 2 3)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (LENGTH (QUOTE (1 2 3))))
# (DEFINE EXPECTED 3)
# 3
movq $24, %rax
# Done 3
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 3)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1910:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1906
# Done conditional (EQUAL? RES EXPECTED)
.L1909:
# FALSE
# Done conditional FALSE
.L1908:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1905:
# (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S"
movq $.L1615+4, %rax
# Done "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
jmp .L1907
.L1906:
movq $23, %rax
.L1907:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (LENGTH (QUOTE (1 2 3)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (LIST 1 2 3)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (LIST 1 2 3))
# (LIST 1 2 3)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# 1
movq $8, %rax
# Done 1
movq %rax, 16(%rcx)
# 2
movq $16, %rax
# Done 2
movq %rax, 24(%rcx)
# 3
movq $24, %rax
# Done 3
movq %rax, 32(%rcx)
# LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 896(%rax), %rax
# Done LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (LIST 1 2 3)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (LIST 1 2 3))
# (DEFINE EXPECTED (QUOTE (1 2 3)))
# (QUOTE (1 2 3))
movq $.L1616+2, %rax
# Done (QUOTE (1 2 3))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (1 2 3)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1916:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1912
# Done conditional (EQUAL? RES EXPECTED)
.L1915:
# FALSE
# Done conditional FALSE
.L1914:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1911:
# (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (list 1 2 3) gave ~S, expected ~S"
movq $.L1619+4, %rax
# Done "Evaluation of (list 1 2 3) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED))
jmp .L1913
.L1912:
movq $23, %rax
.L1913:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (LIST 1 2 3)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES TRUE)
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1922:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1918
# Done conditional (EQUAL? RES EXPECTED)
.L1921:
# FALSE
# Done conditional FALSE
.L1920:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1917:
# (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (and) gave ~S, expected ~S"
movq $.L1620+4, %rax
# Done "Evaluation of (and) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED))
jmp .L1919
.L1918:
movq $23, %rax
.L1919:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES TRUE)
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1928:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1924
# Done conditional (EQUAL? RES EXPECTED)
.L1927:
# FALSE
# Done conditional FALSE
.L1926:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1923:
# (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (and true) gave ~S, expected ~S"
movq $.L1621+4, %rax
# Done "Evaluation of (and true) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED))
jmp .L1925
.L1924:
movq $23, %rax
.L1925:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES FALSE)
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1934:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1930
# Done conditional (EQUAL? RES EXPECTED)
.L1933:
# FALSE
# Done conditional FALSE
.L1932:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1929:
# (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (and false) gave ~S, expected ~S"
movq $.L1622+4, %rax
# Done "Evaluation of (and false) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED))
jmp .L1931
.L1930:
movq $23, %rax
.L1931:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (IF TRUE FALSE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (IF TRUE FALSE FALSE))
# (IF TRUE FALSE FALSE)
# TRUE
# Done conditional TRUE
.L1935:
# FALSE
movq $7, %rax
# Done FALSE
jmp .L1937
.L1936:
# FALSE
movq $7, %rax
# Done FALSE
.L1937:
# Done (IF TRUE FALSE FALSE)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (IF TRUE FALSE FALSE))
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1943:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1939
# Done conditional (EQUAL? RES EXPECTED)
.L1942:
# FALSE
# Done conditional FALSE
.L1941:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1938:
# (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (and true false) gave ~S, expected ~S"
movq $.L1623+4, %rax
# Done "Evaluation of (and true false) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED))
jmp .L1940
.L1939:
movq $23, %rax
.L1940:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (IF TRUE FALSE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (IF FALSE TRUE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (IF FALSE TRUE FALSE))
# (IF FALSE TRUE FALSE)
# FALSE
# Done conditional FALSE
jmp .L1945
.L1944:
# TRUE
movq $15, %rax
# Done TRUE
jmp .L1946
.L1945:
# FALSE
movq $7, %rax
# Done FALSE
.L1946:
# Done (IF FALSE TRUE FALSE)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (IF FALSE TRUE FALSE))
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1952:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1948
# Done conditional (EQUAL? RES EXPECTED)
.L1951:
# FALSE
# Done conditional FALSE
.L1950:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1947:
# (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (and false true) gave ~S, expected ~S"
movq $.L1624+4, %rax
# Done "Evaluation of (and false true) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED))
jmp .L1949
.L1948:
movq $23, %rax
.L1949:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (IF FALSE TRUE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE)) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE))
# (IF (IF TRUE TRUE FALSE) TRUE FALSE)
# (IF TRUE TRUE FALSE)
.L1958:
# TRUE
# Done conditional TRUE
.L1957:
# TRUE
# Done conditional TRUE
.L1956:
# FALSE
# Done conditional FALSE
# Done conditional (IF TRUE TRUE FALSE)
.L1953:
# TRUE
movq $15, %rax
# Done TRUE
jmp .L1955
.L1954:
# FALSE
movq $7, %rax
# Done FALSE
.L1955:
# Done (IF (IF TRUE TRUE FALSE) TRUE FALSE)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE))
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1964:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1960
# Done conditional (EQUAL? RES EXPECTED)
.L1963:
# FALSE
# Done conditional FALSE
.L1962:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1959:
# (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (and true true true) gave ~S, expected ~S"
movq $.L1625+4, %rax
# Done "Evaluation of (and true true true) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED))
jmp .L1961
.L1960:
movq $23, %rax
.L1961:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE)) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES FALSE)
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1970:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1966
# Done conditional (EQUAL? RES EXPECTED)
.L1969:
# FALSE
# Done conditional FALSE
.L1968:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1965:
# (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (or) gave ~S, expected ~S"
movq $.L1626+4, %rax
# Done "Evaluation of (or) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED))
jmp .L1967
.L1966:
movq $23, %rax
.L1967:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES TRUE)
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1976:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1972
# Done conditional (EQUAL? RES EXPECTED)
.L1975:
# FALSE
# Done conditional FALSE
.L1974:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1971:
# (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (or true) gave ~S, expected ~S"
movq $.L1627+4, %rax
# Done "Evaluation of (or true) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED))
jmp .L1973
.L1972:
movq $23, %rax
.L1973:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES FALSE)
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1982:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1978
# Done conditional (EQUAL? RES EXPECTED)
.L1981:
# FALSE
# Done conditional FALSE
.L1980:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1977:
# (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (or false) gave ~S, expected ~S"
movq $.L1628+4, %rax
# Done "Evaluation of (or false) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED))
jmp .L1979
.L1978:
movq $23, %rax
.L1979:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO)))
# (EQ? (INTERN "foo") (QUOTE FOO))
# (INTERN "foo")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# "foo"
movq $.L1629+4, %rax
# Done "foo"
movq %rax, 16(%rcx)
# INTERN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 560(%rax), %rax
# Done INTERN
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (INTERN "foo")
# (QUOTE FOO)
movq $.L1630+7, %rdx
# Done (QUOTE FOO)
xorl %eax, %eax
cmpq %rdx, %rcx
sete %al
shlb $3, %al
addb $7, %al
# Done (EQ? (INTERN "foo") (QUOTE FOO))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO)))
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1988:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1984
# Done conditional (EQUAL? RES EXPECTED)
.L1987:
# FALSE
# Done conditional FALSE
.L1986:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1983:
# (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S"
movq $.L1632+4, %rax
# Done "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED))
jmp .L1985
.L1984:
movq $23, %rax
.L1985:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (SYMBOL-NAME (INTERN "bar"))) (DEFINE EXPECTED "bar") (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (SYMBOL-NAME (INTERN "bar")))
# (SYMBOL-NAME (INTERN "bar"))
# (INTERN "bar")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# "bar"
movq $.L1633+4, %rax
# Done "bar"
movq %rax, 16(%rcx)
# INTERN
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 560(%rax), %rax
# Done INTERN
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (INTERN "bar")
movq -7(%rax), %rax
# Done (SYMBOL-NAME (INTERN "bar"))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (SYMBOL-NAME (INTERN "bar")))
# (DEFINE EXPECTED "bar")
# "bar"
movq $.L1634+4, %rax
# Done "bar"
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED "bar")
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1994:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1990
# Done conditional (EQUAL? RES EXPECTED)
.L1993:
# FALSE
# Done conditional FALSE
.L1992:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1989:
# (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S"
movq $.L1635+4, %rax
# Done "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED))
jmp .L1991
.L1990:
movq $23, %rax
.L1991:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (SYMBOL-NAME (INTERN "bar"))) (DEFINE EXPECTED "bar") (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (+ 1 1)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (+ 1 1))
# (+ 1 1)
# 1
movq $8, %rax
# Done 1
# 1
movq $8, %rcx
# Done 1
addq %rcx, %rax
# Done (+ 1 1)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (+ 1 1))
# (DEFINE EXPECTED 2)
# 2
movq $16, %rax
# Done 2
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 2)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2000:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L1996
# Done conditional (EQUAL? RES EXPECTED)
.L1999:
# FALSE
# Done conditional FALSE
.L1998:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L1995:
# (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (1+ 1) gave ~S, expected ~S"
movq $.L1636+4, %rax
# Done "Evaluation of (1+ 1) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED))
jmp .L1997
.L1996:
movq $23, %rax
.L1997:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (+ 1 1)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (- 1 1)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (- 1 1))
# (- 1 1)
# 1
movq $8, %rax
# Done 1
# 1
movq $8, %rcx
# Done 1
subq %rcx, %rax
# Done (- 1 1)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (- 1 1))
# (DEFINE EXPECTED 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 0)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2006:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2002
# Done conditional (EQUAL? RES EXPECTED)
.L2005:
# FALSE
# Done conditional FALSE
.L2004:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2001:
# (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (1- 1) gave ~S, expected ~S"
movq $.L1637+4, %rax
# Done "Evaluation of (1- 1) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED))
jmp .L2003
.L2002:
movq $23, %rax
.L2003:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (- 1 1)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))) (DEFINE EXPECTED (QUOTE (2 3 4))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044))))
# (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2043 (QUOTE (1 2 3)))
# (QUOTE (1 2 3))
movq $.L1638+2, %rax
# Done (QUOTE (1 2 3))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2043 (QUOTE (1 2 3)))
# (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044))
# (NULL? #:G2043)
# #:G2043
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2043
movq $31, %rcx
cmpq %rcx, %rax
jne .L2008
# Done conditional (NULL? #:G2043)
.L2007:
# NIL
movq $31, %rax
# Done NIL
jmp .L2009
.L2008:
# (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G2041 (LAMBDA (X) (+ X 1)))
# (LAMBDA (X) (+ X 1))
movq 0(%rsp), %rax
movq $.L1641, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (X) (+ X 1))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G2041 (LAMBDA (X) (+ X 1)))
# (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL))
# (CONS (#:G2041 (CAR #:G2043)) NIL)
# (#:G2041 (CAR #:G2043))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2043)
# #:G2043
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2043
movq -2(%rax), %rax
# Done (CAR #:G2043)
movq %rax, 16(%rcx)
# #:G2041
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G2041
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2041 (CAR #:G2043))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2041 (CAR #:G2043)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL))
# (DEFINE #:G2045 #:G2044)
# #:G2044
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2044
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G2045 #:G2044)
# (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043))))))
# (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))
movq 0(%rsp), %rax
movq $.L1643, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043))))))
# (#:G2042 (CDR #:G2043))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2043)
# #:G2043
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2043
movq 6(%rax), %rax
# Done (CDR #:G2043)
movq %rax, 16(%rcx)
# #:G2042
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2042
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2042 (CDR #:G2043))
# #:G2044
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2044
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)
.L2009:
# Done (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044))))
# (DEFINE EXPECTED (QUOTE (2 3 4)))
# (QUOTE (2 3 4))
movq $.L1651+2, %rax
# Done (QUOTE (2 3 4))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (2 3 4)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2015:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2011
# Done conditional (EQUAL? RES EXPECTED)
.L2014:
# FALSE
# Done conditional FALSE
.L2013:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2010:
# (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S"
movq $.L1654+4, %rax
# Done "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED))
jmp .L2012
.L2011:
movq $23, %rax
.L2012:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))) (DEFINE EXPECTED (QUOTE (2 3 4))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))) (DEFINE EXPECTED NIL) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049))))
# (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2048 NIL)
# NIL
movq $31, %rax
# Done NIL
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2048 NIL)
# (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049))
# (NULL? #:G2048)
# #:G2048
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2048
movq $31, %rcx
cmpq %rcx, %rax
jne .L2017
# Done conditional (NULL? #:G2048)
.L2016:
# NIL
movq $31, %rax
# Done NIL
jmp .L2018
.L2017:
# (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!")))
# (LAMBDA (X) (ERROR "Whoa!"))
movq 0(%rsp), %rax
movq $.L1656, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (X) (ERROR "Whoa!"))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!")))
# (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL))
# (CONS (#:G2046 (CAR #:G2048)) NIL)
# (#:G2046 (CAR #:G2048))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2048)
# #:G2048
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2048
movq -2(%rax), %rax
# Done (CAR #:G2048)
movq %rax, 16(%rcx)
# #:G2046
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G2046
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2046 (CAR #:G2048))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2046 (CAR #:G2048)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL))
# (DEFINE #:G2050 #:G2049)
# #:G2049
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2049
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G2050 #:G2049)
# (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048))))))
# (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))
movq 0(%rsp), %rax
movq $.L1658, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048))))))
# (#:G2047 (CDR #:G2048))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2048)
# #:G2048
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2048
movq 6(%rax), %rax
# Done (CDR #:G2048)
movq %rax, 16(%rcx)
# #:G2047
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2047
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2047 (CDR #:G2048))
# #:G2049
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2049
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)
.L2018:
# Done (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049))))
# (DEFINE EXPECTED NIL)
# NIL
movq $31, %rax
# Done NIL
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED NIL)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2024:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2020
# Done conditional (EQUAL? RES EXPECTED)
.L2023:
# FALSE
# Done conditional FALSE
.L2022:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2019:
# (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S"
movq $.L1666+4, %rax
# Done "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))
jmp .L2021
.L2020:
movq $23, %rax
.L2021:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))) (DEFINE EXPECTED NIL) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))) (DEFINE EXPECTED (QUOTE (A))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054))))
# (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2053 (QUOTE (A)))
# (QUOTE (A))
movq $.L1667+2, %rax
# Done (QUOTE (A))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2053 (QUOTE (A)))
# (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054))
# (NULL? #:G2053)
# #:G2053
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2053
movq $31, %rcx
cmpq %rcx, %rax
jne .L2026
# Done conditional (NULL? #:G2053)
.L2025:
# NIL
movq $31, %rax
# Done NIL
jmp .L2027
.L2026:
# (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)
subq $48, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# (DEFINE #:G2051 (LAMBDA (X) X))
# (LAMBDA (X) X)
movq 0(%rsp), %rax
movq $.L1668, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (X) X)
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE #:G2051 (LAMBDA (X) X))
# (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL))
# (CONS (#:G2051 (CAR #:G2053)) NIL)
# (#:G2051 (CAR #:G2053))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CAR #:G2053)
# #:G2053
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2053
movq -2(%rax), %rax
# Done (CAR #:G2053)
movq %rax, 16(%rcx)
# #:G2051
movq 0(%rsp), %rax
movq 40(%rax), %rax
# Done #:G2051
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2051 (CAR #:G2053))
# NIL
movq $31, %rcx
# Done NIL
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (#:G2051 (CAR #:G2053)) NIL)
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL))
# (DEFINE #:G2055 #:G2054)
# #:G2054
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2054
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE #:G2055 #:G2054)
# (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053))))))
# (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))
movq 0(%rsp), %rax
movq $.L1670, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053))))))
# (#:G2052 (CDR #:G2053))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (CDR #:G2053)
# #:G2053
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done #:G2053
movq 6(%rax), %rax
# Done (CDR #:G2053)
movq %rax, 16(%rcx)
# #:G2052
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2052
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2052 (CDR #:G2053))
# #:G2054
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done #:G2054
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)
.L2027:
# Done (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054))))
# (DEFINE EXPECTED (QUOTE (A)))
# (QUOTE (A))
movq $.L1678+2, %rax
# Done (QUOTE (A))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (A)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2033:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2029
# Done conditional (EQUAL? RES EXPECTED)
.L2032:
# FALSE
# Done conditional FALSE
.L2031:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2028:
# (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S"
movq $.L1679+4, %rax
# Done "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED))
jmp .L2030
.L2029:
movq $23, %rax
.L2030:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))) (DEFINE EXPECTED (QUOTE (A))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3)))))
# (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057)))))))
# (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))
movq 0(%rsp), %rax
movq $.L1680, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057)))))))
# (#:G2056 (QUOTE (1 2 3)))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (QUOTE (1 2 3))
movq $.L1688+2, %rax
# Done (QUOTE (1 2 3))
movq %rax, 16(%rcx)
# #:G2056
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2056
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2056 (QUOTE (1 2 3)))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3)))))
# (DEFINE EXPECTED 2)
# 2
movq $16, %rax
# Done 2
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 2)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2039:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2035
# Done conditional (EQUAL? RES EXPECTED)
.L2038:
# FALSE
# Done conditional FALSE
.L2037:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2034:
# (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S"
movq $.L1691+4, %rax
# Done "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))
jmp .L2036
.L2035:
movq $23, %rax
.L2036:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL)))
# (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059)))))))
# (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))
movq 0(%rsp), %rax
movq $.L1693, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059)))))))
# (#:G2058 NIL)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# NIL
movq $31, %rax
# Done NIL
movq %rax, 16(%rcx)
# #:G2058
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2058
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2058 NIL)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL)))
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2045:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2041
# Done conditional (EQUAL? RES EXPECTED)
.L2044:
# FALSE
# Done conditional FALSE
.L2043:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2040:
# (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S"
movq $.L1701+4, %rax
# Done "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))
jmp .L2042
.L2041:
movq $23, %rax
.L2042:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1)))))
# (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061)))))))
# (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))
movq 0(%rsp), %rax
movq $.L1702, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061)))))))
# (#:G2060 (QUOTE (1)))
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# (QUOTE (1))
movq $.L1710+2, %rax
# Done (QUOTE (1))
movq %rax, 16(%rcx)
# #:G2060
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2060
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2060 (QUOTE (1)))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1)))))
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2051:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2047
# Done conditional (EQUAL? RES EXPECTED)
.L2050:
# FALSE
# Done conditional FALSE
.L2049:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2046:
# (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S"
movq $.L1711+4, %rax
# Done "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))
jmp .L2048
.L2047:
movq $23, %rax
.L2048:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINITIONS) (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (+))
# (+)
movq $0, %rax
# Done (+)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (+))
# (DEFINE EXPECTED 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 0)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2057:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2053
# Done conditional (EQUAL? RES EXPECTED)
.L2056:
# FALSE
# Done conditional FALSE
.L2055:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2052:
# (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (+) gave ~S, expected ~S"
movq $.L1712+4, %rax
# Done "Evaluation of (+) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED))
jmp .L2054
.L2053:
movq $23, %rax
.L2054:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY + (QUOTE NIL)))
# (APPLY + (QUOTE NIL))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# +
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 688(%rax), %rax
# Done +
movq %rax, 16(%rcx)
# (QUOTE NIL)
movq $31, %rax
# Done (QUOTE NIL)
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY + (QUOTE NIL))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY + (QUOTE NIL)))
# (DEFINE EXPECTED 0)
# 0
movq $0, %rax
# Done 0
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 0)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2063:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2059
# Done conditional (EQUAL? RES EXPECTED)
.L2062:
# FALSE
# Done conditional FALSE
.L2061:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2058:
# (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply + (quote ())) gave ~S, expected ~S"
movq $.L1713+4, %rax
# Done "Evaluation of (apply + (quote ())) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))
jmp .L2060
.L2059:
movq $23, %rax
.L2060:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (+ 1))
# (+ 1)
# 1
movq $8, %rax
# Done 1
# Done (+ 1)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (+ 1))
# (DEFINE EXPECTED 1)
# 1
movq $8, %rax
# Done 1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2069:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2065
# Done conditional (EQUAL? RES EXPECTED)
.L2068:
# FALSE
# Done conditional FALSE
.L2067:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2064:
# (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (+ 1) gave ~S, expected ~S"
movq $.L1714+4, %rax
# Done "Evaluation of (+ 1) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED))
jmp .L2066
.L2065:
movq $23, %rax
.L2066:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY + (QUOTE (1))))
# (APPLY + (QUOTE (1)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# +
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 688(%rax), %rax
# Done +
movq %rax, 16(%rcx)
# (QUOTE (1))
movq $.L1715+2, %rax
# Done (QUOTE (1))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY + (QUOTE (1)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY + (QUOTE (1))))
# (DEFINE EXPECTED 1)
# 1
movq $8, %rax
# Done 1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2075:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2071
# Done conditional (EQUAL? RES EXPECTED)
.L2074:
# FALSE
# Done conditional FALSE
.L2073:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2070:
# (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply + (quote (1))) gave ~S, expected ~S"
movq $.L1716+4, %rax
# Done "Evaluation of (apply + (quote (1))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2072
.L2071:
movq $23, %rax
.L2072:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (+ 1 2))
# (+ 1 2)
# 1
movq $8, %rax
# Done 1
# 2
movq $16, %rcx
# Done 2
addq %rcx, %rax
# Done (+ 1 2)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (+ 1 2))
# (DEFINE EXPECTED 3)
# 3
movq $24, %rax
# Done 3
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 3)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2081:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2077
# Done conditional (EQUAL? RES EXPECTED)
.L2080:
# FALSE
# Done conditional FALSE
.L2079:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2076:
# (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (+ 1 2) gave ~S, expected ~S"
movq $.L1717+4, %rax
# Done "Evaluation of (+ 1 2) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED))
jmp .L2078
.L2077:
movq $23, %rax
.L2078:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY + (QUOTE (1 2))))
# (APPLY + (QUOTE (1 2)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# +
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 688(%rax), %rax
# Done +
movq %rax, 16(%rcx)
# (QUOTE (1 2))
movq $.L1718+2, %rax
# Done (QUOTE (1 2))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY + (QUOTE (1 2)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY + (QUOTE (1 2))))
# (DEFINE EXPECTED 3)
# 3
movq $24, %rax
# Done 3
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 3)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2087:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2083
# Done conditional (EQUAL? RES EXPECTED)
.L2086:
# FALSE
# Done conditional FALSE
.L2085:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2082:
# (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S"
movq $.L1720+4, %rax
# Done "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2084
.L2083:
movq $23, %rax
.L2084:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (+ 1 2 3))
# (+ 1 2 3)
# 1
movq $8, %rax
# Done 1
# 2
movq $16, %rcx
# Done 2
addq %rcx, %rax
# 3
movq $24, %rcx
# Done 3
addq %rcx, %rax
# Done (+ 1 2 3)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (+ 1 2 3))
# (DEFINE EXPECTED 6)
# 6
movq $48, %rax
# Done 6
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 6)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2093:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2089
# Done conditional (EQUAL? RES EXPECTED)
.L2092:
# FALSE
# Done conditional FALSE
.L2091:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2088:
# (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (+ 1 2 3) gave ~S, expected ~S"
movq $.L1721+4, %rax
# Done "Evaluation of (+ 1 2 3) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED))
jmp .L2090
.L2089:
movq $23, %rax
.L2090:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY + (QUOTE (1 2 3))))
# (APPLY + (QUOTE (1 2 3)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# +
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 688(%rax), %rax
# Done +
movq %rax, 16(%rcx)
# (QUOTE (1 2 3))
movq $.L1722+2, %rax
# Done (QUOTE (1 2 3))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY + (QUOTE (1 2 3)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY + (QUOTE (1 2 3))))
# (DEFINE EXPECTED 6)
# 6
movq $48, %rax
# Done 6
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 6)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2099:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2095
# Done conditional (EQUAL? RES EXPECTED)
.L2098:
# FALSE
# Done conditional FALSE
.L2097:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2094:
# (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S"
movq $.L1725+4, %rax
# Done "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2096
.L2095:
movq $23, %rax
.L2096:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (*))
# (*)
movq $8, %rax
# Done (*)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (*))
# (DEFINE EXPECTED 1)
# 1
movq $8, %rax
# Done 1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2105:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2101
# Done conditional (EQUAL? RES EXPECTED)
.L2104:
# FALSE
# Done conditional FALSE
.L2103:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2100:
# (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (*) gave ~S, expected ~S"
movq $.L1726+4, %rax
# Done "Evaluation of (*) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED))
jmp .L2102
.L2101:
movq $23, %rax
.L2102:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY * (QUOTE NIL)))
# (APPLY * (QUOTE NIL))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# *
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 680(%rax), %rax
# Done *
movq %rax, 16(%rcx)
# (QUOTE NIL)
movq $31, %rax
# Done (QUOTE NIL)
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY * (QUOTE NIL))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY * (QUOTE NIL)))
# (DEFINE EXPECTED 1)
# 1
movq $8, %rax
# Done 1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2111:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2107
# Done conditional (EQUAL? RES EXPECTED)
.L2110:
# FALSE
# Done conditional FALSE
.L2109:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2106:
# (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply * (quote ())) gave ~S, expected ~S"
movq $.L1727+4, %rax
# Done "Evaluation of (apply * (quote ())) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))
jmp .L2108
.L2107:
movq $23, %rax
.L2108:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (* 1))
# (* 1)
# 1
movq $8, %rax
# Done 1
# Done (* 1)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (* 1))
# (DEFINE EXPECTED 1)
# 1
movq $8, %rax
# Done 1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2117:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2113
# Done conditional (EQUAL? RES EXPECTED)
.L2116:
# FALSE
# Done conditional FALSE
.L2115:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2112:
# (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (* 1) gave ~S, expected ~S"
movq $.L1728+4, %rax
# Done "Evaluation of (* 1) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED))
jmp .L2114
.L2113:
movq $23, %rax
.L2114:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY * (QUOTE (1))))
# (APPLY * (QUOTE (1)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# *
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 680(%rax), %rax
# Done *
movq %rax, 16(%rcx)
# (QUOTE (1))
movq $.L1729+2, %rax
# Done (QUOTE (1))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY * (QUOTE (1)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY * (QUOTE (1))))
# (DEFINE EXPECTED 1)
# 1
movq $8, %rax
# Done 1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2123:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2119
# Done conditional (EQUAL? RES EXPECTED)
.L2122:
# FALSE
# Done conditional FALSE
.L2121:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2118:
# (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply * (quote (1))) gave ~S, expected ~S"
movq $.L1730+4, %rax
# Done "Evaluation of (apply * (quote (1))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2120
.L2119:
movq $23, %rax
.L2120:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (* 1 2))
# (* 1 2)
# 1
movq $8, %rax
# Done 1
# 2
movq $16, %rcx
# Done 2
sarq $3, %rax
imulq %rcx, %rax
# Done (* 1 2)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (* 1 2))
# (DEFINE EXPECTED 2)
# 2
movq $16, %rax
# Done 2
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 2)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2129:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2125
# Done conditional (EQUAL? RES EXPECTED)
.L2128:
# FALSE
# Done conditional FALSE
.L2127:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2124:
# (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (* 1 2) gave ~S, expected ~S"
movq $.L1731+4, %rax
# Done "Evaluation of (* 1 2) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED))
jmp .L2126
.L2125:
movq $23, %rax
.L2126:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY * (QUOTE (1 2))))
# (APPLY * (QUOTE (1 2)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# *
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 680(%rax), %rax
# Done *
movq %rax, 16(%rcx)
# (QUOTE (1 2))
movq $.L1732+2, %rax
# Done (QUOTE (1 2))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY * (QUOTE (1 2)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY * (QUOTE (1 2))))
# (DEFINE EXPECTED 2)
# 2
movq $16, %rax
# Done 2
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 2)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2135:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2131
# Done conditional (EQUAL? RES EXPECTED)
.L2134:
# FALSE
# Done conditional FALSE
.L2133:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2130:
# (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S"
movq $.L1734+4, %rax
# Done "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2132
.L2131:
movq $23, %rax
.L2132:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (* 1 2 3))
# (* 1 2 3)
# 1
movq $8, %rax
# Done 1
# 2
movq $16, %rcx
# Done 2
sarq $3, %rax
imulq %rcx, %rax
# 3
movq $24, %rcx
# Done 3
sarq $3, %rax
imulq %rcx, %rax
# Done (* 1 2 3)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (* 1 2 3))
# (DEFINE EXPECTED 6)
# 6
movq $48, %rax
# Done 6
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 6)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2141:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2137
# Done conditional (EQUAL? RES EXPECTED)
.L2140:
# FALSE
# Done conditional FALSE
.L2139:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2136:
# (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (* 1 2 3) gave ~S, expected ~S"
movq $.L1735+4, %rax
# Done "Evaluation of (* 1 2 3) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED))
jmp .L2138
.L2137:
movq $23, %rax
.L2138:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY * (QUOTE (1 2 3))))
# (APPLY * (QUOTE (1 2 3)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# *
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 680(%rax), %rax
# Done *
movq %rax, 16(%rcx)
# (QUOTE (1 2 3))
movq $.L1736+2, %rax
# Done (QUOTE (1 2 3))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY * (QUOTE (1 2 3)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY * (QUOTE (1 2 3))))
# (DEFINE EXPECTED 6)
# 6
movq $48, %rax
# Done 6
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 6)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2147:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2143
# Done conditional (EQUAL? RES EXPECTED)
.L2146:
# FALSE
# Done conditional FALSE
.L2145:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2142:
# (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S"
movq $.L1739+4, %rax
# Done "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2144
.L2143:
movq $23, %rax
.L2144:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (- 1))
# (- 1)
# 1
movq $8, %rax
# Done 1
negq %rax
# Done (- 1)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (- 1))
# (DEFINE EXPECTED -1)
# -1
movq $-8, %rax
# Done -1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED -1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2153:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2149
# Done conditional (EQUAL? RES EXPECTED)
.L2152:
# FALSE
# Done conditional FALSE
.L2151:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2148:
# (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (- 1) gave ~S, expected ~S"
movq $.L1740+4, %rax
# Done "Evaluation of (- 1) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED))
jmp .L2150
.L2149:
movq $23, %rax
.L2150:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY - (QUOTE (1))))
# (APPLY - (QUOTE (1)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# -
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 672(%rax), %rax
# Done -
movq %rax, 16(%rcx)
# (QUOTE (1))
movq $.L1741+2, %rax
# Done (QUOTE (1))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY - (QUOTE (1)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY - (QUOTE (1))))
# (DEFINE EXPECTED -1)
# -1
movq $-8, %rax
# Done -1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED -1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2159:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2155
# Done conditional (EQUAL? RES EXPECTED)
.L2158:
# FALSE
# Done conditional FALSE
.L2157:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2154:
# (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply - (quote (1))) gave ~S, expected ~S"
movq $.L1742+4, %rax
# Done "Evaluation of (apply - (quote (1))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2156
.L2155:
movq $23, %rax
.L2156:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (- 1 2))
# (- 1 2)
# 1
movq $8, %rax
# Done 1
# 2
movq $16, %rcx
# Done 2
subq %rcx, %rax
# Done (- 1 2)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (- 1 2))
# (DEFINE EXPECTED -1)
# -1
movq $-8, %rax
# Done -1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED -1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2165:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2161
# Done conditional (EQUAL? RES EXPECTED)
.L2164:
# FALSE
# Done conditional FALSE
.L2163:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2160:
# (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (- 1 2) gave ~S, expected ~S"
movq $.L1743+4, %rax
# Done "Evaluation of (- 1 2) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED))
jmp .L2162
.L2161:
movq $23, %rax
.L2162:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY - (QUOTE (1 2))))
# (APPLY - (QUOTE (1 2)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# -
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 672(%rax), %rax
# Done -
movq %rax, 16(%rcx)
# (QUOTE (1 2))
movq $.L1744+2, %rax
# Done (QUOTE (1 2))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY - (QUOTE (1 2)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY - (QUOTE (1 2))))
# (DEFINE EXPECTED -1)
# -1
movq $-8, %rax
# Done -1
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED -1)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2171:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2167
# Done conditional (EQUAL? RES EXPECTED)
.L2170:
# FALSE
# Done conditional FALSE
.L2169:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2166:
# (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S"
movq $.L1746+4, %rax
# Done "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2168
.L2167:
movq $23, %rax
.L2168:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (- 1 2 3))
# (- 1 2 3)
# 1
movq $8, %rax
# Done 1
# 2
movq $16, %rcx
# Done 2
subq %rcx, %rax
# 3
movq $24, %rcx
# Done 3
subq %rcx, %rax
# Done (- 1 2 3)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (- 1 2 3))
# (DEFINE EXPECTED -4)
# -4
movq $-32, %rax
# Done -4
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED -4)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2177:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2173
# Done conditional (EQUAL? RES EXPECTED)
.L2176:
# FALSE
# Done conditional FALSE
.L2175:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2172:
# (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (- 1 2 3) gave ~S, expected ~S"
movq $.L1747+4, %rax
# Done "Evaluation of (- 1 2 3) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED))
jmp .L2174
.L2173:
movq $23, %rax
.L2174:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY - (QUOTE (1 2 3))))
# (APPLY - (QUOTE (1 2 3)))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# -
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 672(%rax), %rax
# Done -
movq %rax, 16(%rcx)
# (QUOTE (1 2 3))
movq $.L1748+2, %rax
# Done (QUOTE (1 2 3))
movq %rax, 24(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY - (QUOTE (1 2 3)))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY - (QUOTE (1 2 3))))
# (DEFINE EXPECTED -4)
# -4
movq $-32, %rax
# Done -4
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED -4)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2183:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2179
# Done conditional (EQUAL? RES EXPECTED)
.L2182:
# FALSE
# Done conditional FALSE
.L2181:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2178:
# (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S"
movq $.L1751+4, %rax
# Done "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2180
.L2179:
movq $23, %rax
.L2180:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))
# Done (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))
# Done (BEGIN (DEFINITIONS) (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))))
# (BEGIN (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))) (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED)))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1))))))
# (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))
movq 0(%rsp), %rax
movq $.L1752, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1))))))
# (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (FAC 6))
# (FAC 6)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# 6
movq $48, %rax
# Done 6
movq %rax, 16(%rcx)
# FAC
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done FAC
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FAC 6)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (FAC 6))
# (DEFINE EXPECTED 720)
# 720
movq $5760, %rax
# Done 720
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED 720)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2189:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2185
# Done conditional (EQUAL? RES EXPECTED)
.L2188:
# FALSE
# Done conditional FALSE
.L2187:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2184:
# (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (fac 6) gave ~S, expected ~S"
movq $.L1757+4, %rax
# Done "Evaluation of (fac 6) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))
jmp .L2186
.L2185:
movq $23, %rax
.L2186:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))))
addq $8, %rsp
# Done (BEGIN (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))) (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE B (MAKE-BUFFER)) (BUFFER-ADD B 1) (BUFFER-ADD B 2) (BUFFER-ADD B 3) (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED)))))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE B (MAKE-BUFFER))
# (MAKE-BUFFER)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# MAKE-BUFFER
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 216(%rax), %rax
# Done MAKE-BUFFER
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (MAKE-BUFFER)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE B (MAKE-BUFFER))
# (BUFFER-ADD B 1)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# B
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done B
movq %rax, 16(%rcx)
# 1
movq $8, %rax
# Done 1
movq %rax, 24(%rcx)
# BUFFER-ADD
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 208(%rax), %rax
# Done BUFFER-ADD
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (BUFFER-ADD B 1)
# (BUFFER-ADD B 2)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# B
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done B
movq %rax, 16(%rcx)
# 2
movq $16, %rax
# Done 2
movq %rax, 24(%rcx)
# BUFFER-ADD
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 208(%rax), %rax
# Done BUFFER-ADD
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (BUFFER-ADD B 2)
# (BUFFER-ADD B 3)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# B
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done B
movq %rax, 16(%rcx)
# 3
movq $24, %rax
# Done 3
movq %rax, 24(%rcx)
# BUFFER-ADD
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 208(%rax), %rax
# Done BUFFER-ADD
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (BUFFER-ADD B 3)
# (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (BUFFER-LIST B))
# (BUFFER-LIST B)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# B
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 16(%rax), %rax
# Done B
movq %rax, 16(%rcx)
# BUFFER-LIST
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 192(%rax), %rax
# Done BUFFER-LIST
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (BUFFER-LIST B)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (BUFFER-LIST B))
# (DEFINE EXPECTED (QUOTE (1 2 3)))
# (QUOTE (1 2 3))
movq $.L1758+2, %rax
# Done (QUOTE (1 2 3))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE (1 2 3)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2195:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2191
# Done conditional (EQUAL? RES EXPECTED)
.L2194:
# FALSE
# Done conditional FALSE
.L2193:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2190:
# (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (buffer-list b) gave ~S, expected ~S"
movq $.L1761+4, %rax
# Done "Evaluation of (buffer-list b) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))
jmp .L2192
.L2191:
movq $23, %rax
.L2192:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))))
addq $8, %rsp
# Done (BEGIN (DEFINE B (MAKE-BUFFER)) (BUFFER-ADD B 1) (BUFFER-ADD B 2) (BUFFER-ADD B 3) (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED)))))
# (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "foo")) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (STRING-EQUAL? "foo" "foo"))
# (STRING-EQUAL? "foo" "foo")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "foo"
movq $.L1762+4, %rax
# Done "foo"
movq %rax, 16(%rcx)
# "foo"
movq $.L1763+4, %rax
# Done "foo"
movq %rax, 24(%rcx)
# STRING-EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 408(%rax), %rax
# Done STRING-EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-EQUAL? "foo" "foo")
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (STRING-EQUAL? "foo" "foo"))
# (DEFINE EXPECTED TRUE)
# TRUE
movq $15, %rax
# Done TRUE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED TRUE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2201:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2197
# Done conditional (EQUAL? RES EXPECTED)
.L2200:
# FALSE
# Done conditional FALSE
.L2199:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2196:
# (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S"
movq $.L1764+4, %rax
# Done "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED))
jmp .L2198
.L2197:
movq $23, %rax
.L2198:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "foo")) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "bar")) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (STRING-EQUAL? "foo" "bar"))
# (STRING-EQUAL? "foo" "bar")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# "foo"
movq $.L1765+4, %rax
# Done "foo"
movq %rax, 16(%rcx)
# "bar"
movq $.L1766+4, %rax
# Done "bar"
movq %rax, 24(%rcx)
# STRING-EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 408(%rax), %rax
# Done STRING-EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (STRING-EQUAL? "foo" "bar")
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (STRING-EQUAL? "foo" "bar"))
# (DEFINE EXPECTED FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED FALSE)
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2207:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2203
# Done conditional (EQUAL? RES EXPECTED)
.L2206:
# FALSE
# Done conditional FALSE
.L2205:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2202:
# (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S"
movq $.L1767+4, %rax
# Done "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED))
jmp .L2204
.L2203:
movq $23, %rax
.L2204:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "bar")) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED))))
# (BEGIN (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (ASSERT-UNIFORM-FORMAT 0 "0") (ASSERT-UNIFORM-FORMAT 242143 "242143") (ASSERT-UNIFORM-FORMAT -1 "-1") (ASSERT-UNIFORM-FORMAT NIL "()") (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo") (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)") (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)") (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>") (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello") (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)"))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))))
# (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))
movq 0(%rsp), %rax
movq $.L1772, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))))
# (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))))
# (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))
movq 0(%rsp), %rax
movq $.L1790, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED))))))
# (ASSERT-UNIFORM-FORMAT 0 "0")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# 0
movq $0, %rax
# Done 0
movq %rax, 16(%rcx)
# "0"
movq $.L1804+4, %rax
# Done "0"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT 0 "0")
# (ASSERT-UNIFORM-FORMAT 242143 "242143")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# 242143
movq $1937144, %rax
# Done 242143
movq %rax, 16(%rcx)
# "242143"
movq $.L1805+4, %rax
# Done "242143"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT 242143 "242143")
# (ASSERT-UNIFORM-FORMAT -1 "-1")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# -1
movq $-8, %rax
# Done -1
movq %rax, 16(%rcx)
# "-1"
movq $.L1806+4, %rax
# Done "-1"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT -1 "-1")
# (ASSERT-UNIFORM-FORMAT NIL "()")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# NIL
movq $31, %rax
# Done NIL
movq %rax, 16(%rcx)
# "()"
movq $.L1807+4, %rax
# Done "()"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT NIL "()")
# (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (QUOTE FOO)
movq $.L1630+7, %rax
# Done (QUOTE FOO)
movq %rax, 16(%rcx)
# "foo"
movq $.L1808+4, %rax
# Done "foo"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo")
# (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (QUOTE (A B))
movq $.L1809+2, %rax
# Done (QUOTE (A B))
movq %rax, 16(%rcx)
# "(a b)"
movq $.L1811+4, %rax
# Done "(a b)"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)")
# (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (QUOTE (A . B))
movq $.L1812+2, %rax
# Done (QUOTE (A . B))
movq %rax, 16(%rcx)
# "(a . b)"
movq $.L1813+4, %rax
# Done "(a . b)"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)")
# (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>")
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (LAMBDA NIL)
movq 0(%rsp), %rax
movq $.L1814, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL)
movq %rax, 16(%rcx)
# "#<function>"
movq $.L1816+4, %rax
# Done "#<function>"
movq %rax, 24(%rcx)
# ASSERT-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done ASSERT-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>")
# (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello")
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Hello"
movq $.L1817+4, %rax
# Done "Hello"
movq %rax, 16(%rcx)
# "\"Hello\""
movq $.L1818+4, %rax
# Done "\"Hello\""
movq %rax, 24(%rcx)
# "Hello"
movq $.L1819+4, %rax
# Done "Hello"
movq %rax, 32(%rcx)
# ASSERT-NON-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ASSERT-NON-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello")
# (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)")
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# (QUOTE ("Hello" "there"))
movq $.L1820+2, %rax
# Done (QUOTE ("Hello" "there"))
movq %rax, 16(%rcx)
# "(\"Hello\" \"there\")"
movq $.L1824+4, %rax
# Done "(\"Hello\" \"there\")"
movq %rax, 24(%rcx)
# "(Hello there)"
movq $.L1825+4, %rax
# Done "(Hello there)"
movq %rax, 32(%rcx)
# ASSERT-NON-UNIFORM-FORMAT
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done ASSERT-NON-UNIFORM-FORMAT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)")
addq $8, %rsp
# Done (BEGIN (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (ASSERT-UNIFORM-FORMAT 0 "0") (ASSERT-UNIFORM-FORMAT 242143 "242143") (ASSERT-UNIFORM-FORMAT -1 "-1") (ASSERT-UNIFORM-FORMAT NIL "()") (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo") (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)") (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)") (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>") (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello") (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)"))
# (BEGIN (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))) (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED))))
subq $32, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8)))))
# (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# APPEND
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 872(%rax), %rax
# Done APPEND
movq %rax, 16(%rcx)
# (QUOTE ((1 2) (3 4)))
movq $.L1826+2, %rax
# Done (QUOTE ((1 2) (3 4)))
movq %rax, 24(%rcx)
# (QUOTE ((5 6) (7 8)))
movq $.L1832+2, %rax
# Done (QUOTE ((5 6) (7 8)))
movq %rax, 32(%rcx)
# APPLY
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 224(%rax), %rax
# Done APPLY
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8)))))
# (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8)))
# (QUOTE ((1 2) (3 4) 5 6 7 8))
movq $.L1838+2, %rax
# Done (QUOTE ((1 2) (3 4) 5 6 7 8))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8)))
# (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED)))
# (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2213:
# (EQUAL? RES EXPECTED)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 16(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 24(%rcx)
# EQUAL?
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 400(%rax), %rax
# Done EQUAL?
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
cmpq $7, %rax
jne .L2209
# Done conditional (EQUAL? RES EXPECTED)
.L2212:
# FALSE
# Done conditional FALSE
.L2211:
# TRUE
# Done conditional TRUE
# Done conditional (IF (EQUAL? RES EXPECTED) FALSE TRUE)
.L2208:
# (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED))
# (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S"
movq $.L1848+4, %rax
# Done "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S"
movq %rax, 16(%rcx)
# RES
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done RES
movq %rax, 24(%rcx)
# EXPECTED
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done EXPECTED
movq %rax, 32(%rcx)
# ERROR
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 232(%rax), %rax
# Done ERROR
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED)
# Done (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED))
jmp .L2210
.L2209:
movq $23, %rax
.L2210:
# Done (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED)))
addq $8, %rsp
# Done (BEGIN (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))) (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED))))
addq $8, %rsp
ret
.L1850:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L2219:
.quad 8
.ascii "x"
.data
.align 8
.L2218:
.quad .L2219+4
.data
.align 8
.L2222:
.quad 8
.ascii "y"
.data
.align 8
.L2221:
.quad .L2222+4
.data
.align 8
.L2220:
.quad .L2221+7
.quad 31
.data
.align 8
.L2217:
.quad .L2218+7
.quad .L2220+2
.data
.align 8
.L2226:
.quad .L2221+7
.quad 31
.data
.align 8
.L2225:
.quad .L2218+7
.quad .L2226+2
.data
.align 8
.L2224:
.quad .L1103+7
.quad .L2225+2
.data
.align 8
.L2223:
.quad .L2224+2
.quad 31
.data
.align 8
.L2216:
.quad .L2217+2
.quad .L2223+2
.data
.align 8
.L2215:
.quad .L639+7
.quad .L2216+2
.data
.align 8
.L2228:
.quad 16
.quad 31
.data
.align 8
.L2227:
.quad 8
.quad .L2228+2
.data
.align 8
.L2214:
.quad .L2215+2
.quad .L2227+2
.data
.align 8
.L2229:
.quad 64
.ascii ">>> ~S~%"
.text
.L2230:
pushq %rcx
cmpq $8, 0(%rcx)
jne .L2231
subq $40, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# (DEFINE DUAL-ENV (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV)))
# (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV))
# (MAKE-INITIAL-MACRO-ENV)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# MAKE-INITIAL-MACRO-ENV
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 88(%rax), %rax
# Done MAKE-INITIAL-MACRO-ENV
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (MAKE-INITIAL-MACRO-ENV)
pushq %rax
# (MAKE-INITIAL-INTERPRETER-ENV)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# MAKE-INITIAL-INTERPRETER-ENV
movq 8(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 152(%rax), %rax
# Done MAKE-INITIAL-INTERPRETER-ENV
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
movq %rax, %rcx
# Done (MAKE-INITIAL-INTERPRETER-ENV)
popq %rax
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE DUAL-ENV (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV)))
# (DEFINE EXPANDED (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV))
# (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV)
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2))
movq $.L2214+2, %rax
# Done (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2))
movq %rax, 16(%rcx)
# DUAL-ENV
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done DUAL-ENV
movq %rax, 24(%rcx)
# EXPAND-BODY-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 40(%rax), %rax
# Done EXPAND-BODY-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV)
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE EXPANDED (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV))
# (DEFINE RES (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV)))
# (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV))
subq $32, %rbx
movq $24, 0(%rbx)
movq %rbx, %rcx
# EXPANDED
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done EXPANDED
movq %rax, 16(%rcx)
# (CDR DUAL-ENV)
# DUAL-ENV
movq 0(%rsp), %rax
movq 32(%rax), %rax
# Done DUAL-ENV
movq 6(%rax), %rax
# Done (CDR DUAL-ENV)
movq %rax, 24(%rcx)
# EVAL-BODY-FORM
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 128(%rax), %rax
# Done EVAL-BODY-FORM
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE RES (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV)))
# (FORMOUT STDOUT ">>> ~S~%" RES)
subq $40, %rbx
movq $32, 0(%rbx)
movq %rbx, %rcx
# STDOUT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 456(%rax), %rax
# Done STDOUT
movq %rax, 16(%rcx)
# ">>> ~S~%"
movq $.L2229+4, %rax
# Done ">>> ~S~%"
movq %rax, 24(%rcx)
# RES
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done RES
movq %rax, 32(%rcx)
# FORMOUT
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 8(%rax), %rax
movq 256(%rax), %rax
# Done FORMOUT
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (FORMOUT STDOUT ">>> ~S~%" RES)
addq $8, %rsp
addq $8, %rsp
ret
.L2231:
# call-handler ARITY-MISMATCH
# ARITY-MISMATCH
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 912(%rax), %rax
# Done ARITY-MISMATCH
movq 7(%rax), %rdx
movq $24, -32(%rbx)
addq $3, %rcx
movq %rdx, -24(%rbx)
movq %rcx, -16(%rbx)
movq $8, -8(%rbx)
subq $32, %rbx
movq %rbx, %rcx
call *-1(%rax)
subq $3, %rax
movq %rax, 0(%rsp)
.data
.align 8
.L2291:
.quad .L16+7
.quad 31
.data
.align 8
.L2290:
.quad .L18+7
.quad .L2291+2
.data
.align 8
.L2289:
.quad .L20+7
.quad .L2290+2
.data
.align 8
.L2288:
.quad .L22+7
.quad .L2289+2
.data
.align 8
.L2287:
.quad .L24+7
.quad .L2288+2
.data
.align 8
.L2286:
.quad .L26+7
.quad .L2287+2
.data
.align 8
.L2285:
.quad .L639+7
.quad .L2286+2
.data
.align 8
.L2284:
.quad .L660+7
.quad .L2285+2
.data
.align 8
.L2283:
.quad .L664+7
.quad .L2284+2
.data
.align 8
.L2282:
.quad .L668+7
.quad .L2283+2
.data
.align 8
.L2281:
.quad .L687+7
.quad .L2282+2
.data
.align 8
.L2280:
.quad .L695+7
.quad .L2281+2
.data
.align 8
.L2279:
.quad .L707+7
.quad .L2280+2
.data
.align 8
.L2278:
.quad .L724+7
.quad .L2279+2
.data
.align 8
.L2277:
.quad .L744+7
.quad .L2278+2
.data
.align 8
.L2276:
.quad .L764+7
.quad .L2277+2
.data
.align 8
.L2275:
.quad .L784+7
.quad .L2276+2
.data
.align 8
.L2274:
.quad .L801+7
.quad .L2275+2
.data
.align 8
.L2273:
.quad .L821+7
.quad .L2274+2
.data
.align 8
.L2272:
.quad .L840+7
.quad .L2273+2
.data
.align 8
.L2271:
.quad .L860+7
.quad .L2272+2
.data
.align 8
.L2270:
.quad .L880+7
.quad .L2271+2
.data
.align 8
.L2269:
.quad .L897+7
.quad .L2270+2
.data
.align 8
.L2268:
.quad .L929+7
.quad .L2269+2
.data
.align 8
.L2267:
.quad .L946+7
.quad .L2268+2
.data
.align 8
.L2266:
.quad .L963+7
.quad .L2267+2
.data
.align 8
.L2265:
.quad .L983+7
.quad .L2266+2
.data
.align 8
.L2264:
.quad .L1003+7
.quad .L2265+2
.data
.align 8
.L2263:
.quad .L1023+7
.quad .L2264+2
.data
.align 8
.L2262:
.quad .L1043+7
.quad .L2263+2
.data
.align 8
.L2261:
.quad .L1063+7
.quad .L2262+2
.data
.align 8
.L2260:
.quad .L1083+7
.quad .L2261+2
.data
.align 8
.L2259:
.quad .L1103+7
.quad .L2260+2
.data
.align 8
.L2258:
.quad .L1120+7
.quad .L2259+2
.data
.align 8
.L2257:
.quad .L1137+7
.quad .L2258+2
.data
.align 8
.L2256:
.quad .L1154+7
.quad .L2257+2
.data
.align 8
.L2255:
.quad .L1171+7
.quad .L2256+2
.data
.align 8
.L2254:
.quad .L1188+7
.quad .L2255+2
.data
.align 8
.L2253:
.quad .L1208+7
.quad .L2254+2
.data
.align 8
.L2252:
.quad .L1225+7
.quad .L2253+2
.data
.align 8
.L2251:
.quad .L1242+7
.quad .L2252+2
.data
.align 8
.L2250:
.quad .L1259+7
.quad .L2251+2
.data
.align 8
.L2249:
.quad .L1276+7
.quad .L2250+2
.data
.align 8
.L2248:
.quad .L1293+7
.quad .L2249+2
.data
.align 8
.L2247:
.quad .L1313+7
.quad .L2248+2
.data
.align 8
.L2246:
.quad .L1330+7
.quad .L2247+2
.data
.align 8
.L2245:
.quad .L1347+7
.quad .L2246+2
.data
.align 8
.L2244:
.quad .L1364+7
.quad .L2245+2
.data
.align 8
.L2243:
.quad .L1381+7
.quad .L2244+2
.data
.align 8
.L2242:
.quad .L1398+7
.quad .L2243+2
.data
.align 8
.L2241:
.quad .L1415+7
.quad .L2242+2
.data
.align 8
.L2240:
.quad .L1432+7
.quad .L2241+2
.data
.align 8
.L2239:
.quad .L1497+7
.quad .L2240+2
.data
.align 8
.L2238:
.quad .L1548+7
.quad .L2239+2
.data
.align 8
.L2237:
.quad .L1569+7
.quad .L2238+2
.data
.align 8
.L2236:
.quad .L1571+7
.quad .L2237+2
.data
.align 8
.L2235:
.quad .L1573+7
.quad .L2236+2
.data
.align 8
.L2234:
.quad .L1630+7
.quad .L2235+2
.data
.align 8
.L2233:
.quad .L2218+7
.quad .L2234+2
.data
.align 8
.L2232:
.quad .L2221+7
.quad .L2233+2
.text
.globl lisp
lisp:
movq %rsi, %rbx
pushfq
orl $262144, (%rsp)
popfq
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
# (SET! INTERNED-SYMBOLS (QUOTE (Y X FOO C B A LET DEFMACRO APPLY STDERR STDOUT VECTOR-COPY VECTOR-SET! VECTOR-REF VECTOR-LENGTH MAKE-VECTOR VECTOR? STRING-COPY STRING-SET! STRING-REF STRING-LENGTH MAKE-STRING STRING? TRUNCATE REM * - + /= = >= > <= < NUMBER? RPLACD RPLACA CDR CAR NULL? PAIR? INTERN SYMBOL-NAME GENSYM SYMBOL? FUNCTION? EQ? ERROR-HALT IF SET! DEFINE DEFINITIONS BEGIN LAMBDA QUOTE CONS APPEND UNQUOTE-SPLICING QUASIQUOTE UNQUOTE)))
# (QUOTE (Y X FOO C B A LET DEFMACRO APPLY STDERR STDOUT VECTOR-COPY VECTOR-SET! VECTOR-REF VECTOR-LENGTH MAKE-VECTOR VECTOR? STRING-COPY STRING-SET! STRING-REF STRING-LENGTH MAKE-STRING STRING? TRUNCATE REM * - + /= = >= > <= < NUMBER? RPLACD RPLACA CDR CAR NULL? PAIR? INTERN SYMBOL-NAME GENSYM SYMBOL? FUNCTION? EQ? ERROR-HALT IF SET! DEFINE DEFINITIONS BEGIN LAMBDA QUOTE CONS APPEND UNQUOTE-SPLICING QUASIQUOTE UNQUOTE))
movq $.L2232+2, %rax
# Done (QUOTE (Y X FOO C B A LET DEFMACRO APPLY STDERR STDOUT VECTOR-COPY VECTOR-SET! VECTOR-REF VECTOR-LENGTH MAKE-VECTOR VECTOR? STRING-COPY STRING-SET! STRING-REF STRING-LENGTH MAKE-STRING STRING? TRUNCATE REM * - + /= = >= > <= < NUMBER? RPLACD RPLACA CDR CAR NULL? PAIR? INTERN SYMBOL-NAME GENSYM SYMBOL? FUNCTION? EQ? ERROR-HALT IF SET! DEFINE DEFINITIONS BEGIN LAMBDA QUOTE CONS APPEND UNQUOTE-SPLICING QUASIQUOTE UNQUOTE))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (SET! INTERNED-SYMBOLS (QUOTE (Y X FOO C B A LET DEFMACRO APPLY STDERR STDOUT VECTOR-COPY VECTOR-SET! VECTOR-REF VECTOR-LENGTH MAKE-VECTOR VECTOR? STRING-COPY STRING-SET! STRING-REF STRING-LENGTH MAKE-STRING STRING? TRUNCATE REM * - + /= = >= > <= < NUMBER? RPLACD RPLACA CDR CAR NULL? PAIR? INTERN SYMBOL-NAME GENSYM SYMBOL? FUNCTION? EQ? ERROR-HALT IF SET! DEFINE DEFINITIONS BEGIN LAMBDA QUOTE CONS APPEND UNQUOTE-SPLICING QUASIQUOTE UNQUOTE)))
subq $920, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 48(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 56(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 64(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 72(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 80(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 88(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 96(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 104(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 112(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 120(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 128(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 136(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 144(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 152(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 160(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 168(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 176(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 184(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 192(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 200(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 208(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 216(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 224(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 232(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 240(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 248(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 256(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 264(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 272(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 280(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 288(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 296(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 304(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 312(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 320(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 328(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 336(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 344(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 352(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 360(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 368(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 376(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 384(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 392(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 400(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 408(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 416(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 424(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 432(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 440(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 448(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 456(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 464(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 472(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 480(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 488(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 496(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 504(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 512(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 520(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 528(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 536(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 544(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 552(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 560(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 568(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 576(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 584(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 592(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 600(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 608(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 616(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 624(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 632(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 640(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 648(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 656(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 664(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 672(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 680(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 688(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 696(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 704(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 712(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 720(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 728(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 736(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 744(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 752(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 760(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 768(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 776(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 784(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 792(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 800(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 808(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 816(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 824(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 832(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 840(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 848(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 856(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 864(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 872(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 880(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 888(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 896(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 904(%rcx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 912(%rcx)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS (DEFINE ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "arity-mismatch" NIL))) (DEFINE HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "handle-varargs" NIL))))
# (DEFINE ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "arity-mismatch" NIL)))
# (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "arity-mismatch" NIL))
movq 0(%rsp), %rax
movq $.L2, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "arity-mismatch" NIL))
movq 0(%rsp), %rcx
movq %rax, 912(%rcx)
# Done (DEFINE ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "arity-mismatch" NIL)))
# (DEFINE HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "handle-varargs" NIL)))
# (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "handle-varargs" NIL))
movq 0(%rsp), %rax
movq $.L6, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "handle-varargs" NIL))
movq 0(%rsp), %rcx
movq %rax, 904(%rcx)
# Done (DEFINE HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "handle-varargs" NIL)))
# Done (DEFINITIONS (DEFINE ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "arity-mismatch" NIL))) (DEFINE HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR-HALT "handle-varargs" NIL))))
# (DEFINE LIST (LAMBDA L L))
# (LAMBDA L L)
movq 0(%rsp), %rax
movq $.L9, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA L L)
movq 0(%rsp), %rcx
movq %rax, 896(%rcx)
# Done (DEFINE LIST (LAMBDA L L))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE REDUCE (LAMBDA (INITIAL L OP) (IF (NULL? L) INITIAL (REDUCE (OP INITIAL (CAR L)) (CDR L) OP))))
# (LAMBDA (INITIAL L OP) (IF (NULL? L) INITIAL (REDUCE (OP INITIAL (CAR L)) (CDR L) OP)))
movq 0(%rsp), %rax
movq $.L11, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (INITIAL L OP) (IF (NULL? L) INITIAL (REDUCE (OP INITIAL (CAR L)) (CDR L) OP)))
movq 0(%rsp), %rcx
movq %rax, 888(%rcx)
# Done (DEFINE REDUCE (LAMBDA (INITIAL L OP) (IF (NULL? L) INITIAL (REDUCE (OP INITIAL (CAR L)) (CDR L) OP))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE QUASIQUOTE-TRANSFORM (LAMBDA (FORM) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))) (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN))))))
# (LAMBDA (FORM) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))) (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN)))))
movq 0(%rsp), %rax
movq $.L28, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))) (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN)))))
movq 0(%rsp), %rcx
movq %rax, 880(%rcx)
# Done (DEFINE QUASIQUOTE-TRANSFORM (LAMBDA (FORM) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (IF (EQ? (QUOTE UNQUOTE) KEYWORD) (BEGIN (CAR (CDR FORM))) (IF (EQ? (QUOTE QUASIQUOTE) KEYWORD) (BEGIN (QUASIQUOTE-TRANSFORM (QUASIQUOTE-TRANSFORM (CAR (CDR FORM))))) (IF (IF (PAIR? KEYWORD) (EQ? (QUOTE UNQUOTE-SPLICING) (CAR (CAR FORM))) FALSE) (BEGIN (LIST (QUOTE APPEND) (CAR (CDR (CAR FORM))) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (IF TRUE (BEGIN (LIST (QUOTE CONS) (QUASIQUOTE-TRANSFORM KEYWORD) (QUASIQUOTE-TRANSFORM (CDR FORM)))) (BEGIN)))))) (IF (SYMBOL? FORM) (BEGIN (LIST (QUOTE QUOTE) FORM)) (IF TRUE (BEGIN FORM) (BEGIN))))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE APPEND (LAMBDA LISTS (IF (NULL? LISTS) NIL (APPEND-1 LISTS))))
# (LAMBDA LISTS (IF (NULL? LISTS) NIL (APPEND-1 LISTS)))
movq 0(%rsp), %rax
movq $.L55, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA LISTS (IF (NULL? LISTS) NIL (APPEND-1 LISTS)))
movq 0(%rsp), %rcx
movq %rax, 872(%rcx)
# Done (DEFINE APPEND (LAMBDA LISTS (IF (NULL? LISTS) NIL (APPEND-1 LISTS))))
# (DEFINE APPEND-1 (LAMBDA (LISTS) (DEFINE L1 (CAR LISTS)) (DEFINE REST (CDR LISTS)) (IF (NULL? REST) L1 (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C)))))
# (LAMBDA (LISTS) (DEFINE L1 (CAR LISTS)) (DEFINE REST (CDR LISTS)) (IF (NULL? REST) L1 (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C))))
movq 0(%rsp), %rax
movq $.L60, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (LISTS) (DEFINE L1 (CAR LISTS)) (DEFINE REST (CDR LISTS)) (IF (NULL? REST) L1 (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C))))
movq 0(%rsp), %rcx
movq %rax, 864(%rcx)
# Done (DEFINE APPEND-1 (LAMBDA (LISTS) (DEFINE L1 (CAR LISTS)) (DEFINE REST (CDR LISTS)) (IF (NULL? REST) L1 (IF (NULL? L1) (APPEND-1 REST) (BEGIN (DEFINE C (CONS (CAR L1) NIL)) (APPEND-2 C (CDR L1) REST) C)))))
# (DEFINE APPEND-2 (LAMBDA (C L1 REST) (IF (NULL? L1) (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))) (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST)))))
# (LAMBDA (C L1 REST) (IF (NULL? L1) (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))) (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST))))
movq 0(%rsp), %rax
movq $.L68, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (C L1 REST) (IF (NULL? L1) (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))) (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST))))
movq 0(%rsp), %rcx
movq %rax, 856(%rcx)
# Done (DEFINE APPEND-2 (LAMBDA (C L1 REST) (IF (NULL? L1) (BEGIN (DEFINE L2 (CAR REST)) (DEFINE REST2 (CDR REST)) (IF (NULL? REST2) (RPLACD C L2) (APPEND-2 C L2 REST2))) (BEGIN (DEFINE C2 (CONS (CAR L1) NIL)) (RPLACD C C2) (APPEND-2 C2 (CDR L1) REST)))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE ERROR-HALT (LAMBDA (MESSAGE ARGS) (ERROR-HALT MESSAGE ARGS)))
# (LAMBDA (MESSAGE ARGS) (ERROR-HALT MESSAGE ARGS))
movq 0(%rsp), %rax
movq $.L76, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (MESSAGE ARGS) (ERROR-HALT MESSAGE ARGS))
movq 0(%rsp), %rcx
movq %rax, 848(%rcx)
# Done (DEFINE ERROR-HALT (LAMBDA (MESSAGE ARGS) (ERROR-HALT MESSAGE ARGS)))
# (DEFINE EQ? (LAMBDA (A B) (EQ? A B)))
# (LAMBDA (A B) (EQ? A B))
movq 0(%rsp), %rax
movq $.L79, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (EQ? A B))
movq 0(%rsp), %rcx
movq %rax, 840(%rcx)
# Done (DEFINE EQ? (LAMBDA (A B) (EQ? A B)))
# (DEFINE FUNCTION? (LAMBDA (A) (FUNCTION? A)))
# (LAMBDA (A) (FUNCTION? A))
movq 0(%rsp), %rax
movq $.L81, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (FUNCTION? A))
movq 0(%rsp), %rcx
movq %rax, 832(%rcx)
# Done (DEFINE FUNCTION? (LAMBDA (A) (FUNCTION? A)))
# (DEFINE SYMBOL? (LAMBDA (A) (SYMBOL? A)))
# (LAMBDA (A) (SYMBOL? A))
movq 0(%rsp), %rax
movq $.L83, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (SYMBOL? A))
movq 0(%rsp), %rcx
movq %rax, 824(%rcx)
# Done (DEFINE SYMBOL? (LAMBDA (A) (SYMBOL? A)))
# (DEFINE GENSYM (LAMBDA (A) (GENSYM A)))
# (LAMBDA (A) (GENSYM A))
movq 0(%rsp), %rax
movq $.L86, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (GENSYM A))
movq 0(%rsp), %rcx
movq %rax, 816(%rcx)
# Done (DEFINE GENSYM (LAMBDA (A) (GENSYM A)))
# (DEFINE SYMBOL-NAME (LAMBDA (A) (SYMBOL-NAME A)))
# (LAMBDA (A) (SYMBOL-NAME A))
movq 0(%rsp), %rax
movq $.L88, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (SYMBOL-NAME A))
movq 0(%rsp), %rcx
movq %rax, 808(%rcx)
# Done (DEFINE SYMBOL-NAME (LAMBDA (A) (SYMBOL-NAME A)))
# (DEFINE PAIR? (LAMBDA (A) (PAIR? A)))
# (LAMBDA (A) (PAIR? A))
movq 0(%rsp), %rax
movq $.L90, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (PAIR? A))
movq 0(%rsp), %rcx
movq %rax, 800(%rcx)
# Done (DEFINE PAIR? (LAMBDA (A) (PAIR? A)))
# (DEFINE NULL? (LAMBDA (A) (NULL? A)))
# (LAMBDA (A) (NULL? A))
movq 0(%rsp), %rax
movq $.L92, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (NULL? A))
movq 0(%rsp), %rcx
movq %rax, 792(%rcx)
# Done (DEFINE NULL? (LAMBDA (A) (NULL? A)))
# (DEFINE CAR (LAMBDA (A) (CAR A)))
# (LAMBDA (A) (CAR A))
movq 0(%rsp), %rax
movq $.L94, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (CAR A))
movq 0(%rsp), %rcx
movq %rax, 784(%rcx)
# Done (DEFINE CAR (LAMBDA (A) (CAR A)))
# (DEFINE CDR (LAMBDA (A) (CDR A)))
# (LAMBDA (A) (CDR A))
movq 0(%rsp), %rax
movq $.L96, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (CDR A))
movq 0(%rsp), %rcx
movq %rax, 776(%rcx)
# Done (DEFINE CDR (LAMBDA (A) (CDR A)))
# (DEFINE CONS (LAMBDA (A B) (CONS A B)))
# (LAMBDA (A B) (CONS A B))
movq 0(%rsp), %rax
movq $.L98, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (CONS A B))
movq 0(%rsp), %rcx
movq %rax, 768(%rcx)
# Done (DEFINE CONS (LAMBDA (A B) (CONS A B)))
# (DEFINE RPLACA (LAMBDA (A B) (RPLACA A B)))
# (LAMBDA (A B) (RPLACA A B))
movq 0(%rsp), %rax
movq $.L100, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (RPLACA A B))
movq 0(%rsp), %rcx
movq %rax, 760(%rcx)
# Done (DEFINE RPLACA (LAMBDA (A B) (RPLACA A B)))
# (DEFINE RPLACD (LAMBDA (A B) (RPLACD A B)))
# (LAMBDA (A B) (RPLACD A B))
movq 0(%rsp), %rax
movq $.L102, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (RPLACD A B))
movq 0(%rsp), %rcx
movq %rax, 752(%rcx)
# Done (DEFINE RPLACD (LAMBDA (A B) (RPLACD A B)))
# (DEFINE NUMBER? (LAMBDA (A) (NUMBER? A)))
# (LAMBDA (A) (NUMBER? A))
movq 0(%rsp), %rax
movq $.L104, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (NUMBER? A))
movq 0(%rsp), %rcx
movq %rax, 744(%rcx)
# Done (DEFINE NUMBER? (LAMBDA (A) (NUMBER? A)))
# (DEFINE < (LAMBDA (A B) (< A B)))
# (LAMBDA (A B) (< A B))
movq 0(%rsp), %rax
movq $.L106, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (< A B))
movq 0(%rsp), %rcx
movq %rax, 736(%rcx)
# Done (DEFINE < (LAMBDA (A B) (< A B)))
# (DEFINE <= (LAMBDA (A B) (<= A B)))
# (LAMBDA (A B) (<= A B))
movq 0(%rsp), %rax
movq $.L108, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (<= A B))
movq 0(%rsp), %rcx
movq %rax, 728(%rcx)
# Done (DEFINE <= (LAMBDA (A B) (<= A B)))
# (DEFINE > (LAMBDA (A B) (> A B)))
# (LAMBDA (A B) (> A B))
movq 0(%rsp), %rax
movq $.L110, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (> A B))
movq 0(%rsp), %rcx
movq %rax, 720(%rcx)
# Done (DEFINE > (LAMBDA (A B) (> A B)))
# (DEFINE >= (LAMBDA (A B) (>= A B)))
# (LAMBDA (A B) (>= A B))
movq 0(%rsp), %rax
movq $.L112, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (>= A B))
movq 0(%rsp), %rcx
movq %rax, 712(%rcx)
# Done (DEFINE >= (LAMBDA (A B) (>= A B)))
# (DEFINE = (LAMBDA (A B) (= A B)))
# (LAMBDA (A B) (= A B))
movq 0(%rsp), %rax
movq $.L114, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (= A B))
movq 0(%rsp), %rcx
movq %rax, 704(%rcx)
# Done (DEFINE = (LAMBDA (A B) (= A B)))
# (DEFINE /= (LAMBDA (A B) (/= A B)))
# (LAMBDA (A B) (/= A B))
movq 0(%rsp), %rax
movq $.L116, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (/= A B))
movq 0(%rsp), %rcx
movq %rax, 696(%rcx)
# Done (DEFINE /= (LAMBDA (A B) (/= A B)))
# (DEFINE + (LAMBDA ARGS (IF (NULL? ARGS) 0 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B)))))))
# (LAMBDA ARGS (IF (NULL? ARGS) 0 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B))))))
movq 0(%rsp), %rax
movq $.L120, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA ARGS (IF (NULL? ARGS) 0 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B))))))
movq 0(%rsp), %rcx
movq %rax, 688(%rcx)
# Done (DEFINE + (LAMBDA ARGS (IF (NULL? ARGS) 0 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (+ A B)))))))
# (DEFINE * (LAMBDA ARGS (IF (NULL? ARGS) 1 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B)))))))
# (LAMBDA ARGS (IF (NULL? ARGS) 1 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B))))))
movq 0(%rsp), %rax
movq $.L130, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA ARGS (IF (NULL? ARGS) 1 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B))))))
movq 0(%rsp), %rcx
movq %rax, 680(%rcx)
# Done (DEFINE * (LAMBDA ARGS (IF (NULL? ARGS) 1 (IF (NULL? (CDR ARGS)) (CAR ARGS) (REDUCE (CAR ARGS) (CDR ARGS) (LAMBDA (A B) (* A B)))))))
# (DEFINE - (LAMBDA (A . ARGS) (IF (NULL? ARGS) (- A) (REDUCE A ARGS (LAMBDA (A B) (- A B))))))
# (LAMBDA (A . ARGS) (IF (NULL? ARGS) (- A) (REDUCE A ARGS (LAMBDA (A B) (- A B)))))
movq 0(%rsp), %rax
movq $.L140, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A . ARGS) (IF (NULL? ARGS) (- A) (REDUCE A ARGS (LAMBDA (A B) (- A B)))))
movq 0(%rsp), %rcx
movq %rax, 672(%rcx)
# Done (DEFINE - (LAMBDA (A . ARGS) (IF (NULL? ARGS) (- A) (REDUCE A ARGS (LAMBDA (A B) (- A B))))))
# (DEFINE REM (LAMBDA (A B) (REM A B)))
# (LAMBDA (A B) (REM A B))
movq 0(%rsp), %rax
movq $.L145, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (REM A B))
movq 0(%rsp), %rcx
movq %rax, 664(%rcx)
# Done (DEFINE REM (LAMBDA (A B) (REM A B)))
# (DEFINE TRUNCATE (LAMBDA (A B) (TRUNCATE A B)))
# (LAMBDA (A B) (TRUNCATE A B))
movq 0(%rsp), %rax
movq $.L147, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (TRUNCATE A B))
movq 0(%rsp), %rcx
movq %rax, 656(%rcx)
# Done (DEFINE TRUNCATE (LAMBDA (A B) (TRUNCATE A B)))
# (DEFINE STRING? (LAMBDA (A) (STRING? A)))
# (LAMBDA (A) (STRING? A))
movq 0(%rsp), %rax
movq $.L149, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (STRING? A))
movq 0(%rsp), %rcx
movq %rax, 648(%rcx)
# Done (DEFINE STRING? (LAMBDA (A) (STRING? A)))
# (DEFINE MAKE-STRING (LAMBDA (A) (MAKE-STRING A)))
# (LAMBDA (A) (MAKE-STRING A))
movq 0(%rsp), %rax
movq $.L151, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (MAKE-STRING A))
movq 0(%rsp), %rcx
movq %rax, 640(%rcx)
# Done (DEFINE MAKE-STRING (LAMBDA (A) (MAKE-STRING A)))
# (DEFINE STRING-LENGTH (LAMBDA (A) (STRING-LENGTH A)))
# (LAMBDA (A) (STRING-LENGTH A))
movq 0(%rsp), %rax
movq $.L153, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (STRING-LENGTH A))
movq 0(%rsp), %rcx
movq %rax, 632(%rcx)
# Done (DEFINE STRING-LENGTH (LAMBDA (A) (STRING-LENGTH A)))
# (DEFINE VECTOR? (LAMBDA (A) (VECTOR? A)))
# (LAMBDA (A) (VECTOR? A))
movq 0(%rsp), %rax
movq $.L155, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (VECTOR? A))
movq 0(%rsp), %rcx
movq %rax, 624(%rcx)
# Done (DEFINE VECTOR? (LAMBDA (A) (VECTOR? A)))
# (DEFINE MAKE-VECTOR (LAMBDA (A) (MAKE-VECTOR A)))
# (LAMBDA (A) (MAKE-VECTOR A))
movq 0(%rsp), %rax
movq $.L157, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (MAKE-VECTOR A))
movq 0(%rsp), %rcx
movq %rax, 616(%rcx)
# Done (DEFINE MAKE-VECTOR (LAMBDA (A) (MAKE-VECTOR A)))
# (DEFINE VECTOR-LENGTH (LAMBDA (A) (VECTOR-LENGTH A)))
# (LAMBDA (A) (VECTOR-LENGTH A))
movq 0(%rsp), %rax
movq $.L159, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A) (VECTOR-LENGTH A))
movq 0(%rsp), %rcx
movq %rax, 608(%rcx)
# Done (DEFINE VECTOR-LENGTH (LAMBDA (A) (VECTOR-LENGTH A)))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE LENGTH (LAMBDA (L) (IF (NULL? L) 0 (+ (LENGTH (CDR L)) 1))))
# (LAMBDA (L) (IF (NULL? L) 0 (+ (LENGTH (CDR L)) 1)))
movq 0(%rsp), %rax
movq $.L161, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L) (IF (NULL? L) 0 (+ (LENGTH (CDR L)) 1)))
movq 0(%rsp), %rcx
movq %rax, 600(%rcx)
# Done (DEFINE LENGTH (LAMBDA (L) (IF (NULL? L) 0 (+ (LENGTH (CDR L)) 1))))
# (DEFINE LAST-N-CONSES (LAMBDA (L N) (DEFINE AUX (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))))) (AUX L)))
# (LAMBDA (L N) (DEFINE AUX (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))))) (AUX L))
movq 0(%rsp), %rax
movq $.L174, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L N) (DEFINE AUX (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))))) (AUX L))
movq 0(%rsp), %rcx
movq %rax, 592(%rcx)
# Done (DEFINE LAST-N-CONSES (LAMBDA (L N) (DEFINE AUX (LAMBDA (L) (IF (NULL? L) NIL (BEGIN (DEFINE RES (AUX (CDR L))) (IF (= N 0) RES (BEGIN (SET! N (- N 1)) L)))))) (AUX L)))
# (DEFINE LAST-CONS (LAMBDA (L) (LAST-N-CONSES L 1)))
# (LAMBDA (L) (LAST-N-CONSES L 1))
movq 0(%rsp), %rax
movq $.L176, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L) (LAST-N-CONSES L 1))
movq 0(%rsp), %rcx
movq %rax, 584(%rcx)
# Done (DEFINE LAST-CONS (LAMBDA (L) (LAST-N-CONSES L 1)))
# (DEFINE LIST* (LAMBDA (L1 . L) (IF (NULL? L) L1 (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L))))
# (LAMBDA (L1 . L) (IF (NULL? L) L1 (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L)))
movq 0(%rsp), %rax
movq $.L178, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L1 . L) (IF (NULL? L) L1 (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L)))
movq 0(%rsp), %rcx
movq %rax, 576(%rcx)
# Done (DEFINE LIST* (LAMBDA (L1 . L) (IF (NULL? L) L1 (BEGIN (SET! L (CONS L1 L)) (DEFINE PENULTIMATE (LAST-N-CONSES L 2)) (RPLACD PENULTIMATE (CAR (CDR PENULTIMATE))) L))))
# (DEFINE COPY-LIST (LAMBDA (L) (IF (PAIR? L) (CONS (CAR L) (COPY-LIST (CDR L))) L)))
# (LAMBDA (L) (IF (PAIR? L) (CONS (CAR L) (COPY-LIST (CDR L))) L))
movq 0(%rsp), %rax
movq $.L183, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (L) (IF (PAIR? L) (CONS (CAR L) (COPY-LIST (CDR L))) L))
movq 0(%rsp), %rcx
movq %rax, 568(%rcx)
# Done (DEFINE COPY-LIST (LAMBDA (L) (IF (PAIR? L) (CONS (CAR L) (COPY-LIST (CDR L))) L)))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS (DEFINE INTERN (LAMBDA (STR) (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM))))))
# (DEFINE INTERN (LAMBDA (STR) (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM)))))
# (LAMBDA (STR) (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM))))
movq 0(%rsp), %rax
movq $.L196, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR) (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM))))
movq 0(%rsp), %rcx
movq %rax, 560(%rcx)
# Done (DEFINE INTERN (LAMBDA (STR) (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM)))))
# Done (DEFINITIONS (DEFINE INTERN (LAMBDA (STR) (BEGIN (DEFINE #:G1519 (BEGIN (DEFINE #:G1520 (LAMBDA (#:G1521) (IF (NULL? #:G1521) FALSE (BEGIN (DEFINE SYM (CAR #:G1521)) (IF (BEGIN (STRING-EQUAL? STR (SYMBOL-NAME SYM))) SYM (#:G1520 (CDR #:G1521))))))) (#:G1520 INTERNED-SYMBOLS))) (IF #:G1519 #:G1519 (BEGIN (DEFINE SYM (PRIMITIVE-MAKE-SYMBOL STR)) (SET! INTERNED-SYMBOLS (CONS SYM INTERNED-SYMBOLS)) SYM))))))
# (DEFINE CHECK-STRING-INDEX (LAMBDA (STR INDEX) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN)))))
# (LAMBDA (STR INDEX) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN))))
movq 0(%rsp), %rax
movq $.L202, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR INDEX) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN))))
movq 0(%rsp), %rcx
movq %rax, 552(%rcx)
# Done (DEFINE CHECK-STRING-INDEX (LAMBDA (STR INDEX) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= INDEX 0) (< INDEX STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string index out of bounds (index: ~A, string length: ~A)" INDEX STR-LEN)))))
# (DEFINE CHECK-STRING-RANGE (LAMBDA (STR OFFSET LEN) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN)))))
# (LAMBDA (STR OFFSET LEN) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN))))
movq 0(%rsp), %rax
movq $.L214, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR OFFSET LEN) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN))))
movq 0(%rsp), %rcx
movq %rax, 544(%rcx)
# Done (DEFINE CHECK-STRING-RANGE (LAMBDA (STR OFFSET LEN) (DEFINE STR-LEN (STRING-LENGTH STR)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) STR-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "string range out of bounds (offset: ~A, length: ~A, string length ~A" OFFSET LEN STR-LEN)))))
# (DEFINITIONS (DEFINE STRING-REF (LAMBDA (STR INDEX) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-REF STR INDEX))) (DEFINE STRING-SET! (LAMBDA (STR INDEX CH) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-SET! STR INDEX CH) CH)) (DEFINE STRING-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-STRING-RANGE SRC SRC-OFFSET LEN) (CHECK-STRING-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))))
# (DEFINE STRING-REF (LAMBDA (STR INDEX) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-REF STR INDEX)))
# (LAMBDA (STR INDEX) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-REF STR INDEX))
movq 0(%rsp), %rax
movq $.L225, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR INDEX) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-REF STR INDEX))
movq 0(%rsp), %rcx
movq %rax, 536(%rcx)
# Done (DEFINE STRING-REF (LAMBDA (STR INDEX) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-REF STR INDEX)))
# (DEFINE STRING-SET! (LAMBDA (STR INDEX CH) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-SET! STR INDEX CH) CH))
# (LAMBDA (STR INDEX CH) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-SET! STR INDEX CH) CH)
movq 0(%rsp), %rax
movq $.L227, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR INDEX CH) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-SET! STR INDEX CH) CH)
movq 0(%rsp), %rcx
movq %rax, 528(%rcx)
# Done (DEFINE STRING-SET! (LAMBDA (STR INDEX CH) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-SET! STR INDEX CH) CH))
# (DEFINE STRING-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-STRING-RANGE SRC SRC-OFFSET LEN) (CHECK-STRING-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)))
# (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-STRING-RANGE SRC SRC-OFFSET LEN) (CHECK-STRING-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))
movq 0(%rsp), %rax
movq $.L229, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-STRING-RANGE SRC SRC-OFFSET LEN) (CHECK-STRING-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))
movq 0(%rsp), %rcx
movq %rax, 520(%rcx)
# Done (DEFINE STRING-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-STRING-RANGE SRC SRC-OFFSET LEN) (CHECK-STRING-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)))
# Done (DEFINITIONS (DEFINE STRING-REF (LAMBDA (STR INDEX) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-REF STR INDEX))) (DEFINE STRING-SET! (LAMBDA (STR INDEX CH) (CHECK-STRING-INDEX STR INDEX) (PRIMITIVE-STRING-SET! STR INDEX CH) CH)) (DEFINE STRING-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-STRING-RANGE SRC SRC-OFFSET LEN) (CHECK-STRING-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-STRING-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))))
# (DEFINE CHECK-VECTOR-INDEX (LAMBDA (VEC INDEX) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN)))))
# (LAMBDA (VEC INDEX) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN))))
movq 0(%rsp), %rax
movq $.L235, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (VEC INDEX) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN))))
movq 0(%rsp), %rcx
movq %rax, 512(%rcx)
# Done (DEFINE CHECK-VECTOR-INDEX (LAMBDA (VEC INDEX) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (> INDEX 0) (< INDEX VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector index out of bounds (index: ~A, vector length ~A)" INDEX VEC-LEN)))))
# (DEFINE CHECK-VECTOR-RANGE (LAMBDA (VEC OFFSET LEN) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN)))))
# (LAMBDA (VEC OFFSET LEN) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN))))
movq 0(%rsp), %rax
movq $.L247, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (VEC OFFSET LEN) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN))))
movq 0(%rsp), %rcx
movq %rax, 504(%rcx)
# Done (DEFINE CHECK-VECTOR-RANGE (LAMBDA (VEC OFFSET LEN) (DEFINE VEC-LEN (VECTOR-LENGTH VEC)) (IF (IF (IF (>= OFFSET 0) (<= (+ OFFSET LEN) VEC-LEN) FALSE) FALSE TRUE) (BEGIN (ERROR "vector range out of bounds (offset: ~A, length: ~A, vector length ~A)" OFFSET LEN VEC-LEN)))))
# (DEFINITIONS (DEFINE VECTOR-REF (LAMBDA (VEC INDEX) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-REF VEC INDEX))) (DEFINE VECTOR-SET! (LAMBDA (VEC INDEX VAL) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-SET! VEC INDEX VAL) VAL)) (DEFINE VECTOR-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN) (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))))
# (DEFINE VECTOR-REF (LAMBDA (VEC INDEX) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-REF VEC INDEX)))
# (LAMBDA (VEC INDEX) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-REF VEC INDEX))
movq 0(%rsp), %rax
movq $.L258, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (VEC INDEX) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-REF VEC INDEX))
movq 0(%rsp), %rcx
movq %rax, 496(%rcx)
# Done (DEFINE VECTOR-REF (LAMBDA (VEC INDEX) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-REF VEC INDEX)))
# (DEFINE VECTOR-SET! (LAMBDA (VEC INDEX VAL) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-SET! VEC INDEX VAL) VAL))
# (LAMBDA (VEC INDEX VAL) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-SET! VEC INDEX VAL) VAL)
movq 0(%rsp), %rax
movq $.L260, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (VEC INDEX VAL) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-SET! VEC INDEX VAL) VAL)
movq 0(%rsp), %rcx
movq %rax, 488(%rcx)
# Done (DEFINE VECTOR-SET! (LAMBDA (VEC INDEX VAL) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-SET! VEC INDEX VAL) VAL))
# (DEFINE VECTOR-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN) (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)))
# (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN) (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))
movq 0(%rsp), %rax
movq $.L262, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN) (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))
movq 0(%rsp), %rcx
movq %rax, 480(%rcx)
# Done (DEFINE VECTOR-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN) (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN)))
# Done (DEFINITIONS (DEFINE VECTOR-REF (LAMBDA (VEC INDEX) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-REF VEC INDEX))) (DEFINE VECTOR-SET! (LAMBDA (VEC INDEX VAL) (CHECK-VECTOR-INDEX VEC INDEX) (PRIMITIVE-VECTOR-SET! VEC INDEX VAL) VAL)) (DEFINE VECTOR-COPY (LAMBDA (SRC SRC-OFFSET DEST DEST-OFFSET LEN) (CHECK-VECTOR-RANGE SRC SRC-OFFSET LEN) (CHECK-VECTOR-RANGE DEST DEST-OFFSET LEN) (PRIMITIVE-VECTOR-COPY SRC SRC-OFFSET DEST DEST-OFFSET LEN))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS (DEFINE SYSCALL-READ (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))) (DEFINE SYSCALL-WRITE (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))) (DEFINE STDOUT (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 1 STR OFFSET LEN))) (DEFINE STDERR (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 2 STR OFFSET LEN))))
# (DEFINE SYSCALL-READ (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))))
# (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))
movq 0(%rsp), %rax
movq $.L267, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))
movq 0(%rsp), %rcx
movq %rax, 472(%rcx)
# Done (DEFINE SYSCALL-READ (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))))
# (DEFINE SYSCALL-WRITE (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))))
# (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))
movq 0(%rsp), %rax
movq $.L269, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))
movq 0(%rsp), %rcx
movq %rax, 464(%rcx)
# Done (DEFINE SYSCALL-WRITE (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN)))))
# (DEFINE STDOUT (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 1 STR OFFSET LEN)))
# (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 1 STR OFFSET LEN))
movq 0(%rsp), %rax
movq $.L271, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 1 STR OFFSET LEN))
movq 0(%rsp), %rcx
movq %rax, 456(%rcx)
# Done (DEFINE STDOUT (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 1 STR OFFSET LEN)))
# (DEFINE STDERR (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 2 STR OFFSET LEN)))
# (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 2 STR OFFSET LEN))
movq 0(%rsp), %rax
movq $.L273, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 2 STR OFFSET LEN))
movq 0(%rsp), %rcx
movq %rax, 448(%rcx)
# Done (DEFINE STDERR (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 2 STR OFFSET LEN)))
# Done (DEFINITIONS (DEFINE SYSCALL-READ (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "read" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))) (DEFINE SYSCALL-WRITE (LAMBDA (FD STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (RAW->FIXNUM (C-CALL "write" (FIXNUM->RAW FD) (STRING-ADDRESS STR OFFSET) (FIXNUM->RAW LEN))))) (DEFINE STDOUT (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 1 STR OFFSET LEN))) (DEFINE STDERR (LAMBDA (STR OFFSET LEN) (SYSCALL-WRITE 2 STR OFFSET LEN))))
# (DEFINE ASSOC (LAMBDA (KEY L) (IF (NULL? L) (BEGIN FALSE) (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN))))))
# (LAMBDA (KEY L) (IF (NULL? L) (BEGIN FALSE) (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN)))))
movq 0(%rsp), %rax
movq $.L275, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (KEY L) (IF (NULL? L) (BEGIN FALSE) (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN)))))
movq 0(%rsp), %rcx
movq %rax, 440(%rcx)
# Done (DEFINE ASSOC (LAMBDA (KEY L) (IF (NULL? L) (BEGIN FALSE) (IF (EQ? KEY (CAR (CAR L))) (BEGIN (CAR L)) (IF TRUE (BEGIN (ASSOC KEY (CDR L))) (BEGIN))))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE ACONS (LAMBDA (KEY VAL TAIL) (CONS (CONS KEY VAL) TAIL)))
# (LAMBDA (KEY VAL TAIL) (CONS (CONS KEY VAL) TAIL))
movq 0(%rsp), %rax
movq $.L286, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (KEY VAL TAIL) (CONS (CONS KEY VAL) TAIL))
movq 0(%rsp), %rcx
movq %rax, 432(%rcx)
# Done (DEFINE ACONS (LAMBDA (KEY VAL TAIL) (CONS (CONS KEY VAL) TAIL)))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE SUBSTRING (LAMBDA (STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (DEFINE NEWSTR (MAKE-STRING LEN)) (STRING-COPY STR OFFSET NEWSTR 0 LEN) NEWSTR))
# (LAMBDA (STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (DEFINE NEWSTR (MAKE-STRING LEN)) (STRING-COPY STR OFFSET NEWSTR 0 LEN) NEWSTR)
movq 0(%rsp), %rax
movq $.L288, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (DEFINE NEWSTR (MAKE-STRING LEN)) (STRING-COPY STR OFFSET NEWSTR 0 LEN) NEWSTR)
movq 0(%rsp), %rcx
movq %rax, 424(%rcx)
# Done (DEFINE SUBSTRING (LAMBDA (STR OFFSET LEN) (CHECK-STRING-RANGE STR OFFSET LEN) (DEFINE NEWSTR (MAKE-STRING LEN)) (STRING-COPY STR OFFSET NEWSTR 0 LEN) NEWSTR))
# (DEFINE CHOMP (LAMBDA (STR) (DEFINE LEN (STRING-LENGTH STR)) (IF (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE) (SUBSTRING STR 0 (- LEN 1)) STR)))
# (LAMBDA (STR) (DEFINE LEN (STRING-LENGTH STR)) (IF (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE) (SUBSTRING STR 0 (- LEN 1)) STR))
movq 0(%rsp), %rax
movq $.L290, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STR) (DEFINE LEN (STRING-LENGTH STR)) (IF (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE) (SUBSTRING STR 0 (- LEN 1)) STR))
movq 0(%rsp), %rcx
movq %rax, 416(%rcx)
# Done (DEFINE CHOMP (LAMBDA (STR) (DEFINE LEN (STRING-LENGTH STR)) (IF (IF (> LEN 0) (EQ? #\Newline (STRING-REF STR (- LEN 1))) FALSE) (SUBSTRING STR 0 (- LEN 1)) STR)))
# (DEFINE STRING-EQUAL? (LAMBDA (A B) (DEFINE LEN (STRING-LENGTH A)) (IF (= (STRING-LENGTH B) LEN) (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX)) FALSE)))
# (LAMBDA (A B) (DEFINE LEN (STRING-LENGTH A)) (IF (= (STRING-LENGTH B) LEN) (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX)) FALSE))
movq 0(%rsp), %rax
movq $.L306, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (DEFINE LEN (STRING-LENGTH A)) (IF (= (STRING-LENGTH B) LEN) (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX)) FALSE))
movq 0(%rsp), %rcx
movq %rax, 408(%rcx)
# Done (DEFINE STRING-EQUAL? (LAMBDA (A B) (DEFINE LEN (STRING-LENGTH A)) (IF (= (STRING-LENGTH B) LEN) (BEGIN (DEFINE POS 0) (DEFINE AUX (LAMBDA NIL (BEGIN (DEFINE #:G1523 (= POS LEN)) (IF #:G1523 #:G1523 (IF (EQ? (STRING-REF A POS) (STRING-REF B POS)) (BEGIN (SET! POS (+ POS 1)) (AUX)) FALSE))))) (AUX)) FALSE)))
# (DEFINE EQUAL? (LAMBDA (A B) (IF (PAIR? A) (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)) (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN))))))
# (LAMBDA (A B) (IF (PAIR? A) (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)) (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN)))))
movq 0(%rsp), %rax
movq $.L311, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (A B) (IF (PAIR? A) (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)) (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN)))))
movq 0(%rsp), %rcx
movq %rax, 400(%rcx)
# Done (DEFINE EQUAL? (LAMBDA (A B) (IF (PAIR? A) (BEGIN (IF (IF (PAIR? B) (EQUAL? (CAR A) (CAR B)) FALSE) (EQUAL? (CDR A) (CDR B)) FALSE)) (IF (STRING? A) (BEGIN (IF (STRING? B) (STRING-EQUAL? A B) FALSE)) (IF TRUE (BEGIN (EQ? A B)) (BEGIN))))))
# (DEFINE READ-LINE (LAMBDA NIL (DEFINITIONS) (DEFINE STR (MAKE-STRING 1000)) (SUBSTRING STR 0 (SYSCALL-READ 0 STR 0 1000))))
# (LAMBDA NIL (DEFINITIONS) (DEFINE STR (MAKE-STRING 1000)) (SUBSTRING STR 0 (SYSCALL-READ 0 STR 0 1000)))
movq 0(%rsp), %rax
movq $.L331, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (DEFINITIONS) (DEFINE STR (MAKE-STRING 1000)) (SUBSTRING STR 0 (SYSCALL-READ 0 STR 0 1000)))
movq 0(%rsp), %rcx
movq %rax, 392(%rcx)
# Done (DEFINE READ-LINE (LAMBDA NIL (DEFINITIONS) (DEFINE STR (MAKE-STRING 1000)) (SUBSTRING STR 0 (SYSCALL-READ 0 STR 0 1000))))
# (DEFINE WRITE-SUBSTRING (LAMBDA (STREAM STR POS LEN) (STREAM STR POS LEN)))
# (LAMBDA (STREAM STR POS LEN) (STREAM STR POS LEN))
movq 0(%rsp), %rax
movq $.L333, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM STR POS LEN) (STREAM STR POS LEN))
movq 0(%rsp), %rcx
movq %rax, 384(%rcx)
# Done (DEFINE WRITE-SUBSTRING (LAMBDA (STREAM STR POS LEN) (STREAM STR POS LEN)))
# (DEFINE WRITE-STRING (LAMBDA (STREAM STR) (STREAM STR 0 (STRING-LENGTH STR))))
# (LAMBDA (STREAM STR) (STREAM STR 0 (STRING-LENGTH STR)))
movq 0(%rsp), %rax
movq $.L335, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM STR) (STREAM STR 0 (STRING-LENGTH STR)))
movq 0(%rsp), %rcx
movq %rax, 376(%rcx)
# Done (DEFINE WRITE-STRING (LAMBDA (STREAM STR) (STREAM STR 0 (STRING-LENGTH STR))))
# (DEFINE PRINT-NUMBER-DIGITS "0123456789abcdefghijklmnopqrstuvwxyz")
# "0123456789abcdefghijklmnopqrstuvwxyz"
movq $.L337+4, %rax
# Done "0123456789abcdefghijklmnopqrstuvwxyz"
movq 0(%rsp), %rcx
movq %rax, 368(%rcx)
# Done (DEFINE PRINT-NUMBER-DIGITS "0123456789abcdefghijklmnopqrstuvwxyz")
# (DEFINE *PRINT-RADIX* 10)
# 10
movq $80, %rax
# Done 10
movq 0(%rsp), %rcx
movq %rax, 360(%rcx)
# Done (DEFINE *PRINT-RADIX* 10)
# (DEFINE *PRINT-READABLY* FALSE)
# FALSE
movq $7, %rax
# Done FALSE
movq 0(%rsp), %rcx
movq %rax, 352(%rcx)
# Done (DEFINE *PRINT-READABLY* FALSE)
# (DEFINE CHARACTER-STRING (LAMBDA (CH) (DEFINE BUF (MAKE-STRING 1)) (STRING-SET! BUF 0 CH) BUF))
# (LAMBDA (CH) (DEFINE BUF (MAKE-STRING 1)) (STRING-SET! BUF 0 CH) BUF)
movq 0(%rsp), %rax
movq $.L338, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (CH) (DEFINE BUF (MAKE-STRING 1)) (STRING-SET! BUF 0 CH) BUF)
movq 0(%rsp), %rcx
movq %rax, 344(%rcx)
# Done (DEFINE CHARACTER-STRING (LAMBDA (CH) (DEFINE BUF (MAKE-STRING 1)) (STRING-SET! BUF 0 CH) BUF))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE PRINT-NEWLINE (BEGIN (DEFINE STR (CHARACTER-STRING #\Newline)) (LAMBDA (STREAM) (WRITE-STRING STREAM STR))))
# (BEGIN (DEFINE STR (CHARACTER-STRING #\Newline)) (LAMBDA (STREAM) (WRITE-STRING STREAM STR)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE STR (CHARACTER-STRING #\Newline))
# (CHARACTER-STRING #\Newline)
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# #\Newline
movq $80, %rax
# Done #\Newline
movq %rax, 16(%rcx)
# CHARACTER-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 344(%rax), %rax
# Done CHARACTER-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHARACTER-STRING #\Newline)
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE STR (CHARACTER-STRING #\Newline))
# (LAMBDA (STREAM) (WRITE-STRING STREAM STR))
movq 0(%rsp), %rax
movq $.L340, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM) (WRITE-STRING STREAM STR))
addq $8, %rsp
# Done (BEGIN (DEFINE STR (CHARACTER-STRING #\Newline)) (LAMBDA (STREAM) (WRITE-STRING STREAM STR)))
movq 0(%rsp), %rcx
movq %rax, 336(%rcx)
# Done (DEFINE PRINT-NEWLINE (BEGIN (DEFINE STR (CHARACTER-STRING #\Newline)) (LAMBDA (STREAM) (WRITE-STRING STREAM STR))))
# (DEFINE PRINT-DOUBLE-QUOTE (BEGIN (DEFINE STR (CHARACTER-STRING #\")) (LAMBDA (STREAM) (WRITE-STRING STREAM STR))))
# (BEGIN (DEFINE STR (CHARACTER-STRING #\")) (LAMBDA (STREAM) (WRITE-STRING STREAM STR)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE STR (CHARACTER-STRING #\"))
# (CHARACTER-STRING #\")
subq $24, %rbx
movq $16, 0(%rbx)
movq %rbx, %rcx
# #\"
movq $272, %rax
# Done #\"
movq %rax, 16(%rcx)
# CHARACTER-STRING
movq 0(%rsp), %rax
movq 8(%rax), %rax
movq 344(%rax), %rax
# Done CHARACTER-STRING
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (CHARACTER-STRING #\")
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE STR (CHARACTER-STRING #\"))
# (LAMBDA (STREAM) (WRITE-STRING STREAM STR))
movq 0(%rsp), %rax
movq $.L342, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM) (WRITE-STRING STREAM STR))
addq $8, %rsp
# Done (BEGIN (DEFINE STR (CHARACTER-STRING #\")) (LAMBDA (STREAM) (WRITE-STRING STREAM STR)))
movq 0(%rsp), %rcx
movq %rax, 328(%rcx)
# Done (DEFINE PRINT-DOUBLE-QUOTE (BEGIN (DEFINE STR (CHARACTER-STRING #\")) (LAMBDA (STREAM) (WRITE-STRING STREAM STR))))
# (DEFINE PRINT-NUMBER (LAMBDA (STREAM NUM) (IF (= NUM 0) (WRITE-STRING STREAM "0") (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS))))))
# (LAMBDA (STREAM NUM) (IF (= NUM 0) (WRITE-STRING STREAM "0") (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS)))))
movq 0(%rsp), %rax
movq $.L351, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM NUM) (IF (= NUM 0) (WRITE-STRING STREAM "0") (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS)))))
movq 0(%rsp), %rcx
movq %rax, 320(%rcx)
# Done (DEFINE PRINT-NUMBER (LAMBDA (STREAM NUM) (IF (= NUM 0) (WRITE-STRING STREAM "0") (BEGIN (IF (IF (IF (<= 2 *PRINT-RADIX*) (<= *PRINT-RADIX* (STRING-LENGTH PRINT-NUMBER-DIGITS)) FALSE) FALSE TRUE) (BEGIN (ERROR "Bad radix ~D" *PRINT-RADIX*))) (DEFINE NEGATED FALSE) (IF (< NUM 0) (BEGIN (SET! NEGATED TRUE) (SET! NUM (- NUM)))) (DEFINITIONS) (DEFINE BUF (MAKE-STRING 21)) (DEFINE POS 21) (BEGIN (DEFINE #:G1525 (LAMBDA NIL (IF (> NUM 0) (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS (STRING-REF PRINT-NUMBER-DIGITS (REM NUM *PRINT-RADIX*))) (SET! NUM (TRUNCATE NUM *PRINT-RADIX*)) (#:G1525))))) (#:G1525)) (IF NEGATED (BEGIN (SET! POS (- POS 1)) (STRING-SET! BUF POS #\-))) (WRITE-SUBSTRING STREAM BUF POS (- 21 POS))))))
# (DEFINE PRINT-STRING (LAMBDA (STREAM STR) (IF *PRINT-READABLY* (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM)) (WRITE-STRING STREAM STR))))
# (LAMBDA (STREAM STR) (IF *PRINT-READABLY* (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM)) (WRITE-STRING STREAM STR)))
movq 0(%rsp), %rax
movq $.L371, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM STR) (IF *PRINT-READABLY* (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM)) (WRITE-STRING STREAM STR)))
movq 0(%rsp), %rcx
movq %rax, 312(%rcx)
# Done (DEFINE PRINT-STRING (LAMBDA (STREAM STR) (IF *PRINT-READABLY* (BEGIN (PRINT-DOUBLE-QUOTE STREAM) (WRITE-STRING STREAM STR) (PRINT-DOUBLE-QUOTE STREAM)) (WRITE-STRING STREAM STR))))
# (DEFINE PRINT-CHAR (LAMBDA (STREAM CH) (IF (NUMBER? CH) (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH))) (PRINT STREAM CH))))
# (LAMBDA (STREAM CH) (IF (NUMBER? CH) (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH))) (PRINT STREAM CH)))
movq 0(%rsp), %rax
movq $.L378, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM CH) (IF (NUMBER? CH) (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH))) (PRINT STREAM CH)))
movq 0(%rsp), %rcx
movq %rax, 304(%rcx)
# Done (DEFINE PRINT-CHAR (LAMBDA (STREAM CH) (IF (NUMBER? CH) (IF *PRINT-READABLY* (BEGIN (WRITE-STRING STREAM "#\\") (WRITE-STRING (IF (EQ? CH #\Newline) (BEGIN "Newline") (IF TRUE (BEGIN (CHARACTER-STRING CH)) (BEGIN))))) (WRITE-STRING (CHARACTER-STRING CH))) (PRINT STREAM CH))))
# (DEFINE PRINT-SYMBOL (LAMBDA (STREAM SYM) (DEFINE STR (SYMBOL-NAME SYM)) (WRITE-SUBSTRING STREAM STR 0 (STRING-LENGTH STR))))
# (LAMBDA (STREAM SYM) (DEFINE STR (SYMBOL-NAME SYM)) (WRITE-SUBSTRING STREAM STR 0 (STRING-LENGTH STR)))
movq 0(%rsp), %rax
movq $.L392, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM SYM) (DEFINE STR (SYMBOL-NAME SYM)) (WRITE-SUBSTRING STREAM STR 0 (STRING-LENGTH STR)))
movq 0(%rsp), %rcx
movq %rax, 296(%rcx)
# Done (DEFINE PRINT-SYMBOL (LAMBDA (STREAM SYM) (DEFINE STR (SYMBOL-NAME SYM)) (WRITE-SUBSTRING STREAM STR 0 (STRING-LENGTH STR))))
# (DEFINE SPECIAL-PRINTED-FORMS (QUOTE ((FALSE . "false") (TRUE . "true") (UNSPECIFIED . "unspecified") (NIL . "()"))))
# (QUOTE ((FALSE . "false") (TRUE . "true") (UNSPECIFIED . "unspecified") (NIL . "()")))
movq $.L394+2, %rax
# Done (QUOTE ((FALSE . "false") (TRUE . "true") (UNSPECIFIED . "unspecified") (NIL . "()")))
movq 0(%rsp), %rcx
movq %rax, 288(%rcx)
# Done (DEFINE SPECIAL-PRINTED-FORMS (QUOTE ((FALSE . "false") (TRUE . "true") (UNSPECIFIED . "unspecified") (NIL . "()"))))
# (DEFINE PRINT-LIST (LAMBDA (STREAM L) (WRITE-STRING STREAM "(") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (BEGIN (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))) (#:G1527)) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L))) (WRITE-STRING STREAM ")")))
# (LAMBDA (STREAM L) (WRITE-STRING STREAM "(") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (BEGIN (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))) (#:G1527)) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L))) (WRITE-STRING STREAM ")"))
movq 0(%rsp), %rax
movq $.L415, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM L) (WRITE-STRING STREAM "(") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (BEGIN (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))) (#:G1527)) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L))) (WRITE-STRING STREAM ")"))
movq 0(%rsp), %rcx
movq %rax, 280(%rcx)
# Done (DEFINE PRINT-LIST (LAMBDA (STREAM L) (WRITE-STRING STREAM "(") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (BEGIN (DEFINE #:G1527 (LAMBDA NIL (IF (PAIR? L) (BEGIN (WRITE-STRING STREAM " ") (PRINT STREAM (CAR L)) (SET! L (CDR L)) (#:G1527))))) (#:G1527)) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (WRITE-STRING STREAM " . ") (PRINT STREAM L))) (WRITE-STRING STREAM ")")))
# (DEFINE PRINT (LAMBDA (STREAM OBJ) (IF (PAIR? OBJ) (BEGIN (PRINT-LIST STREAM OBJ)) (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))))))))
# (LAMBDA (STREAM OBJ) (IF (PAIR? OBJ) (BEGIN (PRINT-LIST STREAM OBJ)) (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))))))))
movq 0(%rsp), %rax
movq $.L425, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM OBJ) (IF (PAIR? OBJ) (BEGIN (PRINT-LIST STREAM OBJ)) (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN))))))))
movq 0(%rsp), %rcx
movq %rax, 272(%rcx)
# Done (DEFINE PRINT (LAMBDA (STREAM OBJ) (IF (PAIR? OBJ) (BEGIN (PRINT-LIST STREAM OBJ)) (IF (NUMBER? OBJ) (BEGIN (PRINT-NUMBER STREAM OBJ)) (IF (STRING? OBJ) (BEGIN (PRINT-STRING STREAM OBJ)) (IF (SYMBOL? OBJ) (BEGIN (PRINT-SYMBOL STREAM OBJ)) (IF (FUNCTION? OBJ) (BEGIN (WRITE-STRING STREAM "#<function>")) (IF TRUE (BEGIN (DEFINE SPECIAL (ASSOC OBJ SPECIAL-PRINTED-FORMS)) (IF SPECIAL (WRITE-STRING STREAM (CDR SPECIAL)) (ERROR "cannot print object"))) (BEGIN)))))))))
# (DEFINE FORMOUT-LIST (LAMBDA (STREAM CONTROL ARGS) (DEFINE POS 0) (DEFINE WRITE-FROM 0) (DEFINE CONTROL-LEN (STRING-LENGTH CONTROL)) (DEFINE CH) (DEFINE FLUSH (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM)))) (BEGIN (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))) (#:G1542)) (FLUSH)))
# (LAMBDA (STREAM CONTROL ARGS) (DEFINE POS 0) (DEFINE WRITE-FROM 0) (DEFINE CONTROL-LEN (STRING-LENGTH CONTROL)) (DEFINE CH) (DEFINE FLUSH (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM)))) (BEGIN (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))) (#:G1542)) (FLUSH))
movq 0(%rsp), %rax
movq $.L505, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM CONTROL ARGS) (DEFINE POS 0) (DEFINE WRITE-FROM 0) (DEFINE CONTROL-LEN (STRING-LENGTH CONTROL)) (DEFINE CH) (DEFINE FLUSH (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM)))) (BEGIN (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))) (#:G1542)) (FLUSH))
movq 0(%rsp), %rcx
movq %rax, 264(%rcx)
# Done (DEFINE FORMOUT-LIST (LAMBDA (STREAM CONTROL ARGS) (DEFINE POS 0) (DEFINE WRITE-FROM 0) (DEFINE CONTROL-LEN (STRING-LENGTH CONTROL)) (DEFINE CH) (DEFINE FLUSH (LAMBDA NIL (WRITE-SUBSTRING STREAM CONTROL WRITE-FROM (- POS WRITE-FROM)))) (BEGIN (DEFINE #:G1542 (LAMBDA NIL (IF (< POS CONTROL-LEN) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (IF (IF (EQ? CH #\~) FALSE TRUE) (SET! POS (+ POS 1)) (BEGIN (FLUSH) (SET! POS (+ POS 1)) (IF (>= POS CONTROL-LEN) (SET! WRITE-FROM POS) (BEGIN (SET! CH (STRING-REF CONTROL POS)) (SET! POS (+ POS 1)) (SET! WRITE-FROM POS) (IF (EQ? CH #\~) (BEGIN (SET! WRITE-FROM (- WRITE-FROM 1))) (IF (EQ? CH #\%) (BEGIN (PRINT-NEWLINE STREAM)) (IF (BEGIN (DEFINE #:G1543 (EQ? CH #\A)) (IF #:G1543 #:G1543 (EQ? CH #\a))) (BEGIN (BEGIN (DEFINE #:G1544 *PRINT-READABLY*) (SET! *PRINT-READABLY* FALSE) (BEGIN (DEFINE #:G1545 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1544) #:G1545)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1546 (EQ? CH #\S)) (IF #:G1546 #:G1546 (EQ? CH #\s))) (BEGIN (BEGIN (DEFINE #:G1547 *PRINT-READABLY*) (SET! *PRINT-READABLY* TRUE) (BEGIN (DEFINE #:G1548 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-READABLY* #:G1547) #:G1548)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1549 (EQ? CH #\D)) (IF #:G1549 #:G1549 (EQ? CH #\d))) (BEGIN (BEGIN (DEFINE #:G1550 *PRINT-RADIX*) (SET! *PRINT-RADIX* 10) (BEGIN (DEFINE #:G1551 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1550) #:G1551)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1552 (EQ? CH #\X)) (IF #:G1552 #:G1552 (EQ? CH #\x))) (BEGIN (BEGIN (DEFINE #:G1553 *PRINT-RADIX*) (SET! *PRINT-RADIX* 16) (BEGIN (DEFINE #:G1554 (BEGIN (PRINT STREAM (CAR ARGS)))) (SET! *PRINT-RADIX* #:G1553) #:G1554)) (SET! ARGS (CDR ARGS))) (IF (BEGIN (DEFINE #:G1555 (EQ? CH #\C)) (IF #:G1555 #:G1555 (EQ? CH #\c))) (BEGIN (PRINT-CHAR STREAM (CAR ARGS)) (SET! ARGS (CDR ARGS))) (IF TRUE (BEGIN (ERROR "Unknown format character ~C" CH)) (BEGIN))))))))))))) (#:G1542))))) (#:G1542)) (FLUSH)))
# (DEFINE FORMOUT (LAMBDA (STREAM CONTROL . ARGS) (FORMOUT-LIST STREAM CONTROL ARGS)))
# (LAMBDA (STREAM CONTROL . ARGS) (FORMOUT-LIST STREAM CONTROL ARGS))
movq 0(%rsp), %rax
movq $.L507, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (STREAM CONTROL . ARGS) (FORMOUT-LIST STREAM CONTROL ARGS))
movq 0(%rsp), %rcx
movq %rax, 256(%rcx)
# Done (DEFINE FORMOUT (LAMBDA (STREAM CONTROL . ARGS) (FORMOUT-LIST STREAM CONTROL ARGS)))
# (DEFINE FORMAT-LIST (LAMBDA (CONTROL ARGS) (DEFINE SPACE 100) (DEFINE BUF (MAKE-STRING SPACE)) (DEFINE POS 0) (DEFINE OUT (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN)))) (FORMOUT-LIST OUT CONTROL ARGS) (SUBSTRING BUF 0 POS)))
# (LAMBDA (CONTROL ARGS) (DEFINE SPACE 100) (DEFINE BUF (MAKE-STRING SPACE)) (DEFINE POS 0) (DEFINE OUT (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN)))) (FORMOUT-LIST OUT CONTROL ARGS) (SUBSTRING BUF 0 POS))
movq 0(%rsp), %rax
movq $.L517, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (CONTROL ARGS) (DEFINE SPACE 100) (DEFINE BUF (MAKE-STRING SPACE)) (DEFINE POS 0) (DEFINE OUT (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN)))) (FORMOUT-LIST OUT CONTROL ARGS) (SUBSTRING BUF 0 POS))
movq 0(%rsp), %rcx
movq %rax, 248(%rcx)
# Done (DEFINE FORMAT-LIST (LAMBDA (CONTROL ARGS) (DEFINE SPACE 100) (DEFINE BUF (MAKE-STRING SPACE)) (DEFINE POS 0) (DEFINE OUT (LAMBDA (STR OFFSET LEN) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 (STRING-LENGTH BUF))) (IF (< SPACE LEN) (BEGIN (SET! SPACE (* 2 LEN)))) (DEFINE NEW-BUF (MAKE-STRING SPACE)) (STRING-COPY BUF 0 NEW-BUF 0 POS) (SET! BUF NEW-BUF))) (STRING-COPY STR OFFSET BUF POS LEN) (SET! POS (+ POS LEN)) (SET! SPACE (- SPACE LEN)))) (FORMOUT-LIST OUT CONTROL ARGS) (SUBSTRING BUF 0 POS)))
# (DEFINE FORMAT (LAMBDA (CONTROL . ARGS) (FORMAT-LIST CONTROL ARGS)))
# (LAMBDA (CONTROL . ARGS) (FORMAT-LIST CONTROL ARGS))
movq 0(%rsp), %rax
movq $.L519, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (CONTROL . ARGS) (FORMAT-LIST CONTROL ARGS))
movq 0(%rsp), %rcx
movq %rax, 240(%rcx)
# Done (DEFINE FORMAT (LAMBDA (CONTROL . ARGS) (FORMAT-LIST CONTROL ARGS)))
# (DEFINE ERROR (LAMBDA (MESSAGE . ARGS) (FORMOUT STDERR "~A~%" (FORMAT-LIST MESSAGE ARGS)) (ERROR-HALT MESSAGE ARGS)))
# (LAMBDA (MESSAGE . ARGS) (FORMOUT STDERR "~A~%" (FORMAT-LIST MESSAGE ARGS)) (ERROR-HALT MESSAGE ARGS))
movq 0(%rsp), %rax
movq $.L522, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (MESSAGE . ARGS) (FORMOUT STDERR "~A~%" (FORMAT-LIST MESSAGE ARGS)) (ERROR-HALT MESSAGE ARGS))
movq 0(%rsp), %rcx
movq %rax, 232(%rcx)
# Done (DEFINE ERROR (LAMBDA (MESSAGE . ARGS) (FORMOUT STDERR "~A~%" (FORMAT-LIST MESSAGE ARGS)) (ERROR-HALT MESSAGE ARGS)))
# (DEFINITIONS (SET! ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1)))) (SET! HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME)) (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME)))) (DEFINE APPLY (LAMBDA (FUNC ARG1 . ARGS) (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))) (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))) (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))) (SET! ARGS (CONS ARG1 ARGS)) (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))) (FILL-ARGS-VECTOR ARGS ARGS-VEC 1) (APPLY-FRAME FUNC ARGS-VEC))))
# (SET! ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1))))
# (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1)))
movq 0(%rsp), %rax
movq $.L526, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1)))
movq 0(%rsp), %rcx
movq %rax, 912(%rcx)
# Done (SET! ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1))))
# (SET! HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME)) (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME))))
# (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME)) (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME)))
movq 0(%rsp), %rax
movq $.L534, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME)) (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME)))
movq 0(%rsp), %rcx
movq %rax, 904(%rcx)
# Done (SET! HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME)) (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME))))
# (DEFINE APPLY (LAMBDA (FUNC ARG1 . ARGS) (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))) (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))) (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))) (SET! ARGS (CONS ARG1 ARGS)) (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))) (FILL-ARGS-VECTOR ARGS ARGS-VEC 1) (APPLY-FRAME FUNC ARGS-VEC)))
# (LAMBDA (FUNC ARG1 . ARGS) (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))) (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))) (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))) (SET! ARGS (CONS ARG1 ARGS)) (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))) (FILL-ARGS-VECTOR ARGS ARGS-VEC 1) (APPLY-FRAME FUNC ARGS-VEC))
movq 0(%rsp), %rax
movq $.L560, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FUNC ARG1 . ARGS) (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))) (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))) (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))) (SET! ARGS (CONS ARG1 ARGS)) (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))) (FILL-ARGS-VECTOR ARGS ARGS-VEC 1) (APPLY-FRAME FUNC ARGS-VEC))
movq 0(%rsp), %rcx
movq %rax, 224(%rcx)
# Done (DEFINE APPLY (LAMBDA (FUNC ARG1 . ARGS) (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))) (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))) (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))) (SET! ARGS (CONS ARG1 ARGS)) (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))) (FILL-ARGS-VECTOR ARGS ARGS-VEC 1) (APPLY-FRAME FUNC ARGS-VEC)))
# Done (DEFINITIONS (SET! ARITY-MISMATCH (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (ERROR "expected ~S arguments, got ~S" (- PARAM-FRAME-LENGTH 1) (- (VECTOR-LENGTH ARG-FRAME) 1)))) (SET! HANDLE-VARARGS (LAMBDA (ARG-FRAME PARAM-FRAME-LENGTH) (DEFINE ARG-FRAME-LENGTH (VECTOR-LENGTH ARG-FRAME)) (IF (< ARG-FRAME-LENGTH PARAM-FRAME-LENGTH) (BEGIN (IF (/= (- PARAM-FRAME-LENGTH 1) ARG-FRAME-LENGTH) (BEGIN (ERROR "expected ~S arguments or more, got ~S" (- PARAM-FRAME-LENGTH 2) (- ARG-FRAME-LENGTH 1)))) (DEFINE NEW-ARG-FRAME (MAKE-VECTOR PARAM-FRAME-LENGTH)) (VECTOR-COPY ARG-FRAME 0 NEW-ARG-FRAME 0 ARG-FRAME-LENGTH) (VECTOR-SET! NEW-ARG-FRAME ARG-FRAME-LENGTH NIL) NEW-ARG-FRAME) (BEGIN (DEFINE CONS-VARARGS (LAMBDA (POS) (IF (>= POS (VECTOR-LENGTH ARG-FRAME)) NIL (CONS (VECTOR-REF ARG-FRAME POS) (CONS-VARARGS (+ POS 1)))))) (DEFINE LAST-PARAM-SLOT (- PARAM-FRAME-LENGTH 1)) (VECTOR-SET! ARG-FRAME LAST-PARAM-SLOT (CONS-VARARGS LAST-PARAM-SLOT)) ARG-FRAME)))) (DEFINE APPLY (LAMBDA (FUNC ARG1 . ARGS) (DEFINE ARGS-LENGTH (LAMBDA (ARGS) (IF (NULL? (CDR ARGS)) (LENGTH (CAR ARGS)) (+ (ARGS-LENGTH (CDR ARGS)) 1)))) (DEFINE COPY-LIST-TO-VECTOR (LAMBDA (L VEC INDEX) (IF (IF (NULL? L) FALSE TRUE) (BEGIN (VECTOR-SET! VEC INDEX (CAR L)) (COPY-LIST-TO-VECTOR (CDR L) VEC (+ INDEX 1)))))) (DEFINE FILL-ARGS-VECTOR (LAMBDA (ARGS VEC INDEX) (IF (NULL? (CDR ARGS)) (COPY-LIST-TO-VECTOR (CAR ARGS) VEC INDEX) (BEGIN (VECTOR-SET! VEC INDEX (CAR ARGS)) (FILL-ARGS-VECTOR (CDR ARGS) VEC (+ INDEX 1)))))) (SET! ARGS (CONS ARG1 ARGS)) (DEFINE ARGS-VEC (MAKE-VECTOR (+ (ARGS-LENGTH ARGS) 1))) (FILL-ARGS-VECTOR ARGS ARGS-VEC 1) (APPLY-FRAME FUNC ARGS-VEC))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE MAKE-BUFFER (LAMBDA NIL (BEGIN (DEFINE BUF (CONS NIL NIL)) (CONS BUF BUF))))
# (LAMBDA NIL (BEGIN (DEFINE BUF (CONS NIL NIL)) (CONS BUF BUF)))
movq 0(%rsp), %rax
movq $.L562, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (BEGIN (DEFINE BUF (CONS NIL NIL)) (CONS BUF BUF)))
movq 0(%rsp), %rcx
movq %rax, 216(%rcx)
# Done (DEFINE MAKE-BUFFER (LAMBDA NIL (BEGIN (DEFINE BUF (CONS NIL NIL)) (CONS BUF BUF))))
# (DEFINE BUFFER-ADD (LAMBDA (BUF EL) (BEGIN (DEFINE NEWTAIL (CONS EL NIL)) (RPLACD (CDR BUF) NEWTAIL) (RPLACD BUF NEWTAIL))))
# (LAMBDA (BUF EL) (BEGIN (DEFINE NEWTAIL (CONS EL NIL)) (RPLACD (CDR BUF) NEWTAIL) (RPLACD BUF NEWTAIL)))
movq 0(%rsp), %rax
movq $.L564, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (BUF EL) (BEGIN (DEFINE NEWTAIL (CONS EL NIL)) (RPLACD (CDR BUF) NEWTAIL) (RPLACD BUF NEWTAIL)))
movq 0(%rsp), %rcx
movq %rax, 208(%rcx)
# Done (DEFINE BUFFER-ADD (LAMBDA (BUF EL) (BEGIN (DEFINE NEWTAIL (CONS EL NIL)) (RPLACD (CDR BUF) NEWTAIL) (RPLACD BUF NEWTAIL))))
# (DEFINE BUFFER-CONCAT (LAMBDA (BUF1 BUF2) (RPLACD (CDR BUF1) (CDR (CAR BUF2))) (RPLACD BUF1 (CDR BUF2))))
# (LAMBDA (BUF1 BUF2) (RPLACD (CDR BUF1) (CDR (CAR BUF2))) (RPLACD BUF1 (CDR BUF2)))
movq 0(%rsp), %rax
movq $.L566, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (BUF1 BUF2) (RPLACD (CDR BUF1) (CDR (CAR BUF2))) (RPLACD BUF1 (CDR BUF2)))
movq 0(%rsp), %rcx
movq %rax, 200(%rcx)
# Done (DEFINE BUFFER-CONCAT (LAMBDA (BUF1 BUF2) (RPLACD (CDR BUF1) (CDR (CAR BUF2))) (RPLACD BUF1 (CDR BUF2))))
# (DEFINE BUFFER-LIST (LAMBDA (BUF) (CDR (CAR BUF))))
# (LAMBDA (BUF) (CDR (CAR BUF)))
movq 0(%rsp), %rax
movq $.L568, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (BUF) (CDR (CAR BUF)))
movq 0(%rsp), %rcx
movq %rax, 192(%rcx)
# Done (DEFINE BUFFER-LIST (LAMBDA (BUF) (CDR (CAR BUF))))
# (DEFINE LASSOC (LAMBDA (ITEM LALIST) (IF (NULL? LALIST) FALSE (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST)))))))
# (LAMBDA (ITEM LALIST) (IF (NULL? LALIST) FALSE (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST))))))
movq 0(%rsp), %rax
movq $.L570, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ITEM LALIST) (IF (NULL? LALIST) FALSE (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST))))))
movq 0(%rsp), %rcx
movq %rax, 184(%rcx)
# Done (DEFINE LASSOC (LAMBDA (ITEM LALIST) (IF (NULL? LALIST) FALSE (BEGIN (DEFINE #:G1567 (ASSOC ITEM (CAR LALIST))) (IF #:G1567 #:G1567 (LASSOC ITEM (CDR LALIST)))))))
# (DEFINE LAPUSH (LAMBDA (KEY VAL LALIST) (RPLACA LALIST (CONS (CONS KEY VAL) (CAR LALIST)))))
# (LAMBDA (KEY VAL LALIST) (RPLACA LALIST (CONS (CONS KEY VAL) (CAR LALIST))))
movq 0(%rsp), %rax
movq $.L578, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (KEY VAL LALIST) (RPLACA LALIST (CONS (CONS KEY VAL) (CAR LALIST))))
movq 0(%rsp), %rcx
movq %rax, 176(%rcx)
# Done (DEFINE LAPUSH (LAMBDA (KEY VAL LALIST) (RPLACA LALIST (CONS (CONS KEY VAL) (CAR LALIST)))))
# (DEFINE INTERPRETER-BUILTIN-FORMS NIL)
# NIL
movq $31, %rax
# Done NIL
movq 0(%rsp), %rcx
movq %rax, 168(%rcx)
# Done (DEFINE INTERPRETER-BUILTIN-FORMS NIL)
# (DEFINE INTERPRETER-BUILTIN-BODY-FORMS NIL)
# NIL
movq $31, %rax
# Done NIL
movq 0(%rsp), %rcx
movq %rax, 160(%rcx)
# Done (DEFINE INTERPRETER-BUILTIN-BODY-FORMS NIL)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE MAKE-INITIAL-INTERPRETER-ENV (LAMBDA NIL (LIST NIL)))
# (LAMBDA NIL (LIST NIL))
movq 0(%rsp), %rax
movq $.L580, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (LIST NIL))
movq 0(%rsp), %rcx
movq %rax, 152(%rcx)
# Done (DEFINE MAKE-INITIAL-INTERPRETER-ENV (LAMBDA NIL (LIST NIL)))
# (DEFINE EVAL-FORM-AUX (LAMBDA (FORM ENV BUILTIN-FORMS) (IF (PAIR? FORM) (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))) (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN))))))
# (LAMBDA (FORM ENV BUILTIN-FORMS) (IF (PAIR? FORM) (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))) (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN)))))
movq 0(%rsp), %rax
movq $.L583, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM ENV BUILTIN-FORMS) (IF (PAIR? FORM) (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))) (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN)))))
movq 0(%rsp), %rcx
movq %rax, 144(%rcx)
# Done (DEFINE EVAL-FORM-AUX (LAMBDA (FORM ENV BUILTIN-FORMS) (IF (PAIR? FORM) (BEGIN (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE ARGS (CDR FORM)) (DEFINE BUILTIN (IF (SYMBOL? KEYWORD) (ASSOC KEYWORD BUILTIN-FORMS) FALSE)) (IF BUILTIN ((CDR BUILTIN) KEYWORD ARGS ENV) (EVAL-CALL FORM ENV)))) (IF (SYMBOL? FORM) (BEGIN (BEGIN (DEFINE VAR (LASSOC FORM ENV)) (IF VAR (CDR VAR) (ERROR "unbound variable ~S" FORM)))) (IF TRUE (BEGIN FORM) (BEGIN))))))
# (DEFINE EVAL-FORM (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-FORMS)))
# (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-FORMS))
movq 0(%rsp), %rax
movq $.L605, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-FORMS))
movq 0(%rsp), %rcx
movq %rax, 136(%rcx)
# Done (DEFINE EVAL-FORM (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-FORMS)))
# (DEFINE EVAL-BODY-FORM (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-BODY-FORMS)))
# (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-BODY-FORMS))
movq 0(%rsp), %rax
movq $.L607, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-BODY-FORMS))
movq 0(%rsp), %rcx
movq %rax, 128(%rcx)
# Done (DEFINE EVAL-BODY-FORM (LAMBDA (FORM ENV) (EVAL-FORM-AUX FORM ENV INTERPRETER-BUILTIN-BODY-FORMS)))
# (DEFINE EVAL-BODY (LAMBDA (FORMS ENV) (BEGIN (DEFINE RESULT UNSPECIFIED) (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))) RESULT)))
# (LAMBDA (FORMS ENV) (BEGIN (DEFINE RESULT UNSPECIFIED) (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))) RESULT))
movq 0(%rsp), %rax
movq $.L617, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORMS ENV) (BEGIN (DEFINE RESULT UNSPECIFIED) (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))) RESULT))
movq 0(%rsp), %rcx
movq %rax, 120(%rcx)
# Done (DEFINE EVAL-BODY (LAMBDA (FORMS ENV) (BEGIN (DEFINE RESULT UNSPECIFIED) (BEGIN (DEFINE #:G1570 FORMS) (BEGIN (DEFINE #:G1571 (LAMBDA NIL (IF (IF (NULL? #:G1570) FALSE TRUE) (BEGIN (BEGIN (DEFINE FORM (CAR #:G1570)) (SET! RESULT (EVAL-BODY-FORM FORM ENV))) (SET! #:G1570 (CDR #:G1570)) (#:G1571))))) (#:G1571))) RESULT)))
# (DEFINE MAKE-LAMBDA-ALIST (LAMBDA (FORMALS ACTUALS) (IF (NULL? FORMALS) (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))) (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN))))))
# (LAMBDA (FORMALS ACTUALS) (IF (NULL? FORMALS) (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))) (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN)))))
movq 0(%rsp), %rax
movq $.L621, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORMALS ACTUALS) (IF (NULL? FORMALS) (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))) (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN)))))
movq 0(%rsp), %rcx
movq %rax, 112(%rcx)
# Done (DEFINE MAKE-LAMBDA-ALIST (LAMBDA (FORMALS ACTUALS) (IF (NULL? FORMALS) (BEGIN (IF (NULL? ACTUALS) NIL (ERROR "surplus arguments ~S" ACTUALS))) (IF (SYMBOL? FORMALS) (BEGIN (ACONS FORMALS ACTUALS NIL)) (IF TRUE (BEGIN (IF (NULL? ACTUALS) (ERROR "insufficient arguments") (ACONS (CAR FORMALS) (CAR ACTUALS) (MAKE-LAMBDA-ALIST (CDR FORMALS) (CDR ACTUALS))))) (BEGIN))))))
# (BEGIN (DEFINE A (CONS (QUOTE LAMBDA) (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE LAMBDA) (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV))))))
# (CONS (QUOTE LAMBDA) (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)))))
# (QUOTE LAMBDA)
movq $.L639+7, %rax
# Done (QUOTE LAMBDA)
# (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV))))
movq 0(%rsp), %rcx
movq $.L643, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV))))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE LAMBDA) (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE LAMBDA) (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV))))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE LAMBDA) (LAMBDA (KEYWORD ARGS ENV) (LAMBDA (ACTUALS) (EVAL-BODY (CDR ARGS) (CONS (MAKE-LAMBDA-ALIST (CAR ARGS) ACTUALS) ENV)))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (DEFINE EVAL-CALL (LAMBDA (FORM ENV) (BEGIN (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))) ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS)))))
# (LAMBDA (FORM ENV) (BEGIN (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))) ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS))))
movq 0(%rsp), %rax
movq $.L655, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM ENV) (BEGIN (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))) ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS))))
movq 0(%rsp), %rcx
movq %rax, 104(%rcx)
# Done (DEFINE EVAL-CALL (LAMBDA (FORM ENV) (BEGIN (DEFINE EVALED-SUBFORMS (BEGIN (DEFINE #:G1579 FORM) (IF (NULL? #:G1579) NIL (BEGIN (DEFINE #:G1577 (LAMBDA (SUBFORM) (EVAL-FORM SUBFORM ENV))) (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (DEFINE #:G1581 #:G1580) (DEFINE #:G1578 (LAMBDA (#:G1579) (IF (IF (NULL? #:G1579) FALSE TRUE) (BEGIN (DEFINE #:G1580 (CONS (#:G1577 (CAR #:G1579)) NIL)) (RPLACD #:G1581 #:G1580) (SET! #:G1581 #:G1580) (#:G1578 (CDR #:G1579)))))) (#:G1578 (CDR #:G1579)) #:G1580)))) ((CAR EVALED-SUBFORMS) (CDR EVALED-SUBFORMS)))))
# (BEGIN (DEFINE A (CONS (QUOTE BEGIN) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE BEGIN) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV)))))
# (CONS (QUOTE BEGIN) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV))))
# (QUOTE BEGIN)
movq $.L660+7, %rax
# Done (QUOTE BEGIN)
# (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV)))
movq 0(%rsp), %rcx
movq $.L662, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE BEGIN) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE BEGIN) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE BEGIN) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS (CONS NIL ENV))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE DEFINITIONS) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV)))) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE DEFINITIONS) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV))))
# (CONS (QUOTE DEFINITIONS) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV)))
# (QUOTE DEFINITIONS)
movq $.L664+7, %rax
# Done (QUOTE DEFINITIONS)
# (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV))
movq 0(%rsp), %rcx
movq $.L666, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE DEFINITIONS) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE DEFINITIONS) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV))))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE DEFINITIONS) (LAMBDA (KEYWORD ARGS ENV) (EVAL-BODY ARGS ENV)))) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE DEFINE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL)))) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE DEFINE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL))))
# (CONS (QUOTE DEFINE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL)))
# (QUOTE DEFINE)
movq $.L668+7, %rax
# Done (QUOTE DEFINE)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL))
movq 0(%rsp), %rcx
movq $.L672, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE DEFINE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE DEFINE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL))))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE DEFINE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAR (CAR ARGS)) (DEFINE VAL (IF (NULL? (CDR ARGS)) UNSPECIFIED (EVAL-FORM (CAR (CDR ARGS)) ENV))) (IF (IF (SYMBOL? VAR) FALSE TRUE) (BEGIN (ERROR "bad variable name ~S" VAR))) (IF (ASSOC VAR (CAR ENV)) (BEGIN (ERROR "variable ~S already bound" VAR))) (LAPUSH VAR VAL ENV) VAL)))) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL)))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL))))
# (CONS (QUOTE SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL)))
# (QUOTE SET!)
movq $.L687+7, %rax
# Done (QUOTE SET!)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL))
movq 0(%rsp), %rcx
movq $.L690, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE VAL (EVAL-FORM (CAR (CDR ARGS)) ENV)) (DEFINE VAR (LASSOC (CAR ARGS) ENV)) (IF VAR (RPLACD VAR VAL) (ERROR "unbound variable ~S" (CAR ARGS))) VAL)))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE IF) (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE IF) (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV))))))
# (CONS (QUOTE IF) (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)))))
# (QUOTE IF)
movq $.L695+7, %rax
# Done (QUOTE IF)
# (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV))))
movq 0(%rsp), %rcx
movq $.L697, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV))))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE IF) (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE IF) (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV))))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE IF) (LAMBDA (KEYWORD ARGS ENV) (IF (EVAL-FORM (CAR ARGS) ENV) (EVAL-FORM (CAR (CDR ARGS)) ENV) (IF (NULL? (CDR (CDR ARGS))) (QUOTE UNSPECIFIED) (EVAL-FORM (CAR (CDR (CDR ARGS))) ENV)))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE QUOTE) (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS)))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE QUOTE) (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS))))
# (CONS (QUOTE QUOTE) (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS)))
# (QUOTE QUOTE)
movq $.L26+7, %rax
# Done (QUOTE QUOTE)
# (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS))
movq 0(%rsp), %rcx
movq $.L705, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE QUOTE) (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS)))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE QUOTE) (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE QUOTE) (LAMBDA (KEYWORD ARGS ENV) (CAR ARGS)))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINITIONS)
# Done (DEFINITIONS)
# (BEGIN (DEFINE A (CONS (QUOTE ERROR-HALT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE ERROR-HALT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS)))))
# (CONS (QUOTE ERROR-HALT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS))))
# (QUOTE ERROR-HALT)
movq $.L707+7, %rax
# Done (QUOTE ERROR-HALT)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L719, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE ERROR-HALT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE ERROR-HALT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE ERROR-HALT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1589 ARGS) (IF (NULL? #:G1589) NIL (BEGIN (DEFINE #:G1587 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (DEFINE #:G1591 #:G1590) (DEFINE #:G1588 (LAMBDA (#:G1589) (IF (IF (NULL? #:G1589) FALSE TRUE) (BEGIN (DEFINE #:G1590 (CONS (#:G1587 (CAR #:G1589)) NIL)) (RPLACD #:G1591 #:G1590) (SET! #:G1591 #:G1590) (#:G1588 (CDR #:G1589)))))) (#:G1588 (CDR #:G1589)) #:G1590)))) (APPLY ERROR-HALT EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE EQ?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE EQ?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE EQ?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE EQ?)
movq $.L724+7, %rax
# Done (QUOTE EQ?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L736, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE EQ?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE EQ?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE EQ?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY EQ? (BEGIN (DEFINE #:G1599 ARGS) (IF (NULL? #:G1599) NIL (BEGIN (DEFINE #:G1597 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (DEFINE #:G1601 #:G1600) (DEFINE #:G1598 (LAMBDA (#:G1599) (IF (IF (NULL? #:G1599) FALSE TRUE) (BEGIN (DEFINE #:G1600 (CONS (#:G1597 (CAR #:G1599)) NIL)) (RPLACD #:G1601 #:G1600) (SET! #:G1601 #:G1600) (#:G1598 (CDR #:G1599)))))) (#:G1598 (CDR #:G1599)) #:G1600)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE FUNCTION?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE FUNCTION?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE FUNCTION?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE FUNCTION?)
movq $.L744+7, %rax
# Done (QUOTE FUNCTION?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L756, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE FUNCTION?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE FUNCTION?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE FUNCTION?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY FUNCTION? (BEGIN (DEFINE #:G1609 ARGS) (IF (NULL? #:G1609) NIL (BEGIN (DEFINE #:G1607 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (DEFINE #:G1611 #:G1610) (DEFINE #:G1608 (LAMBDA (#:G1609) (IF (IF (NULL? #:G1609) FALSE TRUE) (BEGIN (DEFINE #:G1610 (CONS (#:G1607 (CAR #:G1609)) NIL)) (RPLACD #:G1611 #:G1610) (SET! #:G1611 #:G1610) (#:G1608 (CDR #:G1609)))))) (#:G1608 (CDR #:G1609)) #:G1610)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE SYMBOL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE SYMBOL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE SYMBOL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE SYMBOL?)
movq $.L764+7, %rax
# Done (QUOTE SYMBOL?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L776, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE SYMBOL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE SYMBOL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE SYMBOL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY SYMBOL? (BEGIN (DEFINE #:G1619 ARGS) (IF (NULL? #:G1619) NIL (BEGIN (DEFINE #:G1617 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (DEFINE #:G1621 #:G1620) (DEFINE #:G1618 (LAMBDA (#:G1619) (IF (IF (NULL? #:G1619) FALSE TRUE) (BEGIN (DEFINE #:G1620 (CONS (#:G1617 (CAR #:G1619)) NIL)) (RPLACD #:G1621 #:G1620) (SET! #:G1621 #:G1620) (#:G1618 (CDR #:G1619)))))) (#:G1618 (CDR #:G1619)) #:G1620)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE GENSYM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE GENSYM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS)))))
# (CONS (QUOTE GENSYM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS))))
# (QUOTE GENSYM)
movq $.L784+7, %rax
# Done (QUOTE GENSYM)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L796, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE GENSYM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE GENSYM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE GENSYM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1629 ARGS) (IF (NULL? #:G1629) NIL (BEGIN (DEFINE #:G1627 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (DEFINE #:G1631 #:G1630) (DEFINE #:G1628 (LAMBDA (#:G1629) (IF (IF (NULL? #:G1629) FALSE TRUE) (BEGIN (DEFINE #:G1630 (CONS (#:G1627 (CAR #:G1629)) NIL)) (RPLACD #:G1631 #:G1630) (SET! #:G1631 #:G1630) (#:G1628 (CDR #:G1629)))))) (#:G1628 (CDR #:G1629)) #:G1630)))) (APPLY GENSYM EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE SYMBOL-NAME) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE SYMBOL-NAME) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS)))))
# (CONS (QUOTE SYMBOL-NAME) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS))))
# (QUOTE SYMBOL-NAME)
movq $.L801+7, %rax
# Done (QUOTE SYMBOL-NAME)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L816, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE SYMBOL-NAME) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE SYMBOL-NAME) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE SYMBOL-NAME) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1639 ARGS) (IF (NULL? #:G1639) NIL (BEGIN (DEFINE #:G1637 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (DEFINE #:G1641 #:G1640) (DEFINE #:G1638 (LAMBDA (#:G1639) (IF (IF (NULL? #:G1639) FALSE TRUE) (BEGIN (DEFINE #:G1640 (CONS (#:G1637 (CAR #:G1639)) NIL)) (RPLACD #:G1641 #:G1640) (SET! #:G1641 #:G1640) (#:G1638 (CDR #:G1639)))))) (#:G1638 (CDR #:G1639)) #:G1640)))) (APPLY (LAMBDA (SYM) "sym") EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE INTERN) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE INTERN) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS)))))
# (CONS (QUOTE INTERN) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS))))
# (QUOTE INTERN)
movq $.L821+7, %rax
# Done (QUOTE INTERN)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L835, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE INTERN) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE INTERN) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE INTERN) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1649 ARGS) (IF (NULL? #:G1649) NIL (BEGIN (DEFINE #:G1647 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (DEFINE #:G1651 #:G1650) (DEFINE #:G1648 (LAMBDA (#:G1649) (IF (IF (NULL? #:G1649) FALSE TRUE) (BEGIN (DEFINE #:G1650 (CONS (#:G1647 (CAR #:G1649)) NIL)) (RPLACD #:G1651 #:G1650) (SET! #:G1651 #:G1650) (#:G1648 (CDR #:G1649)))))) (#:G1648 (CDR #:G1649)) #:G1650)))) (APPLY (LAMBDA (STR) STR) EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE PAIR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE PAIR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE PAIR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE PAIR?)
movq $.L840+7, %rax
# Done (QUOTE PAIR?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L852, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE PAIR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE PAIR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE PAIR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY PAIR? (BEGIN (DEFINE #:G1659 ARGS) (IF (NULL? #:G1659) NIL (BEGIN (DEFINE #:G1657 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (DEFINE #:G1661 #:G1660) (DEFINE #:G1658 (LAMBDA (#:G1659) (IF (IF (NULL? #:G1659) FALSE TRUE) (BEGIN (DEFINE #:G1660 (CONS (#:G1657 (CAR #:G1659)) NIL)) (RPLACD #:G1661 #:G1660) (SET! #:G1661 #:G1660) (#:G1658 (CDR #:G1659)))))) (#:G1658 (CDR #:G1659)) #:G1660)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE NULL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE NULL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE NULL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE NULL?)
movq $.L860+7, %rax
# Done (QUOTE NULL?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L872, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE NULL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE NULL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE NULL?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NULL? (BEGIN (DEFINE #:G1669 ARGS) (IF (NULL? #:G1669) NIL (BEGIN (DEFINE #:G1667 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (DEFINE #:G1671 #:G1670) (DEFINE #:G1668 (LAMBDA (#:G1669) (IF (IF (NULL? #:G1669) FALSE TRUE) (BEGIN (DEFINE #:G1670 (CONS (#:G1667 (CAR #:G1669)) NIL)) (RPLACD #:G1671 #:G1670) (SET! #:G1671 #:G1670) (#:G1668 (CDR #:G1669)))))) (#:G1668 (CDR #:G1669)) #:G1670)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE CAR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE CAR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS)))))
# (CONS (QUOTE CAR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS))))
# (QUOTE CAR)
movq $.L880+7, %rax
# Done (QUOTE CAR)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L892, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE CAR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE CAR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE CAR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1679 ARGS) (IF (NULL? #:G1679) NIL (BEGIN (DEFINE #:G1677 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (DEFINE #:G1681 #:G1680) (DEFINE #:G1678 (LAMBDA (#:G1679) (IF (IF (NULL? #:G1679) FALSE TRUE) (BEGIN (DEFINE #:G1680 (CONS (#:G1677 (CAR #:G1679)) NIL)) (RPLACD #:G1681 #:G1680) (SET! #:G1681 #:G1680) (#:G1678 (CDR #:G1679)))))) (#:G1678 (CDR #:G1679)) #:G1680)))) (APPLY CAR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE CDR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE CDR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS)))))
# (CONS (QUOTE CDR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS))))
# (QUOTE CDR)
movq $.L897+7, %rax
# Done (QUOTE CDR)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L909, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE CDR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE CDR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE CDR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1689 ARGS) (IF (NULL? #:G1689) NIL (BEGIN (DEFINE #:G1687 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (DEFINE #:G1691 #:G1690) (DEFINE #:G1688 (LAMBDA (#:G1689) (IF (IF (NULL? #:G1689) FALSE TRUE) (BEGIN (DEFINE #:G1690 (CONS (#:G1687 (CAR #:G1689)) NIL)) (RPLACD #:G1691 #:G1690) (SET! #:G1691 #:G1690) (#:G1688 (CDR #:G1689)))))) (#:G1688 (CDR #:G1689)) #:G1690)))) (APPLY CDR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE CONS) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE CONS) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS)))))
# (CONS (QUOTE CONS) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS))))
# (QUOTE CONS)
movq $.L24+7, %rax
# Done (QUOTE CONS)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L924, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE CONS) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE CONS) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE CONS) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1699 ARGS) (IF (NULL? #:G1699) NIL (BEGIN (DEFINE #:G1697 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (DEFINE #:G1701 #:G1700) (DEFINE #:G1698 (LAMBDA (#:G1699) (IF (IF (NULL? #:G1699) FALSE TRUE) (BEGIN (DEFINE #:G1700 (CONS (#:G1697 (CAR #:G1699)) NIL)) (RPLACD #:G1701 #:G1700) (SET! #:G1701 #:G1700) (#:G1698 (CDR #:G1699)))))) (#:G1698 (CDR #:G1699)) #:G1700)))) (APPLY CONS EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE RPLACA) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE RPLACA) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS)))))
# (CONS (QUOTE RPLACA) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS))))
# (QUOTE RPLACA)
movq $.L929+7, %rax
# Done (QUOTE RPLACA)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L941, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE RPLACA) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE RPLACA) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE RPLACA) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1709 ARGS) (IF (NULL? #:G1709) NIL (BEGIN (DEFINE #:G1707 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (DEFINE #:G1711 #:G1710) (DEFINE #:G1708 (LAMBDA (#:G1709) (IF (IF (NULL? #:G1709) FALSE TRUE) (BEGIN (DEFINE #:G1710 (CONS (#:G1707 (CAR #:G1709)) NIL)) (RPLACD #:G1711 #:G1710) (SET! #:G1711 #:G1710) (#:G1708 (CDR #:G1709)))))) (#:G1708 (CDR #:G1709)) #:G1710)))) (APPLY RPLACA EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE RPLACD) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE RPLACD) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS)))))
# (CONS (QUOTE RPLACD) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS))))
# (QUOTE RPLACD)
movq $.L946+7, %rax
# Done (QUOTE RPLACD)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L958, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE RPLACD) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE RPLACD) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE RPLACD) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1719 ARGS) (IF (NULL? #:G1719) NIL (BEGIN (DEFINE #:G1717 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (DEFINE #:G1721 #:G1720) (DEFINE #:G1718 (LAMBDA (#:G1719) (IF (IF (NULL? #:G1719) FALSE TRUE) (BEGIN (DEFINE #:G1720 (CONS (#:G1717 (CAR #:G1719)) NIL)) (RPLACD #:G1721 #:G1720) (SET! #:G1721 #:G1720) (#:G1718 (CDR #:G1719)))))) (#:G1718 (CDR #:G1719)) #:G1720)))) (APPLY RPLACD EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE NUMBER?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE NUMBER?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE NUMBER?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE NUMBER?)
movq $.L963+7, %rax
# Done (QUOTE NUMBER?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L975, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE NUMBER?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE NUMBER?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE NUMBER?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY NUMBER? (BEGIN (DEFINE #:G1729 ARGS) (IF (NULL? #:G1729) NIL (BEGIN (DEFINE #:G1727 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (DEFINE #:G1731 #:G1730) (DEFINE #:G1728 (LAMBDA (#:G1729) (IF (IF (NULL? #:G1729) FALSE TRUE) (BEGIN (DEFINE #:G1730 (CONS (#:G1727 (CAR #:G1729)) NIL)) (RPLACD #:G1731 #:G1730) (SET! #:G1731 #:G1730) (#:G1728 (CDR #:G1729)))))) (#:G1728 (CDR #:G1729)) #:G1730)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE <) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE <) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE <) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE <)
movq $.L983+7, %rax
# Done (QUOTE <)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L995, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE <) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE <) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE <) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY < (BEGIN (DEFINE #:G1739 ARGS) (IF (NULL? #:G1739) NIL (BEGIN (DEFINE #:G1737 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (DEFINE #:G1741 #:G1740) (DEFINE #:G1738 (LAMBDA (#:G1739) (IF (IF (NULL? #:G1739) FALSE TRUE) (BEGIN (DEFINE #:G1740 (CONS (#:G1737 (CAR #:G1739)) NIL)) (RPLACD #:G1741 #:G1740) (SET! #:G1741 #:G1740) (#:G1738 (CDR #:G1739)))))) (#:G1738 (CDR #:G1739)) #:G1740)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE <=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE <=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE <=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE <=)
movq $.L1003+7, %rax
# Done (QUOTE <=)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1015, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE <=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE <=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE <=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY <= (BEGIN (DEFINE #:G1749 ARGS) (IF (NULL? #:G1749) NIL (BEGIN (DEFINE #:G1747 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (DEFINE #:G1751 #:G1750) (DEFINE #:G1748 (LAMBDA (#:G1749) (IF (IF (NULL? #:G1749) FALSE TRUE) (BEGIN (DEFINE #:G1750 (CONS (#:G1747 (CAR #:G1749)) NIL)) (RPLACD #:G1751 #:G1750) (SET! #:G1751 #:G1750) (#:G1748 (CDR #:G1749)))))) (#:G1748 (CDR #:G1749)) #:G1750)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE >) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE >) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE >) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE >)
movq $.L1023+7, %rax
# Done (QUOTE >)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1035, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE >) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE >) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE >) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY > (BEGIN (DEFINE #:G1759 ARGS) (IF (NULL? #:G1759) NIL (BEGIN (DEFINE #:G1757 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (DEFINE #:G1761 #:G1760) (DEFINE #:G1758 (LAMBDA (#:G1759) (IF (IF (NULL? #:G1759) FALSE TRUE) (BEGIN (DEFINE #:G1760 (CONS (#:G1757 (CAR #:G1759)) NIL)) (RPLACD #:G1761 #:G1760) (SET! #:G1761 #:G1760) (#:G1758 (CDR #:G1759)))))) (#:G1758 (CDR #:G1759)) #:G1760)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE >=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE >=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE >=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE >=)
movq $.L1043+7, %rax
# Done (QUOTE >=)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1055, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE >=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE >=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE >=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY >= (BEGIN (DEFINE #:G1769 ARGS) (IF (NULL? #:G1769) NIL (BEGIN (DEFINE #:G1767 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (DEFINE #:G1771 #:G1770) (DEFINE #:G1768 (LAMBDA (#:G1769) (IF (IF (NULL? #:G1769) FALSE TRUE) (BEGIN (DEFINE #:G1770 (CONS (#:G1767 (CAR #:G1769)) NIL)) (RPLACD #:G1771 #:G1770) (SET! #:G1771 #:G1770) (#:G1768 (CDR #:G1769)))))) (#:G1768 (CDR #:G1769)) #:G1770)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE =) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE =) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE =) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE =)
movq $.L1063+7, %rax
# Done (QUOTE =)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1075, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE =) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE =) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE =) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY = (BEGIN (DEFINE #:G1779 ARGS) (IF (NULL? #:G1779) NIL (BEGIN (DEFINE #:G1777 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (DEFINE #:G1781 #:G1780) (DEFINE #:G1778 (LAMBDA (#:G1779) (IF (IF (NULL? #:G1779) FALSE TRUE) (BEGIN (DEFINE #:G1780 (CONS (#:G1777 (CAR #:G1779)) NIL)) (RPLACD #:G1781 #:G1780) (SET! #:G1781 #:G1780) (#:G1778 (CDR #:G1779)))))) (#:G1778 (CDR #:G1779)) #:G1780)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE /=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE /=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE /=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE /=)
movq $.L1083+7, %rax
# Done (QUOTE /=)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1095, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE /=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE /=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE /=) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY /= (BEGIN (DEFINE #:G1789 ARGS) (IF (NULL? #:G1789) NIL (BEGIN (DEFINE #:G1787 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (DEFINE #:G1791 #:G1790) (DEFINE #:G1788 (LAMBDA (#:G1789) (IF (IF (NULL? #:G1789) FALSE TRUE) (BEGIN (DEFINE #:G1790 (CONS (#:G1787 (CAR #:G1789)) NIL)) (RPLACD #:G1791 #:G1790) (SET! #:G1791 #:G1790) (#:G1788 (CDR #:G1789)))))) (#:G1788 (CDR #:G1789)) #:G1790)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE +) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE +) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS)))))
# (CONS (QUOTE +) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS))))
# (QUOTE +)
movq $.L1103+7, %rax
# Done (QUOTE +)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1115, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE +) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE +) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE +) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1799 ARGS) (IF (NULL? #:G1799) NIL (BEGIN (DEFINE #:G1797 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (DEFINE #:G1801 #:G1800) (DEFINE #:G1798 (LAMBDA (#:G1799) (IF (IF (NULL? #:G1799) FALSE TRUE) (BEGIN (DEFINE #:G1800 (CONS (#:G1797 (CAR #:G1799)) NIL)) (RPLACD #:G1801 #:G1800) (SET! #:G1801 #:G1800) (#:G1798 (CDR #:G1799)))))) (#:G1798 (CDR #:G1799)) #:G1800)))) (APPLY + EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE -) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE -) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS)))))
# (CONS (QUOTE -) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS))))
# (QUOTE -)
movq $.L1120+7, %rax
# Done (QUOTE -)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1132, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE -) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE -) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE -) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1809 ARGS) (IF (NULL? #:G1809) NIL (BEGIN (DEFINE #:G1807 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (DEFINE #:G1811 #:G1810) (DEFINE #:G1808 (LAMBDA (#:G1809) (IF (IF (NULL? #:G1809) FALSE TRUE) (BEGIN (DEFINE #:G1810 (CONS (#:G1807 (CAR #:G1809)) NIL)) (RPLACD #:G1811 #:G1810) (SET! #:G1811 #:G1810) (#:G1808 (CDR #:G1809)))))) (#:G1808 (CDR #:G1809)) #:G1810)))) (APPLY - EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE *) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE *) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS)))))
# (CONS (QUOTE *) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS))))
# (QUOTE *)
movq $.L1137+7, %rax
# Done (QUOTE *)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1149, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE *) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE *) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE *) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1819 ARGS) (IF (NULL? #:G1819) NIL (BEGIN (DEFINE #:G1817 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (DEFINE #:G1821 #:G1820) (DEFINE #:G1818 (LAMBDA (#:G1819) (IF (IF (NULL? #:G1819) FALSE TRUE) (BEGIN (DEFINE #:G1820 (CONS (#:G1817 (CAR #:G1819)) NIL)) (RPLACD #:G1821 #:G1820) (SET! #:G1821 #:G1820) (#:G1818 (CDR #:G1819)))))) (#:G1818 (CDR #:G1819)) #:G1820)))) (APPLY * EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE REM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE REM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS)))))
# (CONS (QUOTE REM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS))))
# (QUOTE REM)
movq $.L1154+7, %rax
# Done (QUOTE REM)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1166, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE REM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE REM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE REM) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1829 ARGS) (IF (NULL? #:G1829) NIL (BEGIN (DEFINE #:G1827 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (DEFINE #:G1831 #:G1830) (DEFINE #:G1828 (LAMBDA (#:G1829) (IF (IF (NULL? #:G1829) FALSE TRUE) (BEGIN (DEFINE #:G1830 (CONS (#:G1827 (CAR #:G1829)) NIL)) (RPLACD #:G1831 #:G1830) (SET! #:G1831 #:G1830) (#:G1828 (CDR #:G1829)))))) (#:G1828 (CDR #:G1829)) #:G1830)))) (APPLY REM EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE TRUNCATE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE TRUNCATE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS)))))
# (CONS (QUOTE TRUNCATE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS))))
# (QUOTE TRUNCATE)
movq $.L1171+7, %rax
# Done (QUOTE TRUNCATE)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1183, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE TRUNCATE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE TRUNCATE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE TRUNCATE) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1839 ARGS) (IF (NULL? #:G1839) NIL (BEGIN (DEFINE #:G1837 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (DEFINE #:G1841 #:G1840) (DEFINE #:G1838 (LAMBDA (#:G1839) (IF (IF (NULL? #:G1839) FALSE TRUE) (BEGIN (DEFINE #:G1840 (CONS (#:G1837 (CAR #:G1839)) NIL)) (RPLACD #:G1841 #:G1840) (SET! #:G1841 #:G1840) (#:G1838 (CDR #:G1839)))))) (#:G1838 (CDR #:G1839)) #:G1840)))) (APPLY TRUNCATE EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STRING?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STRING?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE STRING?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE STRING?)
movq $.L1188+7, %rax
# Done (QUOTE STRING?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1200, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STRING?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STRING?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STRING?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY STRING? (BEGIN (DEFINE #:G1849 ARGS) (IF (NULL? #:G1849) NIL (BEGIN (DEFINE #:G1847 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (DEFINE #:G1851 #:G1850) (DEFINE #:G1848 (LAMBDA (#:G1849) (IF (IF (NULL? #:G1849) FALSE TRUE) (BEGIN (DEFINE #:G1850 (CONS (#:G1847 (CAR #:G1849)) NIL)) (RPLACD #:G1851 #:G1850) (SET! #:G1851 #:G1850) (#:G1848 (CDR #:G1849)))))) (#:G1848 (CDR #:G1849)) #:G1850)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE MAKE-STRING) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE MAKE-STRING) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS)))))
# (CONS (QUOTE MAKE-STRING) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS))))
# (QUOTE MAKE-STRING)
movq $.L1208+7, %rax
# Done (QUOTE MAKE-STRING)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1220, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE MAKE-STRING) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE MAKE-STRING) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE MAKE-STRING) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1859 ARGS) (IF (NULL? #:G1859) NIL (BEGIN (DEFINE #:G1857 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (DEFINE #:G1861 #:G1860) (DEFINE #:G1858 (LAMBDA (#:G1859) (IF (IF (NULL? #:G1859) FALSE TRUE) (BEGIN (DEFINE #:G1860 (CONS (#:G1857 (CAR #:G1859)) NIL)) (RPLACD #:G1861 #:G1860) (SET! #:G1861 #:G1860) (#:G1858 (CDR #:G1859)))))) (#:G1858 (CDR #:G1859)) #:G1860)))) (APPLY MAKE-STRING EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STRING-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STRING-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS)))))
# (CONS (QUOTE STRING-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS))))
# (QUOTE STRING-LENGTH)
movq $.L1225+7, %rax
# Done (QUOTE STRING-LENGTH)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1237, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STRING-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STRING-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STRING-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1869 ARGS) (IF (NULL? #:G1869) NIL (BEGIN (DEFINE #:G1867 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (DEFINE #:G1871 #:G1870) (DEFINE #:G1868 (LAMBDA (#:G1869) (IF (IF (NULL? #:G1869) FALSE TRUE) (BEGIN (DEFINE #:G1870 (CONS (#:G1867 (CAR #:G1869)) NIL)) (RPLACD #:G1871 #:G1870) (SET! #:G1871 #:G1870) (#:G1868 (CDR #:G1869)))))) (#:G1868 (CDR #:G1869)) #:G1870)))) (APPLY STRING-LENGTH EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STRING-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STRING-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS)))))
# (CONS (QUOTE STRING-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS))))
# (QUOTE STRING-REF)
movq $.L1242+7, %rax
# Done (QUOTE STRING-REF)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1254, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STRING-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STRING-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STRING-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1879 ARGS) (IF (NULL? #:G1879) NIL (BEGIN (DEFINE #:G1877 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (DEFINE #:G1881 #:G1880) (DEFINE #:G1878 (LAMBDA (#:G1879) (IF (IF (NULL? #:G1879) FALSE TRUE) (BEGIN (DEFINE #:G1880 (CONS (#:G1877 (CAR #:G1879)) NIL)) (RPLACD #:G1881 #:G1880) (SET! #:G1881 #:G1880) (#:G1878 (CDR #:G1879)))))) (#:G1878 (CDR #:G1879)) #:G1880)))) (APPLY STRING-REF EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STRING-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STRING-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS)))))
# (CONS (QUOTE STRING-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS))))
# (QUOTE STRING-SET!)
movq $.L1259+7, %rax
# Done (QUOTE STRING-SET!)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1271, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STRING-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STRING-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STRING-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1889 ARGS) (IF (NULL? #:G1889) NIL (BEGIN (DEFINE #:G1887 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (DEFINE #:G1891 #:G1890) (DEFINE #:G1888 (LAMBDA (#:G1889) (IF (IF (NULL? #:G1889) FALSE TRUE) (BEGIN (DEFINE #:G1890 (CONS (#:G1887 (CAR #:G1889)) NIL)) (RPLACD #:G1891 #:G1890) (SET! #:G1891 #:G1890) (#:G1888 (CDR #:G1889)))))) (#:G1888 (CDR #:G1889)) #:G1890)))) (APPLY STRING-SET! EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STRING-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STRING-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS)))))
# (CONS (QUOTE STRING-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS))))
# (QUOTE STRING-COPY)
movq $.L1276+7, %rax
# Done (QUOTE STRING-COPY)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1288, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STRING-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STRING-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STRING-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1899 ARGS) (IF (NULL? #:G1899) NIL (BEGIN (DEFINE #:G1897 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (DEFINE #:G1901 #:G1900) (DEFINE #:G1898 (LAMBDA (#:G1899) (IF (IF (NULL? #:G1899) FALSE TRUE) (BEGIN (DEFINE #:G1900 (CONS (#:G1897 (CAR #:G1899)) NIL)) (RPLACD #:G1901 #:G1900) (SET! #:G1901 #:G1900) (#:G1898 (CDR #:G1899)))))) (#:G1898 (CDR #:G1899)) #:G1900)))) (APPLY STRING-COPY EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE VECTOR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE VECTOR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (CONS (QUOTE VECTOR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE))))
# (QUOTE VECTOR?)
movq $.L1293+7, %rax
# Done (QUOTE VECTOR?)
# (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE)))
movq 0(%rsp), %rcx
movq $.L1305, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE VECTOR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE VECTOR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE VECTOR?) (LAMBDA (KEYWORD ARGS ENV) (IF (APPLY VECTOR? (BEGIN (DEFINE #:G1909 ARGS) (IF (NULL? #:G1909) NIL (BEGIN (DEFINE #:G1907 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (DEFINE #:G1911 #:G1910) (DEFINE #:G1908 (LAMBDA (#:G1909) (IF (IF (NULL? #:G1909) FALSE TRUE) (BEGIN (DEFINE #:G1910 (CONS (#:G1907 (CAR #:G1909)) NIL)) (RPLACD #:G1911 #:G1910) (SET! #:G1911 #:G1910) (#:G1908 (CDR #:G1909)))))) (#:G1908 (CDR #:G1909)) #:G1910)))) (QUOTE TRUE) (QUOTE FALSE))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE MAKE-VECTOR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE MAKE-VECTOR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS)))))
# (CONS (QUOTE MAKE-VECTOR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS))))
# (QUOTE MAKE-VECTOR)
movq $.L1313+7, %rax
# Done (QUOTE MAKE-VECTOR)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1325, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE MAKE-VECTOR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE MAKE-VECTOR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE MAKE-VECTOR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1919 ARGS) (IF (NULL? #:G1919) NIL (BEGIN (DEFINE #:G1917 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (DEFINE #:G1921 #:G1920) (DEFINE #:G1918 (LAMBDA (#:G1919) (IF (IF (NULL? #:G1919) FALSE TRUE) (BEGIN (DEFINE #:G1920 (CONS (#:G1917 (CAR #:G1919)) NIL)) (RPLACD #:G1921 #:G1920) (SET! #:G1921 #:G1920) (#:G1918 (CDR #:G1919)))))) (#:G1918 (CDR #:G1919)) #:G1920)))) (APPLY MAKE-VECTOR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE VECTOR-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE VECTOR-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS)))))
# (CONS (QUOTE VECTOR-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS))))
# (QUOTE VECTOR-LENGTH)
movq $.L1330+7, %rax
# Done (QUOTE VECTOR-LENGTH)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1342, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE VECTOR-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE VECTOR-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE VECTOR-LENGTH) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1929 ARGS) (IF (NULL? #:G1929) NIL (BEGIN (DEFINE #:G1927 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (DEFINE #:G1931 #:G1930) (DEFINE #:G1928 (LAMBDA (#:G1929) (IF (IF (NULL? #:G1929) FALSE TRUE) (BEGIN (DEFINE #:G1930 (CONS (#:G1927 (CAR #:G1929)) NIL)) (RPLACD #:G1931 #:G1930) (SET! #:G1931 #:G1930) (#:G1928 (CDR #:G1929)))))) (#:G1928 (CDR #:G1929)) #:G1930)))) (APPLY VECTOR-LENGTH EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE VECTOR-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE VECTOR-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS)))))
# (CONS (QUOTE VECTOR-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS))))
# (QUOTE VECTOR-REF)
movq $.L1347+7, %rax
# Done (QUOTE VECTOR-REF)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1359, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE VECTOR-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE VECTOR-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE VECTOR-REF) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1939 ARGS) (IF (NULL? #:G1939) NIL (BEGIN (DEFINE #:G1937 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (DEFINE #:G1941 #:G1940) (DEFINE #:G1938 (LAMBDA (#:G1939) (IF (IF (NULL? #:G1939) FALSE TRUE) (BEGIN (DEFINE #:G1940 (CONS (#:G1937 (CAR #:G1939)) NIL)) (RPLACD #:G1941 #:G1940) (SET! #:G1941 #:G1940) (#:G1938 (CDR #:G1939)))))) (#:G1938 (CDR #:G1939)) #:G1940)))) (APPLY VECTOR-REF EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE VECTOR-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE VECTOR-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS)))))
# (CONS (QUOTE VECTOR-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS))))
# (QUOTE VECTOR-SET!)
movq $.L1364+7, %rax
# Done (QUOTE VECTOR-SET!)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1376, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE VECTOR-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE VECTOR-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE VECTOR-SET!) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1949 ARGS) (IF (NULL? #:G1949) NIL (BEGIN (DEFINE #:G1947 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (DEFINE #:G1951 #:G1950) (DEFINE #:G1948 (LAMBDA (#:G1949) (IF (IF (NULL? #:G1949) FALSE TRUE) (BEGIN (DEFINE #:G1950 (CONS (#:G1947 (CAR #:G1949)) NIL)) (RPLACD #:G1951 #:G1950) (SET! #:G1951 #:G1950) (#:G1948 (CDR #:G1949)))))) (#:G1948 (CDR #:G1949)) #:G1950)))) (APPLY VECTOR-SET! EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE VECTOR-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE VECTOR-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS)))))
# (CONS (QUOTE VECTOR-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS))))
# (QUOTE VECTOR-COPY)
movq $.L1381+7, %rax
# Done (QUOTE VECTOR-COPY)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1393, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE VECTOR-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE VECTOR-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE VECTOR-COPY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1959 ARGS) (IF (NULL? #:G1959) NIL (BEGIN (DEFINE #:G1957 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (DEFINE #:G1961 #:G1960) (DEFINE #:G1958 (LAMBDA (#:G1959) (IF (IF (NULL? #:G1959) FALSE TRUE) (BEGIN (DEFINE #:G1960 (CONS (#:G1957 (CAR #:G1959)) NIL)) (RPLACD #:G1961 #:G1960) (SET! #:G1961 #:G1960) (#:G1958 (CDR #:G1959)))))) (#:G1958 (CDR #:G1959)) #:G1960)))) (APPLY VECTOR-COPY EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STDOUT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STDOUT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS)))))
# (CONS (QUOTE STDOUT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS))))
# (QUOTE STDOUT)
movq $.L1398+7, %rax
# Done (QUOTE STDOUT)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1410, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STDOUT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STDOUT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STDOUT) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1969 ARGS) (IF (NULL? #:G1969) NIL (BEGIN (DEFINE #:G1967 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (DEFINE #:G1971 #:G1970) (DEFINE #:G1968 (LAMBDA (#:G1969) (IF (IF (NULL? #:G1969) FALSE TRUE) (BEGIN (DEFINE #:G1970 (CONS (#:G1967 (CAR #:G1969)) NIL)) (RPLACD #:G1971 #:G1970) (SET! #:G1971 #:G1970) (#:G1968 (CDR #:G1969)))))) (#:G1968 (CDR #:G1969)) #:G1970)))) (APPLY STDOUT EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE STDERR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE STDERR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS)))))
# (CONS (QUOTE STDERR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS))))
# (QUOTE STDERR)
movq $.L1415+7, %rax
# Done (QUOTE STDERR)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1427, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE STDERR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE STDERR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE STDERR) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1979 ARGS) (IF (NULL? #:G1979) NIL (BEGIN (DEFINE #:G1977 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (DEFINE #:G1981 #:G1980) (DEFINE #:G1978 (LAMBDA (#:G1979) (IF (IF (NULL? #:G1979) FALSE TRUE) (BEGIN (DEFINE #:G1980 (CONS (#:G1977 (CAR #:G1979)) NIL)) (RPLACD #:G1981 #:G1980) (SET! #:G1981 #:G1980) (#:G1978 (CDR #:G1979)))))) (#:G1978 (CDR #:G1979)) #:G1980)))) (APPLY STDERR EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (BEGIN (DEFINE A (CONS (QUOTE APPLY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE A (CONS (QUOTE APPLY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS)))))
# (CONS (QUOTE APPLY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS))))
# (QUOTE APPLY)
movq $.L1432+7, %rax
# Done (QUOTE APPLY)
# (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS)))
movq 0(%rsp), %rcx
movq $.L1446, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE APPLY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE A (CONS (QUOTE APPLY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS)))))
# (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (CONS A INTERPRETER-BUILTIN-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 168(%rcx), %rcx
# Done INTERPRETER-BUILTIN-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 168(%rcx)
# Done (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS))
# (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
# (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
# A
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done A
# INTERPRETER-BUILTIN-BODY-FORMS
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq 160(%rcx), %rcx
# Done INTERPRETER-BUILTIN-BODY-FORMS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS A INTERPRETER-BUILTIN-BODY-FORMS)
movq 0(%rsp), %rcx
movq 8(%rcx), %rcx
movq %rax, 160(%rcx)
# Done (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS))
addq $8, %rsp
# Done (BEGIN (DEFINE A (CONS (QUOTE APPLY) (LAMBDA (KEYWORD ARGS ENV) (BEGIN (DEFINE EVALED-ARGS (BEGIN (DEFINE #:G1989 ARGS) (IF (NULL? #:G1989) NIL (BEGIN (DEFINE #:G1987 (LAMBDA (ARG) (EVAL-FORM ARG ENV))) (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (DEFINE #:G1991 #:G1990) (DEFINE #:G1988 (LAMBDA (#:G1989) (IF (IF (NULL? #:G1989) FALSE TRUE) (BEGIN (DEFINE #:G1990 (CONS (#:G1987 (CAR #:G1989)) NIL)) (RPLACD #:G1991 #:G1990) (SET! #:G1991 #:G1990) (#:G1988 (CDR #:G1989)))))) (#:G1988 (CDR #:G1989)) #:G1990)))) (APPLY (LAMBDA (FUNC &REST ARGS) (FUNC (APPLY LIST* ARGS))) EVALED-ARGS))))) (SET! INTERPRETER-BUILTIN-FORMS (CONS A INTERPRETER-BUILTIN-FORMS)) (SET! INTERPRETER-BUILTIN-BODY-FORMS (CONS A INTERPRETER-BUILTIN-BODY-FORMS)))
# (DEFINE BUILTIN-EXPANDERS NIL)
# NIL
movq $31, %rax
# Done NIL
movq 0(%rsp), %rcx
movq %rax, 96(%rcx)
# Done (DEFINE BUILTIN-EXPANDERS NIL)
# (DEFINE MAKE-INITIAL-MACRO-ENV (LAMBDA NIL (CONS (LIST BUILTIN-EXPANDERS) (LIST NIL))))
# (LAMBDA NIL (CONS (LIST BUILTIN-EXPANDERS) (LIST NIL)))
movq 0(%rsp), %rax
movq $.L1451, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (CONS (LIST BUILTIN-EXPANDERS) (LIST NIL)))
movq 0(%rsp), %rcx
movq %rax, 88(%rcx)
# Done (DEFINE MAKE-INITIAL-MACRO-ENV (LAMBDA NIL (CONS (LIST BUILTIN-EXPANDERS) (LIST NIL))))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE ADD-FORM-EXPANDER (LAMBDA (MACRO-ENV KEYWORD EXPANDER) (LAPUSH KEYWORD EXPANDER (CAR MACRO-ENV))))
# (LAMBDA (MACRO-ENV KEYWORD EXPANDER) (LAPUSH KEYWORD EXPANDER (CAR MACRO-ENV)))
movq 0(%rsp), %rax
movq $.L1453, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (MACRO-ENV KEYWORD EXPANDER) (LAPUSH KEYWORD EXPANDER (CAR MACRO-ENV)))
movq 0(%rsp), %rcx
movq %rax, 80(%rcx)
# Done (DEFINE ADD-FORM-EXPANDER (LAMBDA (MACRO-ENV KEYWORD EXPANDER) (LAPUSH KEYWORD EXPANDER (CAR MACRO-ENV))))
# (DEFINE ADD-SYMBOL-EXPANSION (LAMBDA (MACRO-ENV SYM EXPANSION) (LAPUSH SYM EXPANSION (CDR MACRO-ENV))))
# (LAMBDA (MACRO-ENV SYM EXPANSION) (LAPUSH SYM EXPANSION (CDR MACRO-ENV)))
movq 0(%rsp), %rax
movq $.L1455, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (MACRO-ENV SYM EXPANSION) (LAPUSH SYM EXPANSION (CDR MACRO-ENV)))
movq 0(%rsp), %rcx
movq %rax, 72(%rcx)
# Done (DEFINE ADD-SYMBOL-EXPANSION (LAMBDA (MACRO-ENV SYM EXPANSION) (LAPUSH SYM EXPANSION (CDR MACRO-ENV))))
# (DEFINE EXPAND-FORM (LAMBDA (FORM DUAL-ENV) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))) (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM)))))
# (LAMBDA (FORM DUAL-ENV) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))) (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM))))
movq 0(%rsp), %rax
movq $.L1467, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM DUAL-ENV) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))) (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM))))
movq 0(%rsp), %rcx
movq %rax, 64(%rcx)
# Done (DEFINE EXPAND-FORM (LAMBDA (FORM DUAL-ENV) (IF (PAIR? FORM) (BEGIN (DEFINE KEYWORD (CAR FORM)) (DEFINE EXPANDER (LASSOC KEYWORD (CAR (CAR DUAL-ENV)))) (IF EXPANDER ((CDR EXPANDER) FORM KEYWORD (CDR FORM) DUAL-ENV) (BEGIN (DEFINE #:G1999 FORM) (IF (NULL? #:G1999) NIL (BEGIN (DEFINE #:G1997 (LAMBDA (SUBFORM) (EXPAND-FORM SUBFORM DUAL-ENV))) (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (DEFINE #:G2001 #:G2000) (DEFINE #:G1998 (LAMBDA (#:G1999) (IF (IF (NULL? #:G1999) FALSE TRUE) (BEGIN (DEFINE #:G2000 (CONS (#:G1997 (CAR #:G1999)) NIL)) (RPLACD #:G2001 #:G2000) (SET! #:G2001 #:G2000) (#:G1998 (CDR #:G1999)))))) (#:G1998 (CDR #:G1999)) #:G2000))))) (BEGIN (DEFINE EXPANSION (LASSOC FORM (CDR (CAR DUAL-ENV)))) (IF EXPANSION (EXPAND-FORM (CDR EXPANSION) DUAL-ENV) FORM)))))
# (DEFINE EXPAND-DEFINE (LAMBDA (KEYWORD ARGS DUAL-ENV) (BEGIN (DEFINE LHS (CAR ARGS)) (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN)))))))
# (LAMBDA (KEYWORD ARGS DUAL-ENV) (BEGIN (DEFINE LHS (CAR ARGS)) (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN))))))
movq 0(%rsp), %rax
movq $.L1482, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (KEYWORD ARGS DUAL-ENV) (BEGIN (DEFINE LHS (CAR ARGS)) (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN))))))
movq 0(%rsp), %rcx
movq %rax, 56(%rcx)
# Done (DEFINE EXPAND-DEFINE (LAMBDA (KEYWORD ARGS DUAL-ENV) (BEGIN (DEFINE LHS (CAR ARGS)) (IF (PAIR? LHS) (BEGIN (LIST (CAR LHS) (LIST* (QUOTE LAMBDA) (CDR LHS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) (IF (SYMBOL? LHS) (BEGIN (IF (NULL? (CDR ARGS)) ARGS (LIST LHS (EXPAND-FORM (CAR (CDR ARGS)) DUAL-ENV)))) (IF TRUE (BEGIN (ERROR "strange arguments to ~S: ~S" KEYWORD ARGS)) (BEGIN)))))))
# (DEFINE DO-DEFMACRO (LAMBDA (ARGS DUAL-ENV) (IF (PAIR? (CAR ARGS)) (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))) (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS)))) (QUOTE (DEFINITIONS))))
# (LAMBDA (ARGS DUAL-ENV) (IF (PAIR? (CAR ARGS)) (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))) (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS)))) (QUOTE (DEFINITIONS)))
movq 0(%rsp), %rax
movq $.L1502, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (ARGS DUAL-ENV) (IF (PAIR? (CAR ARGS)) (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))) (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS)))) (QUOTE (DEFINITIONS)))
movq 0(%rsp), %rcx
movq %rax, 48(%rcx)
# Done (DEFINE DO-DEFMACRO (LAMBDA (ARGS DUAL-ENV) (IF (PAIR? (CAR ARGS)) (BEGIN (DEFINE DEF (EXPAND-DEFINE (QUOTE DEFMACRO) ARGS DUAL-ENV)) (DEFINE MACRO-LAMBDA (EVAL-FORM (CAR (CDR DEF)) (CDR DUAL-ENV))) (ADD-FORM-EXPANDER (CAR DUAL-ENV) (CAR DEF) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (EXPAND-FORM (MACRO-LAMBDA ARGS) DUAL-ENV)))) (ADD-SYMBOL-EXPANSION (CAR DUAL-ENV) (CAR ARGS) (CAR (CDR ARGS)))) (QUOTE (DEFINITIONS))))
# (DEFINE EXPAND-BODY-FORM (LAMBDA (FORM DUAL-ENV) (SET! FORM (EXPAND-FORM FORM DUAL-ENV)) (IF (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE) (DO-DEFMACRO (CDR FORM) DUAL-ENV) FORM)))
# (LAMBDA (FORM DUAL-ENV) (SET! FORM (EXPAND-FORM FORM DUAL-ENV)) (IF (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE) (DO-DEFMACRO (CDR FORM) DUAL-ENV) FORM))
movq 0(%rsp), %rax
movq $.L1507, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (FORM DUAL-ENV) (SET! FORM (EXPAND-FORM FORM DUAL-ENV)) (IF (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE) (DO-DEFMACRO (CDR FORM) DUAL-ENV) FORM))
movq 0(%rsp), %rcx
movq %rax, 40(%rcx)
# Done (DEFINE EXPAND-BODY-FORM (LAMBDA (FORM DUAL-ENV) (SET! FORM (EXPAND-FORM FORM DUAL-ENV)) (IF (IF (PAIR? FORM) (EQ? (QUOTE DEFMACRO) (CAR FORM)) FALSE) (DO-DEFMACRO (CDR FORM) DUAL-ENV) FORM)))
# (DEFINE EXPAND-BODY (LAMBDA (BODY DUAL-ENV) (BEGIN (DEFINE #:G2009 BODY) (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010)))))
# (LAMBDA (BODY DUAL-ENV) (BEGIN (DEFINE #:G2009 BODY) (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010))))
movq 0(%rsp), %rax
movq $.L1525, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA (BODY DUAL-ENV) (BEGIN (DEFINE #:G2009 BODY) (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010))))
movq 0(%rsp), %rcx
movq %rax, 32(%rcx)
# Done (DEFINE EXPAND-BODY (LAMBDA (BODY DUAL-ENV) (BEGIN (DEFINE #:G2009 BODY) (IF (NULL? #:G2009) NIL (BEGIN (DEFINE #:G2007 (LAMBDA (FORM) (EXPAND-BODY-FORM FORM DUAL-ENV))) (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (DEFINE #:G2011 #:G2010) (DEFINE #:G2008 (LAMBDA (#:G2009) (IF (IF (NULL? #:G2009) FALSE TRUE) (BEGIN (DEFINE #:G2010 (CONS (#:G2007 (CAR #:G2009)) NIL)) (RPLACD #:G2011 #:G2010) (SET! #:G2011 #:G2010) (#:G2008 (CDR #:G2009)))))) (#:G2008 (CDR #:G2009)) #:G2010)))))
# (SET! BUILTIN-EXPANDERS (CONS (CONS (QUOTE QUOTE) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS))
# (CONS (CONS (QUOTE QUOTE) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS)
# (CONS (QUOTE QUOTE) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM))
# (QUOTE QUOTE)
movq $.L26+7, %rax
# Done (QUOTE QUOTE)
# (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)
movq 0(%rsp), %rcx
movq $.L1530, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE QUOTE) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM))
# BUILTIN-EXPANDERS
movq 0(%rsp), %rcx
movq 96(%rcx), %rcx
# Done BUILTIN-EXPANDERS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CONS (QUOTE QUOTE) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS)
movq 0(%rsp), %rcx
movq %rax, 96(%rcx)
# Done (SET! BUILTIN-EXPANDERS (CONS (CONS (QUOTE QUOTE) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS))
# (SET! BUILTIN-EXPANDERS (CONS (CONS (QUOTE LAMBDA) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) BUILTIN-EXPANDERS))
# (CONS (CONS (QUOTE LAMBDA) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) BUILTIN-EXPANDERS)
# (CONS (QUOTE LAMBDA) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))))
# (QUOTE LAMBDA)
movq $.L639+7, %rax
# Done (QUOTE LAMBDA)
# (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))
movq 0(%rsp), %rcx
movq $.L1532, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE LAMBDA) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV))))
# BUILTIN-EXPANDERS
movq 0(%rsp), %rcx
movq 96(%rcx), %rcx
# Done BUILTIN-EXPANDERS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CONS (QUOTE LAMBDA) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) BUILTIN-EXPANDERS)
movq 0(%rsp), %rcx
movq %rax, 96(%rcx)
# Done (SET! BUILTIN-EXPANDERS (CONS (CONS (QUOTE LAMBDA) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (LIST* KEYWORD (CAR ARGS) (EXPAND-BODY (CDR ARGS) DUAL-ENV)))) BUILTIN-EXPANDERS))
# (BEGIN (DEFINE #:G2014 (QUOTE (BEGIN DEFINITIONS))) (BEGIN (DEFINE #:G2015 (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))))) (#:G2015)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2014 (QUOTE (BEGIN DEFINITIONS)))
# (QUOTE (BEGIN DEFINITIONS))
movq $.L1534+2, %rax
# Done (QUOTE (BEGIN DEFINITIONS))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2014 (QUOTE (BEGIN DEFINITIONS)))
# (BEGIN (DEFINE #:G2015 (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))))) (#:G2015))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2015 (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015)))))
# (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))))
movq 0(%rsp), %rax
movq $.L1538, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2015 (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015)))))
# (#:G2015)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G2015
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2015
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2015)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2015 (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))))) (#:G2015))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2014 (QUOTE (BEGIN DEFINITIONS))) (BEGIN (DEFINE #:G2015 (LAMBDA NIL (IF (IF (NULL? #:G2014) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2014)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-BODY ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2014 (CDR #:G2014)) (#:G2015))))) (#:G2015)))
# (BEGIN (DEFINE #:G2018 (QUOTE (DEFINE LET SET!))) (BEGIN (DEFINE #:G2019 (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))))) (#:G2019)))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2018 (QUOTE (DEFINE LET SET!)))
# (QUOTE (DEFINE LET SET!))
movq $.L1546+2, %rax
# Done (QUOTE (DEFINE LET SET!))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2018 (QUOTE (DEFINE LET SET!)))
# (BEGIN (DEFINE #:G2019 (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))))) (#:G2019))
subq $24, %rbx
movq 0(%rsp), %rax
pushq %rbx
movq %rax, 8(%rbx)
movq $23, %rax
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# (DEFINE #:G2019 (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019)))))
# (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))))
movq 0(%rsp), %rax
movq $.L1553, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE #:G2019 (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019)))))
# (#:G2019)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# #:G2019
movq 0(%rsp), %rax
movq 16(%rax), %rax
# Done #:G2019
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (#:G2019)
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2019 (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))))) (#:G2019))
addq $8, %rsp
# Done (BEGIN (DEFINE #:G2018 (QUOTE (DEFINE LET SET!))) (BEGIN (DEFINE #:G2019 (LAMBDA NIL (IF (IF (NULL? #:G2018) FALSE TRUE) (BEGIN (BEGIN (DEFINE K (CAR #:G2018)) (SET! BUILTIN-EXPANDERS (CONS (CONS K (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) (CONS KEYWORD (EXPAND-DEFINE KEYWORD ARGS DUAL-ENV)))) BUILTIN-EXPANDERS))) (SET! #:G2018 (CDR #:G2018)) (#:G2019))))) (#:G2019)))
# (SET! BUILTIN-EXPANDERS (CONS (CONS (QUOTE DEFMACRO) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS))
# (CONS (CONS (QUOTE DEFMACRO) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS)
# (CONS (QUOTE DEFMACRO) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM))
# (QUOTE DEFMACRO)
movq $.L1497+7, %rax
# Done (QUOTE DEFMACRO)
# (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)
movq 0(%rsp), %rcx
movq $.L1561, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -15(%rbx), %rcx
subq $16, %rbx
# Done (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (QUOTE DEFMACRO) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM))
# BUILTIN-EXPANDERS
movq 0(%rsp), %rcx
movq 96(%rcx), %rcx
# Done BUILTIN-EXPANDERS
movq %rax, -16(%rbx)
movq %rcx, -8(%rbx)
leaq -14(%rbx), %rax
subq $16, %rbx
# Done (CONS (CONS (QUOTE DEFMACRO) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS)
movq 0(%rsp), %rcx
movq %rax, 96(%rcx)
# Done (SET! BUILTIN-EXPANDERS (CONS (CONS (QUOTE DEFMACRO) (LAMBDA (FORM KEYWORD ARGS DUAL-ENV) FORM)) BUILTIN-EXPANDERS))
# (DEFINITIONS)
# Done (DEFINITIONS)
# (DEFINE MAIN (LAMBDA NIL (BEGIN (DEFINE RES (FUNCTION? NIL)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FUNCTION? (LAMBDA NIL))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE X (QUOTE (1 2))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (LENGTH (QUOTE (1 2 3)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (LIST 1 2 3)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF TRUE FALSE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF FALSE TRUE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE)) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (SYMBOL-NAME (INTERN "bar"))) (DEFINE EXPECTED "bar") (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (+ 1 1)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (- 1 1)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))) (DEFINE EXPECTED (QUOTE (2 3 4))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))) (DEFINE EXPECTED NIL) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))) (DEFINE EXPECTED (QUOTE (A))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINITIONS) (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))) (BEGIN (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))) (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE B (MAKE-BUFFER)) (BUFFER-ADD B 1) (BUFFER-ADD B 2) (BUFFER-ADD B 3) (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "foo")) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "bar")) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (ASSERT-UNIFORM-FORMAT 0 "0") (ASSERT-UNIFORM-FORMAT 242143 "242143") (ASSERT-UNIFORM-FORMAT -1 "-1") (ASSERT-UNIFORM-FORMAT NIL "()") (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo") (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)") (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)") (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>") (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello") (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)")) (BEGIN (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))) (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED))))))
# (LAMBDA NIL (BEGIN (DEFINE RES (FUNCTION? NIL)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FUNCTION? (LAMBDA NIL))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE X (QUOTE (1 2))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (LENGTH (QUOTE (1 2 3)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (LIST 1 2 3)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF TRUE FALSE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF FALSE TRUE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE)) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (SYMBOL-NAME (INTERN "bar"))) (DEFINE EXPECTED "bar") (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (+ 1 1)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (- 1 1)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))) (DEFINE EXPECTED (QUOTE (2 3 4))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))) (DEFINE EXPECTED NIL) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))) (DEFINE EXPECTED (QUOTE (A))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINITIONS) (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))) (BEGIN (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))) (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE B (MAKE-BUFFER)) (BUFFER-ADD B 1) (BUFFER-ADD B 2) (BUFFER-ADD B 3) (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "foo")) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "bar")) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (ASSERT-UNIFORM-FORMAT 0 "0") (ASSERT-UNIFORM-FORMAT 242143 "242143") (ASSERT-UNIFORM-FORMAT -1 "-1") (ASSERT-UNIFORM-FORMAT NIL "()") (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo") (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)") (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)") (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>") (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello") (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)")) (BEGIN (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))) (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED)))))
movq 0(%rsp), %rax
movq $.L1849, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (BEGIN (DEFINE RES (FUNCTION? NIL)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FUNCTION? (LAMBDA NIL))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE X (QUOTE (1 2))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (LENGTH (QUOTE (1 2 3)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (LIST 1 2 3)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF TRUE FALSE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF FALSE TRUE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE)) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (SYMBOL-NAME (INTERN "bar"))) (DEFINE EXPECTED "bar") (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (+ 1 1)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (- 1 1)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))) (DEFINE EXPECTED (QUOTE (2 3 4))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))) (DEFINE EXPECTED NIL) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))) (DEFINE EXPECTED (QUOTE (A))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINITIONS) (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))) (BEGIN (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))) (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE B (MAKE-BUFFER)) (BUFFER-ADD B 1) (BUFFER-ADD B 2) (BUFFER-ADD B 3) (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "foo")) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "bar")) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (ASSERT-UNIFORM-FORMAT 0 "0") (ASSERT-UNIFORM-FORMAT 242143 "242143") (ASSERT-UNIFORM-FORMAT -1 "-1") (ASSERT-UNIFORM-FORMAT NIL "()") (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo") (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)") (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)") (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>") (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello") (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)")) (BEGIN (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))) (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED)))))
movq 0(%rsp), %rcx
movq %rax, 24(%rcx)
# Done (DEFINE MAIN (LAMBDA NIL (BEGIN (DEFINE RES (FUNCTION? NIL)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? ()) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FUNCTION? (LAMBDA NIL))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (function? (lambda ())) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE X (QUOTE (1 2))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE ((1 2) B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A (1 2) C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (CONS X NIL)))) (DEFINE EXPECTED (QUOTE (A B (1 2)))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote x))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPEND X (CONS (QUOTE B) (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (1 2 B C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote ((unquote-splicing x) b c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (APPEND X (CONS (QUOTE C) NIL)))) (DEFINE EXPECTED (QUOTE (A 1 2 C))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a (unquote-splicing x) c)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (CONS (QUOTE A) (CONS (QUOTE B) (APPEND X NIL)))) (DEFINE EXPECTED (QUOTE (A B 1 2))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (quasiquote (a b (unquote-splicing x))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (LENGTH (QUOTE (1 2 3)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (length (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (LIST 1 2 3)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (list 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF TRUE FALSE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF FALSE TRUE FALSE)) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and false true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (IF (IF TRUE TRUE FALSE) TRUE FALSE)) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (and true true true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES TRUE) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or true) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES FALSE) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (or false) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (EQ? (INTERN "foo") (QUOTE FOO))) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (eq? (intern \"foo\") (quote foo)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (SYMBOL-NAME (INTERN "bar"))) (DEFINE EXPECTED "bar") (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (symbol-name (intern \"bar\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (+ 1 1)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (- 1 1)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (1- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2043 (QUOTE (1 2 3))) (IF (NULL? #:G2043) NIL (BEGIN (DEFINE #:G2041 (LAMBDA (X) (+ X 1))) (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (DEFINE #:G2045 #:G2044) (DEFINE #:G2042 (LAMBDA (#:G2043) (IF (IF (NULL? #:G2043) FALSE TRUE) (BEGIN (DEFINE #:G2044 (CONS (#:G2041 (CAR #:G2043)) NIL)) (RPLACD #:G2045 #:G2044) (SET! #:G2045 #:G2044) (#:G2042 (CDR #:G2043)))))) (#:G2042 (CDR #:G2043)) #:G2044)))) (DEFINE EXPECTED (QUOTE (2 3 4))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (1 2 3))) (1+ x)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2048 NIL) (IF (NULL? #:G2048) NIL (BEGIN (DEFINE #:G2046 (LAMBDA (X) (ERROR "Whoa!"))) (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (DEFINE #:G2050 #:G2049) (DEFINE #:G2047 (LAMBDA (#:G2048) (IF (IF (NULL? #:G2048) FALSE TRUE) (BEGIN (DEFINE #:G2049 (CONS (#:G2046 (CAR #:G2048)) NIL)) (RPLACD #:G2050 #:G2049) (SET! #:G2050 #:G2049) (#:G2047 (CDR #:G2048)))))) (#:G2047 (CDR #:G2048)) #:G2049)))) (DEFINE EXPECTED NIL) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2053 (QUOTE (A))) (IF (NULL? #:G2053) NIL (BEGIN (DEFINE #:G2051 (LAMBDA (X) X)) (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (DEFINE #:G2055 #:G2054) (DEFINE #:G2052 (LAMBDA (#:G2053) (IF (IF (NULL? #:G2053) FALSE TRUE) (BEGIN (DEFINE #:G2054 (CONS (#:G2051 (CAR #:G2053)) NIL)) (RPLACD #:G2055 #:G2054) (SET! #:G2055 #:G2054) (#:G2052 (CDR #:G2053)))))) (#:G2052 (CDR #:G2053)) #:G2054)))) (DEFINE EXPECTED (QUOTE (A))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (mapfor (x (quote (a))) x) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2056 (LAMBDA (#:G2057) (IF (NULL? #:G2057) FALSE (BEGIN (DEFINE X (CAR #:G2057)) (IF (BEGIN (> X 1)) X (#:G2056 (CDR #:G2057))))))) (#:G2056 (QUOTE (1 2 3))))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1 2 3))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2058 (LAMBDA (#:G2059) (IF (NULL? #:G2059) FALSE (BEGIN (DEFINE X (CAR #:G2059)) (IF (BEGIN (ERROR "Whoa!")) X (#:G2058 (CDR #:G2059))))))) (#:G2058 NIL))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x ()) (error \"Whoa!\")) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (BEGIN (DEFINE #:G2060 (LAMBDA (#:G2061) (IF (NULL? #:G2061) FALSE (BEGIN (DEFINE X (CAR #:G2061)) (IF (BEGIN (> X 1)) X (#:G2060 (CDR #:G2061))))))) (#:G2060 (QUOTE (1))))) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (findfor (x (quote (1))) (> x 1)) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINITIONS) (BEGIN (BEGIN (DEFINE RES (+)) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE NIL))) (DEFINE EXPECTED 0) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2)) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2)))) (DEFINE EXPECTED 3) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (+ 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (+ 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY + (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply + (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (*)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (*) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE NIL))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote ())) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1)) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1)))) (DEFINE EXPECTED 1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2)) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2)))) (DEFINE EXPECTED 2) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (* 1 2 3)) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (* 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY * (QUOTE (1 2 3)))) (DEFINE EXPECTED 6) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply * (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2)) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2)))) (DEFINE EXPECTED -1) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2))) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (BEGIN (DEFINE RES (- 1 2 3)) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (- 1 2 3) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (APPLY - (QUOTE (1 2 3)))) (DEFINE EXPECTED -4) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply - (quote (1 2 3))) gave ~S, expected ~S" RES EXPECTED)))))) (BEGIN (DEFINE FAC (LAMBDA (N) (IF (< N 2) 1 (* N (FAC (- N 1)))))) (BEGIN (DEFINE RES (FAC 6)) (DEFINE EXPECTED 720) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (fac 6) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE B (MAKE-BUFFER)) (BUFFER-ADD B 1) (BUFFER-ADD B 2) (BUFFER-ADD B 3) (BEGIN (DEFINE RES (BUFFER-LIST B)) (DEFINE EXPECTED (QUOTE (1 2 3))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (buffer-list b) gave ~S, expected ~S" RES EXPECTED))))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "foo")) (DEFINE EXPECTED TRUE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"foo\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (STRING-EQUAL? "foo" "bar")) (DEFINE EXPECTED FALSE) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (string-equal? \"foo\" \"bar\") gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE ASSERT-UNIFORM-FORMAT (LAMBDA (A RES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED RES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (DEFINE ASSERT-NON-UNIFORM-FORMAT (LAMBDA (A SRES ARES) (BEGIN (DEFINE RES (FORMAT "~S" A)) (DEFINE EXPECTED SRES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~S\" a) gave ~S, expected ~S" RES EXPECTED)))) (BEGIN (DEFINE RES (FORMAT "~A" A)) (DEFINE EXPECTED ARES) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (format \"~A\" a) gave ~S, expected ~S" RES EXPECTED)))))) (ASSERT-UNIFORM-FORMAT 0 "0") (ASSERT-UNIFORM-FORMAT 242143 "242143") (ASSERT-UNIFORM-FORMAT -1 "-1") (ASSERT-UNIFORM-FORMAT NIL "()") (ASSERT-UNIFORM-FORMAT (QUOTE FOO) "foo") (ASSERT-UNIFORM-FORMAT (QUOTE (A B)) "(a b)") (ASSERT-UNIFORM-FORMAT (QUOTE (A . B)) "(a . b)") (ASSERT-UNIFORM-FORMAT (LAMBDA NIL) "#<function>") (ASSERT-NON-UNIFORM-FORMAT "Hello" "\"Hello\"" "Hello") (ASSERT-NON-UNIFORM-FORMAT (QUOTE ("Hello" "there")) "(\"Hello\" \"there\")" "(Hello there)")) (BEGIN (DEFINE RES (APPLY APPEND (QUOTE ((1 2) (3 4))) (QUOTE ((5 6) (7 8))))) (DEFINE EXPECTED (QUOTE ((1 2) (3 4) 5 6 7 8))) (IF (IF (EQUAL? RES EXPECTED) FALSE TRUE) (BEGIN (ERROR "Evaluation of (apply append (quote ((1 2) (3 4))) (quote ((5 6) (7 8)))) gave ~S, expected ~S" RES EXPECTED))))))
# (DEFINE FOO (LAMBDA NIL (DEFINE DUAL-ENV (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV))) (DEFINE EXPANDED (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV)) (DEFINE RES (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV))) (FORMOUT STDOUT ">>> ~S~%" RES)))
# (LAMBDA NIL (DEFINE DUAL-ENV (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV))) (DEFINE EXPANDED (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV)) (DEFINE RES (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV))) (FORMOUT STDOUT ">>> ~S~%" RES))
movq 0(%rsp), %rax
movq $.L2230, -16(%rbx)
movq %rax, -8(%rbx)
leaq -15(%rbx), %rax
subq $16, %rbx
# Done (LAMBDA NIL (DEFINE DUAL-ENV (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV))) (DEFINE EXPANDED (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV)) (DEFINE RES (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV))) (FORMOUT STDOUT ">>> ~S~%" RES))
movq 0(%rsp), %rcx
movq %rax, 16(%rcx)
# Done (DEFINE FOO (LAMBDA NIL (DEFINE DUAL-ENV (CONS (MAKE-INITIAL-MACRO-ENV) (MAKE-INITIAL-INTERPRETER-ENV))) (DEFINE EXPANDED (EXPAND-BODY-FORM (QUOTE ((LAMBDA (X Y) (+ X Y)) 1 2)) DUAL-ENV)) (DEFINE RES (EVAL-BODY-FORM EXPANDED (CDR DUAL-ENV))) (FORMOUT STDOUT ">>> ~S~%" RES)))
# (MAIN)
subq $16, %rbx
movq $8, 0(%rbx)
movq %rbx, %rcx
# MAIN
movq 0(%rsp), %rax
movq 24(%rax), %rax
# Done MAIN
movq 7(%rax), %rdx
movq %rdx, 8(%rcx)
call *-1(%rax)
# Done (MAIN)
addq $8, %rsp
addq $8, %rsp
movq %rbx, %rax
cld
pushfq
andl $4294705151, (%rsp)
popfq
ret
