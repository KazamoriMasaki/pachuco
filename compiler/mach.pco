;;; Machine definition bits for i386/x86-64.  The 32/64-bit specific
;;; parts are in the relevant mach-*.pco files, but this stuff needs
;;; to come first.

;;; Registers

(define (register-definition name variants)
  (quasiquote 
    (define (unquote name)
      (make-vector-from-list
        (quote ((unquote name) (unquote false) (unquote-splicing variants)))))))

(defmarco (define-register name . variants)
  (register-definition name variants))

(defmarco (define-numbered-registers template start stop . variant-templates)
  (labels ((make-defs (n)
             (if (< n stop)
                 (let* ((name
                          (subject-language-intern (format~ false template n)))
                        (variants
                          (mapfor (vt variant-templates) (format~ false vt n))))
                   (cons (register-definition name variants)
                         (make-defs (1+ n))))
                 ())))
    (cons 'definitions (make-defs start))))

(define (register-variant reg variant)
  (vector-ref reg (+ 2 variant)))

(define (register-name reg)
  (vector-ref reg 0))

(define (register-bit reg)
  (vector-ref reg 1))

(define general-registers ())
(define general-register-count 0)

;;; %nargs is used to pass the number of arguments to functions.  We
;;; reuse one of the general-registers for this, which means we have
;;; to be careful about invoking the operators that use it
;;; (check-arg-count, arg-count).
(define %nargs)

(define (add-general-registers regs)
  (dolist (reg regs)
    (vector-set! reg 1 (ash 1 general-register-count))
    (set! general-register-count (1+ general-register-count)))

  (set! general-registers (nconc general-registers regs))
  (set! %nargs (last-elem general-registers)))

;;; Assembler bits

(defmarco (emit-without-flushing template . args)
  (if (string? template)
      (quasiquote
        (let* ((*print-pretty* false))
          (format~ true (unquote (string-concat template "~%"))
                   (unquote-splicing args))))
      (quasiquote
        (let* ((*print-pretty* false))
          (format~ true (unquote template) (unquote-splicing args))
          (format~ true "~%")))))

(defmarco (emit cg template . args)
  (quasiquote (begin
    (flush-labels-and-jumps (unquote cg))
    (emit-without-flushing (unquote template) (unquote-splicing args)))))

(defmarco (emit-comment cg template . args)
  (quasiquote
    (let* ((*print-pretty* false))
      (format~ true (unquote (string-concat "# " template "~%"))
               (unquote-splicing args)))))

(defmarco (with-saved-frame-base cg . body)
  (let* ((orig-frame-base (gensym)))
    (quasiquote
      (let* (((unquote orig-frame-base) (codegen-frame-base (unquote cg))))
        (unquote-splicing body)
        (codegen-set-frame-base! (unquote cg) (unquote orig-frame-base))))))

(define function-label-prefix "lf")
(define variable-label-prefix "lv")
(define symbol-label-prefix "ls")
