;;; Misc codegen definitions that need to be introduced early on.
;;; Most but not all of this is related to machine definitions.

;;; Registers

(define (register-definition name variants)
  (quasiquote
    (define (unquote name)
      (vector (quote (unquote name)) (unquote false) . (unquote variants)))))

(defmacro (define-register name . variants)
  (register-definition name variants))

(defmacro (define-numbered-registers template start stop . variant-templates)
  (labels ((make-defs (n)
             (if (< n stop)
                 (let* ((name
                          (subject-language-intern (format template n)))
                        (variants
                          (mapfor (vt variant-templates) (format vt n))))
                   (cons (register-definition name variants)
                         (make-defs (1+ n))))
                 ())))
    (cons 'definitions (make-defs start))))

(define (register-variant reg variant)
  (vector-ref reg (+ 2 variant)))

(define (register-name reg)
  (vector-ref reg 0))

(define (register-bit reg)
  (vector-ref reg 1))

(define general-registers ())
(define general-register-count 0)

;;; %nargs is used to pass the number of arguments to functions.  We
;;; reuse one of the general-registers for this, which means we have
;;; to be careful about invoking raw-arg-count.
(define %nargs)

(define (add-general-registers regs)
  (dolist (reg regs)
    (vector-set! reg 1 (ash 1 general-register-count))
    (set! general-register-count (1+ general-register-count)))

  (set! general-registers (nconc general-registers regs))
  (set! %nargs (last-elem general-registers)))

(define (make-registers-from-template template regs)
  (set! regs (copy-list regs))
  (dolist (reg template) (when reg (set! regs (delete reg regs))))
  (labels ((fill-template (template)
             (cond ((null? template)
                    regs)
                   ((car template)
                    (cons (car template) (fill-template (cdr template))))
                   (true
                    (let* ((r (car regs)))
                      (set! regs (cdr regs))
                      (cons r (fill-template (cdr template))))))))
    (fill-template template)))

(define label-counter 0)

(define (gen-label)
  (format ".L~D" (set! label-counter (1+ label-counter))))

(define (label-name-ok? name i)
  (or (= i (string-length name))
      (let* ((ch (string-ref name i)))
        (and (or (character-alphanumeric? ch) (eq? ch #\-))
             (label-name-ok? name (1+ i))))))

(define (make-label-for sym prefix)
  ;; map a lisp symbol to an assembly label, returning a gen-labelled
  ;; label if necessary
  (let* ((name (subject-language-symbol-name sym)))
    (if (label-name-ok? name 0)
        (format "~A_~A" prefix (string-replace name "-" "_"))
        (format "~A~D" prefix (set! label-counter (1+ label-counter))))))

;;; General codegen bits

(define-struct codegen ()
  (frame-base false)
  (have-closure true)
  (deferred-jump false)
  (here-labels ())
  (redirect-labels ())
  (out-of-line ())
  (todo ())
  (arity-mismatch-varrec false))

(define-trivial-walker codegen-simplify ())

;;; Assembler bits

(defmacro (emit-without-flushing template . args)
  (if (string? template)
      (quasiquote
        (formout stdout (unquote (string-concat template "~%"))
                 . (unquote args)))
      (quasiquote
        (begin
          (formout stdout (unquote template) . (unquote args))
          (formout stdout "~%")))))

(defmacro (emit cg template . args)
  (quasiquote (begin
    (flush-labels-and-jumps (unquote cg))
    (emit-without-flushing (unquote template) . (unquote args)))))

(defmacro (emit-comment cg template . args)
  (quasiquote
    (formout stdout (unquote (string-concat "# " template "~%"))
             . (unquote args))))

(defmacro (with-saved-frame-base cg . body)
  (let* ((orig-frame-base (gensym)))
    (quasiquote
      (let* (((unquote orig-frame-base) (codegen-frame-base (unquote cg))))
        (unquote-splicing body)
        (codegen-set-frame-base! (unquote cg) (unquote orig-frame-base))))))

(define indirect-function-label-prefix "li")
(define direct-function-label-prefix "ld")
(define variable-label-prefix "lv")
(define symbol-label-prefix "ls")
