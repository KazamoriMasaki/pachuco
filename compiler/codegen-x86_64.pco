;;; x86_64-specific code generation

;;; rip-relative addressing is shorter on x86-64, but is not the
;;; default in the assembly syntax:

(define (indirect-operand addr)
  (unless (string? addr)
    (error "indirect operand ~S, which is surprising" addr))
  (format~ false "~A(%rip)" addr))

;;; C calls

(define-codegen (c-call attrs . args)
  (labels ((codegen-args (args regs)
             (when (null? regs) (error "too many arguments for registers"))
             (if (null? (cdr args))
                 (trashy-codegen-into-reg (car args) cg false (car regs))
                 (begin
                   (emit-frame-push cg (trashy-codegen (car args) cg false))
                   (codegen-args (cdr args) (cdr regs))
                   (emit-frame-pop cg (car regs))))))
    (unless (null? args) (codegen-args args c-call-arg-regs)))

  (emit cg "cld")
  (emit-set-ac-flag cg false)

  ;; C ABI requires us to align stack to 16 byte bundary
  (emit-mov cg %sp %b)
  (emit-and cg -16 %sp)
  (emit cg "call ~A" (attr-ref attrs 'c-function-name))
  (emit-mov cg %b %sp)
  
  (emit-set-ac-flag cg true)
  (unless (member? %closure c-callee-saved-regs) (emit-restore-%closure cg))
  %a)
