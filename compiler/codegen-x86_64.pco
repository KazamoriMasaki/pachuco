;;; x86_64-specific code generation

;;; Bitness-dependent assembler bits

(define (emit-literal cg lit)
  (emit cg ".quad ~A" lit))

(define (emit-movzx cg src dest src-scale . dest-scale)
  (set! dest-scale (if (null? dest-scale) value-scale (car dest-scale)))
  (if (= dest-scale 3)
      (if (= src-scale 3)
          (emit cg "movq ~A, ~A" (value-sized cg src) (value-sized cg dest))
          (emit-movzx-32 cg src dest src-scale 2))
      (emit-movzx-32 cg src dest src-scale dest-scale)))

(define (emit-extend-sign-bit cg oper)
  (emit-sar cg 63 oper))

;;; rip-relative addressing is shorter on x86-64, but is not the
;;; default in the assembly syntax:

(define (absolute-asm-operand addr)
  (unless (string? addr)
    (error "absolute operand ~S, which is surprising" addr))
  (format "~A(%rip)" addr))

;;; C calls

(define c-call-arg-regs (list %di %si %d %c %r8 %r9))
(define c-call-arg-max (length c-call-arg-regs))
;;;We need to have all regs in c-call-arg-regs for trashy-codegen-into-regs
(set! c-call-arg-regs (move-to-front c-call-arg-regs general-registers))

(define-trashy-codegen (c-call attrs . args)
  (let* ((c-func (attr-ref attrs 'c-function-name)))
    (when (> (length args) c-call-arg-max)
      (error "too many args in call to ~A" c-func))

    (trashy-codegen-into-regs cg form c-call-arg-regs)

    (emit-set-ac-flag cg false)

    ;; C ABI requires us to align stack to 16 byte bundary
    (emit-mov cg %sp %b)
    (emit-and cg -16 %sp)
    (emit cg "call ~A" c-func)
    (emit-mov cg %b %sp)

    (emit-set-ac-flag cg true)
    (unless (member? %closure c-callee-saved-regs) (emit-restore-%closure cg))
    (emit-reset-frame-base cg out-frame-base)
    %a))
