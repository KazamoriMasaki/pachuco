;;; Common parts of "traditional" x86 stack regimes.  That is, with
;;; %sp marking the bottom of the stack, and the parameters above the
;;; return address.

(define (copy-tail-call-args cg out-arg-count out-retaddr tmpreg)
  (when (> out-arg-count 0)
    (set! out-arg-count (1- out-arg-count))
    (emit-mov cg (indexed-operand %sp out-arg-count) tmpreg)
    (emit-mov cg tmpreg (reindex-operand out-retaddr (1+ out-arg-count)))
    (copy-tail-call-args cg out-arg-count out-retaddr tmpreg)))

(define (emit-frame-spill cg operand reg)
  ;; Push can take any operand
  (when (and (not (register? operand))
             (not (mem? operand))
             (not (immediate32? operand)))
    ;;(unless (or (register? operand) (immediate32? operand))
    (emit-mov cg operand reg)
    (set! operand reg))

  (emit-frame-push cg operand))

(define (emit-offset-sp cg offset)
  ;; Use lea here to avoid trashing condition codes
  (emit-lea cg (indexed-operand %sp offset) %sp))
