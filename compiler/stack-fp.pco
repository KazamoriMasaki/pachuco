;;; Stack handling, with a frame pointer

;;; Stack layout:
;;;
;;; param N
;;; ...
;;; param 1
;;; param 0  <--- (mem %sp frame-base)
;;; Return address
;;; Saved %bp <--- %bp
;;; %closure
;;; Local var 0
;;; ...
;;; Local var N
;;; in-progress param N
;;; in-progress param N-1
;;; ...
;;;
;;; Functions are called with the closure in %closure, arg-count in
;;; %nargs.  They return with the result in %funcres.

(define (param-slot cg index)
  (indexed-operand %bp (+ 2 index)))

(define (return-address-slot cg)
  (indexed-operand %bp 1))

(define (closure-address-slot cg)
  (indexed-operand %bp -1))

(define (local-slot cg index)
  (indexed-operand %sp (- (codegen-frame-base cg) index)))

;;; Functions, calls, returns, etc.

(define (emit-function-prologue cg)
  (emit-push cg %bp)
  (emit-mov cg %sp %bp)
  (codegen-set-frame-base! cg 2))

(define-operator (return (retval fixed-reg %funcres)) (tail-form)
  (emit cg "leave")
  (emit-ret cg (* value-size (attr-ref attrs 'nparams)))
  (codegen-function-tail cg out-frame-base))

(define-operator (varargs-return arg-count (retval fixed-reg %funcres))
                 (tail-form (temp-regs retaddr))
  ;; We need to clean up the stack before returning, but the return
  ;; address is on the top.  And we can't simply pop the return
  ;; address and later do an indirect branch to it, because that is
  ;; bad for branch prediction.  So we copy the return address into
  ;; to the top of the argument area, restoring the frame pointer on
  ;; the way, then return
  (emit-scale-number cg value-scale arg-count)
  (emit-lea cg (reoffset-operand (return-address-slot cg) arg-count) arg-count)
  (emit-mov cg (return-address-slot cg) retaddr)
  (emit-mov cg (mem-operand %bp) %bp)
  (emit-mov cg arg-count %sp)
  (emit-mov cg retaddr (mem-operand %sp))
  (emit cg "ret")
  (codegen-function-tail cg out-frame-base))

(define (codegen-tail-call cg attrs retaddr out-arg-count out-retaddr regs)
  (let* ((tmpreg (first regs))
         (retaddr-reg (second regs))
         (saved-fp-reg (third regs)))
    (emit-mov cg retaddr retaddr-reg)
    (emit-mov cg (mem-operand %bp) saved-fp-reg)
    (copy-tail-call-args cg out-arg-count out-retaddr tmpreg)
    (emit-lea cg out-retaddr %sp)
    (emit-mov cg retaddr-reg (mem-operand %sp))
    (emit-mov cg saved-fp-reg %bp)
    (emit-call-or-jump cg attrs "jmp")))

(define-codegen-discarding (tail-call attrs . args)
  (codegen-call-args cg attrs args)
  (let* ((in-arg-count (attr-ref attrs 'nparams))
         (out-arg-count (attr-ref attrs 'nargs))
         (retaddr (return-address-slot cg))
         (out-retaddr (reindex-operand retaddr (- in-arg-count out-arg-count))))
    (if (= in-arg-count out-arg-count)
        (begin
          (copy-tail-call-args cg out-arg-count out-retaddr
                               (first general-registers))
          (emit cg "leave")
          (emit-call-or-jump cg attrs "jmp"))
        (codegen-tail-call cg attrs retaddr out-arg-count out-retaddr
                           general-registers))
    (codegen-function-tail cg out-frame-base)))

(define-codegen-discarding (varargs-tail-call attrs arg-count . args)
  (codegen-call-args cg attrs args)
  (let* ((in-arg-count-reg (first general-registers))
         (out-arg-count (attr-ref attrs 'nargs))
         (retaddr (return-address-slot cg)))
    ;; here we assume that the arg-count is just a ref, and so won't
    ;; access %closure
    (trashy-codegen-into-reg arg-count cg false in-arg-count-reg)
    (emit-scale-number cg value-scale in-arg-count-reg)
    (emit-lea cg (reoffset-2-operand retaddr in-arg-count-reg
                                     (* value-size (- out-arg-count)))
              in-arg-count-reg)
    (codegen-tail-call cg attrs retaddr out-arg-count
                       (mem-operand in-arg-count-reg) (cdr general-registers))
    (codegen-function-tail cg out-frame-base)))

;;; Apply support

(define-operator (raw-jump-with-arg-space before-arg-count after-arg-count
                                          bodyfunc)
                 (tail-form (temp-regs retaddr))
  ;; calculate how far up to move %sp
  (emit-sub cg after-arg-count before-arg-count)
  (emit-mov cg bodyfunc %closure)
  (emit-scale-number cg value-scale before-arg-count)
  (emit-mov cg (return-address-slot cg) retaddr)
  (emit-lea cg (reoffset-operand (return-address-slot cg) before-arg-count) %sp)
  (emit-mov cg (mem-operand %bp) %bp)
  (emit-mov cg retaddr (mem-operand %sp))
  (emit-call-or-jump cg attrs "jmp")
  (codegen-function-tail cg out-frame-base))

(define-operator (raw-apply-jump func (arg-count fixed-reg %nargs)) (tail-form)
  (emit-mov cg func %closure)
  (emit cg "leave")
  (emit-indirect-call-or-jump cg "jmp")
  (codegen-function-tail cg out-frame-base))

;;; C-callable program wrapper

(define c-callee-saved-regs-without-%bp (remove %bp c-callee-saved-regs))

(define (codegen-program program)
  (let* ((cg (make-codegen)))
    (codegen-program-start cg program)

    (emit cg ".text")
    (emit-function-label cg "lisp")
    (emit-push cg %bp)
    (emit-mov cg %sp %bp)
    (emit-set-ac-flag cg true)
    (dolist (reg c-callee-saved-regs-without-%bp) (emit-push cg reg))

    (codegen-set-frame-base! cg (length c-callee-saved-regs-without-%bp))
    (codegen-body cg program 0)

    (dolist (reg (reverse c-callee-saved-regs-without-%bp)) (emit-pop cg reg))
    (emit-set-ac-flag cg false)
    (emit cg "leave")
    (emit cg "ret")

    (codegen-do-out-of-line cg)
    (emit cg ".size lisp, .-lisp")

    (codegen-program-end cg)))

