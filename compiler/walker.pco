;;; A walker is a function which recurses over a program tree,
;;; dispatching forms to handlers based on their keywords.
;;; define-walker is a macro providing a convenient way to define
;;; walkers.
;;;
;;; A define-walker needs to be paired with a recursion function,
;;; which defines how to handle forms that don't match one of the
;;; handlers

(define (set-walker-symtab-entries symtab kws f)
  (if (pair? kws)
      (dolist (kw kws) (symboltable-set! symtab kw f))
      (symboltable-set! symtab kws f)))

(defmacro (define-walker name implicit-vars)
  (let* ((form-name name)
         (recurse-name (compound-symbol name "-recurse"))
         (define-name (compound-symbol "define-" name))
         (symtab-name (compound-symbol name "-symtab")))
    (quasiquote (definitions
      (define (unquote symtab-name) (make-symboltable))

      (define ((unquote form-name) form (unquote-splicing implicit-vars))
        (let* ((f (symboltable-ref (unquote symtab-name) (car form))))
          (if f
              (funcall f form (unquote-splicing implicit-vars))
              ((unquote recurse-name) form (unquote-splicing implicit-vars)))))

      (defmacro ((unquote define-name) template . body)
        (quasiquote
          (set-walker-symtab-entries (unquote (unquote symtab-name))
            '(unquote (car template))
            (lambda (form (unquote-splicing (unquote implicit-vars)))
              (bind (unquote (cdr template)) (cdr form)
                (unquote-splicing body))))))))))

;;; define-trivial-walker is like define-walker, but it also provides
;;; a recusrion function that does a straightforward recursion into
;;; subforms

(defmacro (define-trivial-walker name implicit-vars)
  (let* ((form-name name)
         (recurse-name (compound-symbol name "-recurse"))
         (forms-name (compound-symbol name "-forms")))
    (quasiquote (definitions
      (define-walker (unquote name) (unquote implicit-vars))

      (define ((unquote forms-name) forms (unquote-splicing implicit-vars))
        (dolist (form forms)
          ((unquote form-name) form (unquote-splicing implicit-vars))))

      (define ((unquote recurse-name) form (unquote-splicing implicit-vars))
        ((unquote forms-name) (cddr form) (unquote-splicing implicit-vars)))))))

