;;; More-or-less the simplest code generation strategy that could
;;; possibly work

(define main-reg (first general-registers))

;; codegen emits the code to evaluate the form, with the result going into
;; %funcres
(define-walker codegen (cg out-frame-base))
(define (codegen-recurse form cg out-frame-base)
  (error "codegen on unknown form ~S" (car form)))

;; codegen-discarding emits code to evaluate the form, in a context
;; where the resulting value is not used.
(define-walker codegen-discarding (cg out-frame-base))
(define (codegen-discarding-recurse form cg out-frame-base)
  (codegen form cg out-frame-base))

;; codegen-discarding emits code to evaluate the form, in a
;; conditional context.
(define-walker codegen-conditional (cg out-frame-base tlabel flabel))
(define (codegen-conditional-recurse form cg out-frame-base tlabel flabel)
  (emit-branch-on-operand cg (codegen form cg out-frame-base) main-reg
                          out-frame-base tlabel flabel))


(define (codegen-into-reg form cg out-frame-base reg)
  (emit-mov-maybe cg (codegen form cg out-frame-base) reg))

;;; codegen functions called from outside this file

(defmacro (trashy-codegen form cg out-frame-base)
  (quasiquote (codegen (unquote form) (unquote cg) (unquote out-frame-base))))

(defmacro (trashy-codegen-discarding form cg out-frame-base)
  (quasiquote (codegen-discarding (unquote form) (unquote cg)
                                  (unquote out-frame-base))))

(defmacro (trashy-codegen-into-reg form cg out-frame-base reg)
  (quasiquote (codegen-into-reg (unquote form) (unquote cg)
                                (unquote out-frame-base) (unquote reg))))

(defmacro (define-trashy-codegen template options . body)
  (options-bind ((tail-form false)) options
    (when tail-form
      (set! body (nconc body (list false))))

    (quasiquote (define-codegen (unquote template) . (unquote body)))))

;;; Begin

(define (codegen-begin-non-final cg forms)
  (if (null? (cdr forms))
      (begin
        (emit-comment-form cg (car forms))
        (car forms))
      (begin
        (emit-comment-form cg (car forms))
        (codegen-discarding (car forms) cg false)
        (codegen-begin-non-final cg (cdr forms)))))

;; We always attempt to reset the frame-base at the end of a begin.
;; Sometimes this won't do anything, because the last form in the
;; begin will have taken care of it (e.g. a nested begin).  But
;; checking there means that most forms can ignore out-frame-base

(define-codegen (begin varrecs . body)
  (unless out-frame-base (set! out-frame-base (codegen-frame-base cg)))
  ;; we make sure that the result goes into a register, because any
  ;; operand that depends on the frame-base might no longer be valid
  ;; if we alter the frame-base
  (codegen-into-reg (codegen-begin-non-final cg body) cg out-frame-base
                    main-reg)
  (emit-reset-frame-base cg out-frame-base)
  main-reg)

(define-codegen-discarding (begin varrecs . body)
  (unless out-frame-base (set! out-frame-base (codegen-frame-base cg)))
  (codegen-discarding (codegen-begin-non-final cg body) cg out-frame-base)
  (emit-reset-frame-base cg out-frame-base))

(define-codegen-conditional (begin varrecs . body)
  (unless out-frame-base (set! out-frame-base (codegen-frame-base cg)))
  (codegen-conditional (codegen-begin-non-final cg body) cg out-frame-base
                       tlabel flabel)
  ;; codegen-conditional should always handle the reset-frame-base
  )

;;; If

(define (codegen-if test then else cg out-frame-base codegen-clause)
  (let* ((l1 (gen-label))
         (l2 (gen-label))
         (l3 (gen-label)))
    (codegen-conditional test cg false l1 l2)
    (emit-smart-label cg l1)
    (with-saved-frame-base cg
      (emit-comment-form cg then)
      (funcall codegen-clause then)
      (emit-reset-frame-base cg out-frame-base))
    (emit-smart-jump cg l3)
    (emit-smart-label cg l2)
    (emit-comment-form cg else)
    (funcall codegen-clause else)
    (emit-reset-frame-base cg out-frame-base)
    (emit-smart-label cg l3)))

(define-codegen (if attrs test then else)
  (codegen-if test then else cg out-frame-base
             (lambda (form) (codegen-into-reg form cg out-frame-base main-reg)))
  main-reg)

(define-codegen-discarding (if attrs test then else)
  (codegen-if test then else cg out-frame-base
              (lambda (form) (codegen-discarding form cg out-frame-base))))

(define-codegen-conditional (if attrs test then else)
  (codegen-if test then else cg out-frame-base
    (lambda (form) (codegen-conditional form cg out-frame-base tlabel flabel))))

(define-codegen-conditional (quote attrs)
  (emit-reset-frame-base cg out-frame-base)
  (emit-smart-jump cg (if (quote-false? form) flabel tlabel)))

;;; Operator support

(define (codegen-operator-args cg args regs)
  (labels ((codegen-next-arg (args regs)
             (if (null? (cdr args))
                 (codegen-into-reg (car args) cg false (car regs))
                 (begin
                   (emit-frame-spill cg (codegen (car args) cg false)
                                     (car regs))
                   (codegen-next-arg (cdr args) (cdr regs))
                   (emit-frame-pop cg (car regs))))))
    (unless (null? args)
      (codegen-next-arg args regs))))

(define (trashy-codegen-into-regs cg form regs)
  (codegen-operator-args cg (cddr form) regs))

(define (trashy-codegen-general cg form constraint)
  (nconc (mapfor (arg (cddr form))
           (emit-frame-spill cg (codegen arg cg false) main-reg)
           (apply-operand-constraint cg constraint
                                     (frame-slot (codegen-frame-base cg))
                                     main-reg))
         general-registers))

(defmacro (define-operator template options . body)
  ;; define how to generate code for an operator
  (options-bind ((temp-regs ())
                 (impure false) ; this is ignored in this code generator
                 (tail-form false)
                 (temp-fixed-regs ()))
                options
    (when tail-form
      (set! body (nconc body (list false))))

    (let* ((name (car template))
           (registers-name (compound-symbol name "-registers"))
           (param-specs (mapfor (p (cdr template))
                          (if (pair? p) p (list p 'reg))))
           (param-names (mapfor (ps param-specs) (first ps))))
      (quasiquote (definitions
        (define (unquote registers-name)
          (make-registers-from-template
              (list (unquote-splicing (mapfor (ps param-specs)
                                        (if (eq? 'fixed-reg (second ps))
                                            (third ps)
                                            false)))
                    . (unquote temp-fixed-regs))
              general-registers))

        (define-codegen ((unquote name) attrs . (unquote param-names))
          (codegen-operator-args cg (cddr form) (unquote registers-name))
          (bind ((unquote-splicing param-names)
                 (unquote-splicing (mapfor (r temp-fixed-regs) (gensym)))
                 (unquote-splicing temp-regs)
                 . spare-regs)
                (unquote registers-name)
            (let* ((result main-reg))
              . (unquote body)))))))))

(defmacro (define-cc-operator template options . body)
  (let* ((name (car template))
         (registers-name (compound-symbol name "-registers"))
         (param-specs (mapfor (p (cdr template))
                              (if (pair? p) p (list p 'reg))))
         (param-names (mapfor (ps param-specs) (first ps))))
    (quasiquote (definitions
      (define-codegen ((unquote name) attrs . (unquote param-names))
        (codegen-operator-args cg (cddr form) general-registers)
        (bind ((unquote-splicing param-names) result-reg . spare-regs)
              general-registers
          (emit-prepare-convert-cc-value cg result-reg)
          (emit-convert-cc-value cg (begin . (unquote body)) result-reg)
          result-reg))

      (define-codegen-conditional ((unquote name) attrs
                                   . (unquote param-names))
        (codegen-operator-args cg (cddr form) general-registers)
        (bind ((unquote-splicing param-names) . spare-regs)
              general-registers
          (let* ((cc (begin . (unquote body))))
            (emit-smart-branch cg cc out-frame-base tlabel flabel))))))))

;;; Misc

(define-codegen (lambda attrs closure . vals)
  (codegen-lambda-todo cg form)
  (labels ((fill-slots (vals index)
             (if (null? vals)
                 (codegen-into-reg closure cg false main-reg)
                 (begin
                   (emit-frame-spill cg (codegen (car vals) cg false) main-reg)
                   (fill-slots (cdr vals) (1+ index))
                   (emit-frame-pop cg (second general-registers))
                   (emit-store-into-closure cg main-reg index
                                            (second general-registers))))))
    (fill-slots vals 0)
    main-reg))
