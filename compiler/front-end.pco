;;; The core of the compiler.  Transforms the macro-expanded source
;;; code into an annotated form ready for code generation.

;;; Here we define the sequence of program-transformation phases
;;; within the compiler (i.e. prior to the final code generation
;;; phase).

(defmacro (expand-compiler-phases . phases)
  (cons 'list
    (mapfor (ph phases)
      (quasiquote (cons (unquote (subject-language-symbol-name (car ph)))
                    (lambda (program) (unquote ph)))))))

(define compiler-phases (expand-compiler-phases
                          (simplify program)
                          (resolve-variables program ())
                          (classify-variables-top-level program)
                          (collect-closures program)
                          (introduce-boxes program)
                          (fill-closures program)))

(define (compile-program program)
  ;; Compile the program, printing the resulting assembly on standard
  ;; output
  (set! program (list* 'begin () (normalize-forms program)))
  (dolist (ph compiler-phases) (funcall (cdr ph) program))
  (codegen-program program)
  ;(formout stdout "~S~%" (debug-form program))
  )

(define (dump-program to-phase program)
  ;; Run compilation up to the given phase, then dump the program
  (set! program (list* 'begin () (normalize-forms program)))
  (let* ((done false))
    (dolist (ph compiler-phases)
      (unless done
        (funcall (cdr ph) program)
        (set! done (string-equal? to-phase (car ph))))))
  (formout-pretty stdout "~S~%" (debug-form program)))

;;; Keywords that indicate a special form where all subsequent
;;; elements are treated as normal expressions.
(define keywords-1
  '(begin if

    eq? function?

    symbol? symbol-name symbol-id raw-make-symbol

    pair? car cdr cons rplaca rplacd

    number? < <= > >= = /= + * - rem truncate ash
    logand logior logxor

    character? character-code code-character

    string? make-string string-length raw-string-address
    raw-string-ref raw-string-set! raw-string-copy

    vector? make-vector vector-length raw-vector-address
    raw-vector-ref raw-vector-set! raw-vector-copy
    raw-mem-offset-set! raw-mem-offset-ref raw-mem-ref raw-mem-set! raw-mem-copy
    raw-mem-1-offset-set! raw-mem-1-offset-ref raw-mem-1-ref raw-mem-1-set!
    raw-mem-1-copy

    raw-make-box raw-box-ref raw-box-set!

    fixnum->raw raw->fixnum

    raw-logand raw-- raw-+

    raw-args-base raw-jump-with-arg-space raw-apply-jump))

;;; Keywords that indicate a special form where the second element is
;;; also special, but all elements after that are treated as normal
;;; expressions.
(define keywords-2 '(define lambda set! quote
                     c-call raw-label raw-global-ref raw-global-set!
                     compiler-constant raw-alloc))

;;; Normalization transforms the source program so that every form
;;; begins with a distinguishing keyword (i.e. resolving function
;;; calls, variable references, and self-quoting forms).
;;; "definitions" forms are also spliced into their containing bodies
;;; at this point.

(define keywords-symtab (make-symboltable))
(dolist (kw keywords-1) (symboltable-set! keywords-symtab kw 1))
(dolist (kw keywords-2) (symboltable-set! keywords-symtab kw 2))
(symboltable-set! keywords-symtab 'definitions 'definitions)

(define (normalize form)
  (cond ((pair? form)
         (let* ((keyword (car form))
                (kwtype (and (symbol? keyword)
                             (symboltable-ref keywords-symtab keyword))))
             (cond ((not kwtype) (list (list* 'call () (normalize-forms form))))
                   ((eq? kwtype 2) (normalize-2 form))
                   ((eq? kwtype 1) (normalize-1 form))
                   (true (normalize-forms (cdr form)))))) ; definitions
        ((symbol? form) (list (list 'ref form)))
        (true (list (list 'quote form)))))

(define (normalize-forms forms)
  (flatten*-mapfor (form forms) (normalize form)))

(define (normalize-1 form)
  (list (list* (car form) () (normalize-forms (cdr form)))))

(define (normalize-2 form)
  (list (list* (car form) (copy-tree (cadr form))
               (normalize-forms (cddr form)))))

;;; Utils

(define (attr-ref attrs attr)
  (let* ((a (assoc attr attrs)))
    (unless a (error "no attribute ~S in ~S" attr attrs))
    (cdr a)))

(define (attr-ref-defaulting attrs attr default)
  (let* ((a (assoc attr attrs)))
    (if a (cdr a) default)))

(define (attr-set! attrs attr val)
  (let* ((a (assoc attr attrs)))
    (if a (begin (rplacd a val)
                 attrs)
        (acons attr val attrs))))


(define (form-attr form attr)
  (attr-ref (second form) attr))

(define (form-attr-defaulting form attr default)
  (attr-ref-defaulting (second form) attr default))

(define (form-attr-set! form attr val)
  (rplaca (cdr form) (attr-set! (second form) attr val))
  val)

;; The representation of a variable.  The "simplify" and
;; "resolve-variables" phases replace all variable names with
;; references to varrecs.
(define-struct varrec ((constructor make-varrec-aux name))
  name ; name as a symbol
  mode ; access mode: self, top-level, closure, param or local
  index ; index of closure/parameter/frame/etc. slot
  misc ; available for per-phase use
  access ; access class: read-only, written or early-function
  value ; the defined value of this variable, if not written
  origin ; origin varrec for closure variables
  source ; source varrec for closure variables
  boxed ; is the variable boxed?
  )

(define (make-varrec name)
  (let* ((varrec (make-varrec-aux name)))
    (varrec-set-origin! varrec varrec)
    varrec))

(define (varrec-top-level? varrec)
  (eq? 'top-level (varrec-mode varrec)))

(define (varrec-boxed? varrec)
  (varrec-boxed (varrec-origin varrec)))


(define (overwrite-form form replacement)
  (rplaca form (car replacement))
  (rplacd form (cdr replacement)))


(define (quoted-unspecified)
  (list 'quote #u))

(define-trivial-walker simplify ())

(define-simplify (begin attrs . body)
  ;; replace an empty begin with unspecified
  (if (null? body)
      (overwrite-form form (quoted-unspecified))
      (simplify-recurse form)))

(define-simplify (lambda params . body)
  ;; Look for a dotted param list indicating a varargs param, and
  ;; remove it from the parameter list, so that the parameter list is
  ;; always undotted.
  (let* ((vararg false)
         (nparams 0))
    (labels ((undot (params)
               (set! nparams (1+ nparams))
               (rplaca params (make-varrec (car params)))
               (if (pair? (cdr params))
                   (undot (cdr params))
                   (begin
                     (set! vararg (cdr params))
                     (rplacd params ())))))
      (if (pair? params)
          (undot params)
          (begin
            (set! vararg params)
            (set! params ())))

      (cond ((null? vararg)
             (set! vararg false))
            ((not (symbol? vararg))
             (error "strange dotted varargs parameter ~S" vararg)))

      ;; wrapped-begin is the begin form that surrounds the original
      ;; lambda body.  We stash it in an attribute, because the
      ;; introduce-boxes phase needs to get access to it later.
      (let* ((wrapped-begin (normalize-lambda-body body))
             (wrapped-body (wrap-lambda-body wrapped-begin nparams vararg)))
        (rplacd form (list (list (cons 'params params)
                                 (cons 'vararg vararg)
                                 (cons 'wrapped-begin wrapped-begin))
                           wrapped-body))
        (simplify wrapped-body)))))

(define (normalize-lambda-body body)
  ;; Handle the empty-body case of a lambda, and make sure the body is
  ;; inside a begin form
  (list* 'begin () (if (null? body)
                       (list (quoted-unspecified))
                       body)))

(define (wrap-lambda-body wrapped-begin nparams vararg)
  ;; wrap a lambda body with code required to check that the number of
  ;; arguments matches the number of parameters, or to handle varargs
  (if vararg
      (quasiquote
        (begin ()
               (define raw-arg-count (arg-count ()))
               (define (unquote vararg) (call () (ref handle-varargs)
                                              (quote (unquote nparams))
                                              (ref raw-arg-count)
                                              (raw-args-base ())))
               (varargs-return () (ref raw-arg-count)
                               (unquote wrapped-begin))))
      (quasiquote
        (return ((nparams . (unquote nparams)))
                (unquote wrapped-begin)))))

(define-simplify (define var . val)
  ;; Normalize defines to always include a value
  (if (null? val)
      (rplacd (cdr form) (list (quoted-unspecified)))
      (simplify (car val))))

(define-simplify (if attrs test then . else)
  (when (null? else)
    (rplacd (cdddr form) (list (quoted-unspecified))))
  (simplify-recurse form))

;;; return propogation and tail call identification

(define-walker propagate (operator))

(define (propagate-recurse form operator)
  ;; merge the operator into the form.
  (overwrite-form form (append operator (list (cons (car form) (cdr form))))))

(define-simplify (return attrs body)
  (simplify body)
  (overwrite-form form body)
  (propagate body (list 'return attrs)))

(define-simplify (varargs-return attrs arg-count body)
  (simplify body)
  (overwrite-form form body)
  (propagate body (list 'varargs-return attrs arg-count)))

(define (propagate-last forms operator)
  (if (null? (cdr forms))
      (let* ((form (car forms)))
        ;; if the final form is a define, we need to take special
        ;; action to make sure it remains a subform of the enclosing
        ;; begin: we append a reference to the variable to the end of
        ;; the body, and propagate into that.
        (when (eq? 'define (first form))
          (set! form (list 'ref (second form)))
          (rplacd forms (list form)))
        (propagate form operator))
      (propagate-last (cdr forms) operator)))

(define-propagate (begin attrs . body)
  (propagate-last body operator)

  ;; The definition of bind in runtime.pco, as used by the
  ;; define-propogate macro, is currently a bit broken: 'body' here
  ;; does not share structure with the form from the source program.
  ;; Rather, it is a list containing the same elements.  We might have
  ;; manipulated 'body' above, so order not to discard it, we patch
  ;; 'body' back into the form.
  (rplacd (cdr form) body))

(define-propagate (if attrs test then else)
  ;; we need to avoid aliasing operator, so one of these needs to copy
  (propagate then operator)
  (propagate else (copy-tree operator)))

(define tail-call-types
  (list (cons 'return 'tail-call)
        (cons 'varargs-return 'varargs-tail-call)))

(define-propagate (call attrs . args)
  (let* ((tc (assoc (first operator) tail-call-types)))
    (if tc
      (overwrite-form form (list* (cdr tc) (append (second operator) attrs)
                                  (append (cddr operator) args)))
      (propagate-recurse form operator))))

;;; Convert all variable names (in defines, refs, set!s) to references
;;; to varrecs.  Also, attach to each 'begin' form a list of all
;;; varrecs it defines.

(define-trivial-walker resolve-variables (frames))

(define-resolve-variables (begin attrs . body)
  (let* ((frame false)
         (varrecs ()))
    (dolist (subform body)
      (when (eq? 'define (car subform))
        (let* ((var (second subform))
               (varrec (make-varrec var)))
          (unless frame (set! frame (make-symboltable)))
          (when (symboltable-ref frame var)
            (error "multiple definitions for ~S" var))
          (symboltable-set! frame var varrec)
          (rplaca (cdr subform) varrec)
          (push varrec varrecs))))
    (rplaca (cdr form) varrecs)
    (when frame (set! frames (cons frame frames)))
    (resolve-variables-forms body frames)))

(define-resolve-variables (lambda attrs body)
  (let* ((frame (make-symboltable)))
    (dolist (varrec (attr-ref attrs 'params))
      (symboltable-set! frame (varrec-name varrec) varrec))
    (resolve-variables body (cons frame frames))))

(define (resolve-variable var frames)
  (let* ((varrec (symboltable-list-ref frames var)))
    (unless varrec (error "unbound variable ~S" var))
    varrec))

(define-resolve-variables (ref var)
  (rplaca (cdr form) (resolve-variable var frames)))

(define-resolve-variables (set! var val)
  (rplaca (cdr form) (resolve-variable var frames))
  (resolve-variables val frames))

;;; Classify all variables into read-only and (potentially)
;;; read-write, or early function (a read-only variable with a
;;; function value that is potentially read before its definition).
;;;
;;; During classification, a simple state machine operates for each
;;; variable, with transitions triggered by forms that refer to that
;;; variable.

(define-trivial-walker classify-variables ())

(defconstant varrec-written-bit 1)
(defconstant varrec-early-function-bit 2)
(defconstant varrec-refs-bit 4)
(defconstant varrec-early-uses-bit 8)

(define (update-varrec-state varrec bit)
  (varrec-set-access! varrec (logior bit (varrec-access varrec))))

(define-classify-variables (ref varrec)
  (update-varrec-state varrec varrec-refs-bit))

(define-classify-variables (set! varrec val)
  (classify-variables val)
  (update-varrec-state varrec varrec-written-bit))

(define-classify-variables (define varrec val)
  (classify-variables val)
  ;; Record the value in the varrec.  We don't know if the varrec is
  ;; read-only at this point, but if it turns out not to be, we clear
  ;; this later on.
  (varrec-set-value! varrec val)
  (let* ((access (varrec-access varrec)))
    ;; work out early-uses/early-function status
    (when (if (not (eq? 'lambda (car val)))
              (/= 0 (logand access (logior varrec-written-bit varrec-refs-bit)))
              (begin
                (form-attr-set! val 'self varrec)
                (cond ((/= 0 (logand access varrec-written-bit))
                       true)
                      ((/= 0 (logand access varrec-refs-bit))
                       (set! access (logior access varrec-early-function-bit))
                       false)
                      (true
                       false))))
      ;; It's an early-uses.  So we turn the "define" into a "set!",
      ;; annd we'll introduce a "(define blah undefined)" at the start
      ;; of the block in classify-block-variables.
      (set! access (logior access varrec-early-uses-bit varrec-written-bit))
      (rplaca form 'set!))
    (varrec-set-access! varrec access)))

(define (classify-block-variables varrecs init mode form)
  (dolist (varrec varrecs)
    (varrec-set-access! varrec init)
    (varrec-set-mode! varrec mode))
  (classify-variables-recurse form)
  (dolist (varrec varrecs)
    (let* ((access (varrec-access varrec)))
      (when (/= 0 (logand access varrec-early-uses-bit))
        (rplacd (cdr form) (cons (list 'define varrec (quoted-unspecified))
                                 (cddr form))))
      (when (/= 0 (logand access varrec-written-bit))
        ;; Remove value/lambda-self cross references
        (let* ((val (varrec-value varrec)))
          (when val
            (varrec-set-value! varrec false)
            (when (eq? 'lambda (car val))
              (form-attr-set! val 'self false))))))))

(define-classify-variables (begin varrecs . body)
  (classify-block-variables varrecs 0 'local form))

;;; The program should always consist of a begin form at this point
(define (classify-variables-top-level program)
  (classify-block-variables (second program) 0 'top-level program))

(define-classify-variables (lambda attrs body)
  (form-attr-set! form 'self false)
  (classify-block-variables (attr-ref attrs 'params) varrec-refs-bit 'param
                            form))

(define (varrec-written? varrec)
  (/= 0 (logand varrec-written-bit (varrec-access varrec))))

(define (varrec-early-function? varrec)
  (/= 0 (logand varrec-early-function-bit (varrec-access varrec))))

;;; Make the closure list for each lambda (i.e. variables unbound
;;; within the lambda body).  After this, lambdas look like:
;;;
;;; (lambda (...) ... (fv ...) ...)
;;; => (lambda ((closure (fv (source fv ...) ...)) ...) ... (fv ...) ...)
;;;
;;; Also adds the boxed attribute to origin varrecs.

;;; When we reach this phase, all uses of a variable refer to the same
;;; varrec.  This phase determines which uses can access the variable
;;; directly, and which need to go via a closure.  The former get the
;;; "origin" varrec (this has an origin attribute of false).  The
;;; latter get new varrecs, with their origin attribute pointing to
;;; the origin varrec.
;;;
;;; This is implemented by adding a closure stack to each origin
;;; varrec.  The closure stack is an alist from the binding form depth
;;; to the appropriate varrec for uses within that binding form.

(define (make-local-varrec origin mode)
  (let* ((varrec (make-varrec (varrec-name origin))))
    (varrec-set-origin! varrec origin)
    (varrec-set-access! varrec (varrec-access origin))
    (varrec-set-mode! varrec mode)
    varrec))

(define (resolve-closure-var varrec mode depth closure-cell)
  (let* ((closure-stack (varrec-misc varrec)))
    (cond ((not closure-stack)
           varrec)
          ((= depth (caar closure-stack))
           (cdar closure-stack))
          (true
           (let* ((local-varrec (make-local-varrec varrec mode)))
             (varrec-set-misc! varrec (acons depth local-varrec closure-stack))
             (varrec-set-boxed! varrec (varrec-written? varrec))
             (rplaca closure-cell (cons local-varrec (car closure-cell)))
             local-varrec)))))

(define-trivial-walker collect-closures-aux (depth closure-cell))

(define-collect-closures-aux (ref varrec)
  (rplaca (cdr form) (resolve-closure-var varrec 'closure depth closure-cell)))

(define-collect-closures-aux ((define set!) varrec val)
  (rplaca (cdr form) (resolve-closure-var varrec 'closure depth closure-cell))
  (collect-closures-aux val depth closure-cell))

(define (collect-closures-body form varrecs depth closure-cell)
  (dolist (varrec varrecs)
    (varrec-set-misc! varrec (if (varrec-top-level? varrec)
                                 false
                                 (acons depth varrec ()))))
  (collect-closures-aux-recurse form depth closure-cell)
  (dolist (varrec varrecs)
    (varrec-set-misc! varrec false)))

(define-collect-closures-aux (begin varrecs . body)
  (collect-closures-body form varrecs depth closure-cell))

(define-collect-closures-aux (lambda attrs body)
  (let* ((local-closure-cell (cons () ()))
         (self-closure-cell (cons () ())))
    ;; if we have an unwritten self varrec, we don't want it to get
    ;; captured in the closure.  And we need to distinguish it from
    ;; the origin varrec, used to refer to the function outside of the
    ;; function.  So we create a "self-closure" varrec, to refer to
    ;; the function inside the function.
    (let* ((self-varrec (attr-ref attrs 'self)))
      (when self-varrec
        (form-attr-set! form 'self
          (resolve-closure-var self-varrec 'self (1+ depth)
                               self-closure-cell))))

    (collect-closures-body form (attr-ref attrs 'params) (1+ depth)
                           local-closure-cell)
    (form-attr-set! form 'closure (car local-closure-cell))
    (dolist (local-varrec (append (car self-closure-cell)
                                  (car local-closure-cell)))
      (let* ((origin-varrec (varrec-origin local-varrec)))
        (varrec-set-misc! origin-varrec (cdr (varrec-misc origin-varrec)))
        (varrec-set-source! local-varrec
                            (resolve-closure-var origin-varrec 'closure
                                                 depth closure-cell))))))

(define (collect-closures form)
  (collect-closures-aux form 0 ()))

;;; Introduce storage boxes
;;;
;;; We need storage boxes for variables that get written to *and* get
;;; stashed into closures (read-only variables can be stored directly
;;; in closures; written variables that don't get put in closures can
;;; just live on the stack).  So we rewrite all set!s and refs for
;;; such variables to go via the storage boxes.
;;;
;;; For variables introduced by begin, we also need to allocate the
;;; storage boxes, but classify-variables ensured that a define always
;;; precedes any other use of a variable, so we simply patch the
;;; define to do the raw-make-box.
;;;
;;; Variables introduced by lambdas are more complicated, since we need
;;; to copy the original parameter value into the storage box.  So we
;;; have to rename the original parameter.  This involves wrapping the
;;; lambda body with a begin form.

(define-trivial-walker introduce-boxes ())

(define-introduce-boxes (ref varrec)
  (when (varrec-boxed? varrec)
    (overwrite-form form
                    (quasiquote (raw-box-ref () (ref (unquote varrec)))))))

(define-introduce-boxes (set! varrec val)
  (when (varrec-boxed? varrec)
    (overwrite-form form (quasiquote (raw-box-set! () (ref (unquote varrec))
                                                   (unquote val)))))
  (introduce-boxes val))

(define-introduce-boxes (define varrec val)
  (when (varrec-boxed? varrec)
    (rplaca (cddr form) (list 'raw-make-box () val)))
  (introduce-boxes val))

(define-introduce-boxes (lambda attrs body)
  ;; Where a parameter should be boxed, add a set! form at the start
  ;; of the begin to box up the parameter value and then store a
  ;; reference to the box back into the parameter.
  (introduce-boxes body)

  ;; to avoid problematic interactions with the fill-lambdas
  ;; phase below, we enclose the existing body of wrapped-begin
  ;; inside another begin, prepending the boxing statements.
  (let* ((wrapped-begin (attr-ref attrs 'wrapped-begin))
         (body false))
    (dolist (varrec (attr-ref attrs 'params))
      (when (varrec-boxed? varrec)
        (unless body
          (set! body (list (list* 'begin (second wrapped-begin)
                                 (cddr wrapped-begin)))))
        (set! body (cons (list 'set! varrec
                               (list 'raw-make-box () (list 'ref varrec)))
                         body))))
    (when body
      (rplaca (cdr wrapped-begin) ())
      (rplacd (cdr wrapped-begin) body))))

;;; The fill-closures phase elaborates lambda forms to produce the
;;; code to allocate and initialize closures.
;;;
;;; In particular, we need to handle mutual references, e.g. as in
;;; mutual recursion between two functions.  We can handle this by
;;; allocating multiple closures, and then assigning their slots to
;;; correspond to represent the mutual references.  But there is a
;;; problem with naive implementations of this idea: Stale values in a
;;; newly allocated closure could cause problems for the GC.  So we
;;; need to initialize all slots immediately after allocation (before
;;; anything that could trigger a GC).
;;;
;;; One approach would be to initialise the slots with 'unspecified'
;;; immediately after allocation, and then assign their true values
;;; later on.  So for example, if closures A and B are to have mutual
;;; references to each other, we allocate A, initialize its slots to
;;; 'unspecified', allocate B, initialize it, then assign the
;;; references into A and B.
;;;
;;; The problem with that approach is that it involves redundant
;;; stores into closures: We initialize a slot, and then assign it.
;;; Some double stores are necessary to resolve the circularities of
;;; mutual references.  But in most cases, the value to store in a
;;; closure slot is known at the time of the 'define' of the
;;; associated lambda.  Even when there are circularities, we only
;;; need double stores to break them: E.g. allocate A, initialize the
;;; relevant slot to 'unspecified', allocate B, store the reference to
;;; A into B, and store the reference to B into A.
;;;
;;; The fill-closures phase implements a pragmatic approach to
;;; avoiding redundant stores.  So, when initializing a closure, for
;;; each slot in then closure, we consider whether the variable value
;;; is already known (i.e. is not due to a later define).  If so, we
;;; arrange for it to be stored directly into the closure.  Otherwise,
;;; we arrange store 'undefined', and mark the source varrec to update
;;; the closure when the define is encountered.

(define-trivial-walker fill-closures ())

(define-fill-closures (begin varrecs . body)
  (dolist (varrec varrecs)
    ;; The "misc" field in a varrec is used to store the list of
    ;; dependent fixups.  We also need a distinguished value to mean
    ;; that dependent fixups have already been processed (i.e. the
    ;; "define" was encountered).  And at the end of the phase, we
    ;; want to leave the "misc" field set to falsey.  Furthermore, CL
    ;; conflates nil and false.  So the no-fixups symbol is used to
    ;; indicate no fixups, and nil/false indicates that the fixups
    ;; have been processed.
    (varrec-set-misc! varrec 'no-fixups))

  ;; Move the define-lambdas to the front of the begin body.  This is
  ;; because the approach we use for handling mutual references
  ;; between lambdas only works for named lambdas.  So we move all the
  ;; named lambdas up-front, so that references from unnamed lambdas
  ;; to them are straightforward.
  (set! body (move-define-lambdas-to-front body))
  (rplacd (cdr form) body)
  (fill-closures-forms body))

(define (move-define-lambdas-to-front forms)
  (let* ((dls ())
         (others ()))
    (labels ((partition (l)
               ;; Partition l into define-lambda forms in `dls` and
               ;; other form in `others`.  The order of the forms is
               ;; reversed in the process.
               (let* ((form (car l))
                      (tail (cdr l)))
                 (if (and (eq? 'define (first form))
                          (eq? 'lambda (first (third form))))
                     (begin
                       (set! dls (rplacd l dls))
                       (if (not (null? tail))
                           (partition tail)
                           ;; the last form in the body was a define
                           ;; lambda that we put into dls. So unless
                           ;; others is empty, we need to retrieve the
                           ;; lambda value as the last form in others
                           ;; in order for the begin to yield the
                           ;; correct value.
                           (unless (null? others)
                             (set! others (cons (list 'ref (second form))
                                                others)))))
                     (begin
                       (set! others (rplacd l others))
                       (unless (null? tail)
                         (partition tail))))))
             (nrev (l onto)
               ;; Reverse a list destructively, prepending the
               ;; reversed list onto `onto`.
               (if (not (null? l))
                   (let* ((tail (cdr l)))
                     (rplacd l onto)
                     (nrev tail l))
                   onto)))
      ;; we know the body of a begin is non-empty
      (partition forms)
      (nrev dls (nrev others ())))))

(define-fill-closures (define varrec val)
  (if (eq? 'lambda (car val))
      (fill-closures-define-lambda varrec val)
      (fill-closures val))
  (let* ((fixups (varrec-misc varrec)))
    (varrec-set-misc! varrec false)
    (when (and fixups (not (eq? 'no-fixups fixups)))
      (rplaca (cddr form) (fixup-closures fixups val)))))

(define (fixup-closures fixups res)
  (if (null? fixups)
      res
      (fixup-closures (cdr fixups)
                   (quasiquote (set-closure! ((index . (unquote (cdar fixups))))
                                             (ref (unquote (caar fixups)))
                                             (unquote res))))))

(define-fill-closures (lambda attrs body)
  (let* ((len 0)
         (vals (mapfor (cvarrec (form-attr form 'closure))
                 (set! len (1+ len))
                 (list 'ref (varrec-source cvarrec)))))
    (decompose-lambda form len vals)))

(define (fill-closures-define-lambda varrec form)
  (let* ((body (third form))
         (index 0)
         (vals (mapfor (cvarrec (form-attr form 'closure))
                 (let* ((source (varrec-source cvarrec))
                        (val (closure-slot-value varrec index source)))
                   (set! index (1+ index))
                   val))))
    (decompose-lambda form index vals)))

(define (decompose-lambda form len closure-vals)
  (let* ((body (third form)))
    (form-attr-set! form 'body body)
    (if (= len 0)
        (begin
          (rplaca form 'static-lambda)
          (rplacd (cdr form) ()))
        (rplacd (cdr form) (cons (list 'alloc-closure
                                       (list (cons 'length len)
                                             (cons 'lambda form)))
                                 closure-vals)))
    (fill-closures body)))

(define (closure-slot-value varrec index source)
  (let* ((fixups (varrec-misc source)))
    (if (not fixups)
        (list 'ref source)
        (begin
          (when (eq? 'no-fixups fixups)
            (set! fixups ()))

          (varrec-set-misc! source (acons varrec index fixups))
          (quoted-unspecified)))))

(define (func-lambda func)
  (when (eq? 'ref (first func))
    (let* ((val (varrec-value (varrec-origin (second func)))))
      (when val (set! func val))))
  (and (member? (first func) '(lambda static-lambda))
       func))

(define-fill-closures ((call tail-call) attrs func . args)
  (let* ((l (func-lambda func)))
    (when l
      (let* ((expected (length (form-attr l 'params)))
             (nargs (length args))
             (at-least ""))
        (when (if (form-attr l 'vararg)
                  (begin
                    (set! at-least "at least ")
                    (< nargs expected))
                  (/= nargs expected))
          (let* ((varrec (form-attr-defaulting l 'self false)))
            (error "wrong number of arguments in call to ~A (expected ~A~D, got ~D)"
                   (if varrec (varrec-name varrec) "anonymous function")
                   at-least expected nargs))))))
  (fill-closures-recurse form))

;;; Produce a debug form

(define (debug-forms forms)
  (mapfor (form forms) (debug-form form)))

(define (debug-form-recurse form)
  (list* (car form) (cadr form) (debug-forms (cddr form))))

(define-walker debug-form ())

(define (debug-uniquify-varrec varrec)
  (cond ((not (vector? varrec))
         (unless (symbol? varrec) (error "strange varrec ~S" varrec))
         varrec)
        ((pair? (varrec-name varrec))
         (varrec-name varrec))
        (true
         (varrec-set-name! varrec (cons (varrec-name varrec) (gensym)))
         (varrec-set-misc! varrec (if (varrec-misc varrec)
                                      'varrec-misc-occupied
                                      false))
         (varrec-set-origin! varrec
                            (if (eq? (varrec-origin varrec) varrec)
                                false
                                (debug-uniquify-varrec (varrec-origin varrec))))
         (when (varrec-source varrec)
           (varrec-set-source! varrec
                               (debug-uniquify-varrec (varrec-source varrec))))
         (when (varrec-value varrec)
           (varrec-set-value! varrec (list (car (varrec-value varrec)) 'etc)))
         varrec)))

(define (debug-uniquify-varrecs varrecs)
  (mapfor (varrec varrecs) (debug-uniquify-varrec varrec)))

(define-debug-form (begin varrecs . body)
  (list* 'begin (debug-uniquify-varrecs varrecs) (debug-forms body)))

(define (debug-lambda form show-body)
    ;; Need to process the body attr after attrs introducing varrecs.
  (let* ((body-attr false)
         (attrs (flatten*-mapfor (attr (second form))
                  (let* ((key (car attr))
                         (val (cdr attr)))
                    (cond ((not val)
                           ())
                          ((or (eq? key 'params) (eq? key 'closure))
                           (list (cons key (debug-uniquify-varrecs val))))
                          ((eq? key 'self)
                           (list (cons key (debug-uniquify-varrec val))))
                          ((eq? key 'wrapped-begin)
                           (list (cons key 'etc)))
                          ((eq? key 'body)
                           (list (if show-body
                                     (set! body-attr (cons key val))
                                     '(body . etc))))
                          (true
                           (list attr)))))))
    (when body-attr
      (rplacd body-attr (debug-form (cdr body-attr))))
    (list* (car form) attrs (if show-body
                                (debug-forms (cddr form))
                                'etc))))

(define-debug-form ((lambda static-lambda) attrs . body)
  (debug-lambda form true))

(define-debug-form (alloc-closure attrs)
  (list 'alloc-closure (mapfor (attr attrs) (if (eq? 'lambda (car attr))
                                                '(lambda . etc)
                                                attr))))

(define-debug-form ((define set!) varrec . val)
  (list* (car form) (debug-uniquify-varrec varrec) (debug-forms val)))

(define-debug-form (ref varrec)
  (list 'ref (debug-uniquify-varrec varrec)))

;;; Produce a comment form

(define (comment-forms forms)
  (mapfor (form forms) (comment-form form)))

(define (comment-form-recurse form)
  (cons (car form) (comment-forms (cddr form))))

(define-walker comment-form ())

(define-comment-form (begin . rest) '(begin etc.))
(define-comment-form (if attrs test then else)
  (list 'if (comment-form test) 'etc.))

(define (comment-form-var-name varrec-or-attrs)
  (when (pair? varrec-or-attrs)
    (set! varrec-or-attrs (attr-ref varrec-or-attrs 'varrec)))
  (varrec-name varrec-or-attrs))

(define-comment-form (ref attrs)
  (list 'ref (comment-form-var-name attrs)))
(define-comment-form ((set! define) attrs val)
  (list (car form) (comment-form-var-name attrs) (comment-form val)))

(define-comment-form (quote val)
  (list 'quote (if (string? val) (escape-string-literal val) val)))

(define-comment-form (raw attrs) form)

(define-comment-form (ash-imm attrs n)
  (list 'ash-imm (acons 'shift (attr-ref attrs 'shift) ()) (comment-form n)))

(define-comment-form ((call tail-call varargs-tail-call) attrs . args)
  (list* (first form)
         (mapfor (attr attrs)
           (cond ((eq? 'lambda (car attr)) '(lambda etc))
                 ((eq? 'func (car attr)) (cons 'func (comment-form (cdr attr))))
                 (true attr)))
         (comment-forms args)))
