;;; More-or-less the simplest code generation strategy that could
;;; possibly work

(define-walker codegen (cg out-frame-base))
(define (codegen-recurse form cg out-frame-base)
  (error "codegen on unknown form ~S" (car form)))


(define main-reg (first general-registers))

(define (codegen-into-reg form cg out-frame-base reg)
  (emit-mov-maybe cg (codegen form cg out-frame-base) reg))

(defmacro (define-codegen-discarding template . body)
  (quasiquote (define-codegen (unquote template)
                (unquote-splicing body)
                false)))

;;; codegen functions called from outside this file

(defmacro (trashy-codegen form cg out-frame-base)
  (quasiquote (codegen (unquote form) (unquote cg) (unquote out-frame-base))))

(defmacro (trashy-codegen-discarding form cg out-frame-base)
  (quasiquote (codegen (unquote form) (unquote cg) (unquote out-frame-base))))

(defmacro (trashy-codegen-into-reg form cg out-frame-base reg)
  (quasiquote (codegen-into-reg (unquote form) (unquote cg)
                                (unquote out-frame-base) (unquote reg))))

(defmacro (define-trashy-codegen template . body)
  (quasiquote (define-codegen (unquote template) (unquote-splicing body))))

;;; Begin

(define (codegen-begin forms cg out-frame-base)
  (emit-comment-form cg (car forms))
  (if (null? (cdr forms))
      (codegen (car forms) cg out-frame-base)
      (begin
        (codegen (car forms) cg false)
        (codegen-begin (cdr forms) cg out-frame-base))))

(define-codegen (begin varrecs . body)
  (unless out-frame-base (set! out-frame-base (codegen-frame-base cg)))
  (let* ((res (codegen-begin body cg out-frame-base)))
    ;; we make sure that the result goes into a register, because any
    ;; operand that depends on the frame-base might no longer be valid
    ;; if we alter the frame-base
    (unless (or (not res) (register? res))
      (emit-mov cg res main-reg)
      (set! res main-reg))
    (emit-reset-frame-base cg out-frame-base)
    res))

;;; If

(define (emit-mov-to-main-reg cg oper)
  (when oper (emit-mov-maybe cg oper main-reg)))

(define-codegen (if attrs test then else)
  (let* ((l1 (gen-label))
         (l2 (gen-label))
         (l3 (gen-label)))
    (if (eq? (car test) 'quote)
        (emit-smart-jump cg (if (quote-false? test) l2 l1))
        (emit-branch-on-operand cg (codegen test cg false) false
                                l1 l2))
    (emit-smart-label cg l1)
    (with-saved-frame-base cg
      (emit-comment-form cg then)
      (emit-mov-to-main-reg cg (codegen then cg out-frame-base))
      (emit-reset-frame-base cg out-frame-base))
    (emit-smart-jump cg l3)
    (emit-smart-label cg l2)

    (emit-comment-form cg else)
    (emit-mov-to-main-reg cg (codegen else cg out-frame-base))
    (emit-reset-frame-base cg out-frame-base)

    (emit-smart-label cg l3)
    main-reg))

;;; Operator support

(define (codegen-operator-args cg args regs)
  (labels ((codegen-next-arg (args regs)
             (if (null? (cdr args))
                 (codegen-into-reg (car args) cg false (car regs))
                 (begin
                   (emit-frame-push cg (codegen (car args) cg false))
                   (codegen-operator-args cg (cdr args) (cdr regs))
                   (emit-frame-pop cg (car regs))))))
    (unless (null? args)
      (codegen-next-arg args regs))))

(defmacro (define-operator template options . body)
  ;; define how to generate code for an operator
  (options-bind ((temp-regs ())
                 (tail-form false)
                 (temp-fixed-regs ()))
                options
    (when tail-form
      (set! body (nconc body (list false))))

    (let* ((name (car template))
           (registers-name (compound-symbol name "-registers"))
           (param-specs (mapfor (p (cdr template))
                          (if (pair? p) p (list p 'reg))))
           (param-names (mapfor (ps param-specs) (first ps))))
      (quasiquote (definitions
        (define (unquote registers-name)
          (make-registers-from-template
              (list (unquote-splicing (mapfor (ps param-specs)
                                        (if (eq? 'fixed-reg (second ps))
                                            (third ps)
                                            false)))
                    (unquote-splicing temp-fixed-regs))
              general-registers))

        (define-codegen ((unquote name) attrs (unquote-splicing param-names))
          (codegen-operator-args cg (cddr form) (unquote registers-name))
          (bind ((unquote-splicing param-names)
                 (unquote-splicing temp-fixed-regs)
                 (unquote-splicing temp-regs)
                 . spare-regs)
                (unquote registers-name)
            (let* ((result main-reg))
              (unquote-splicing body)))))))))

(defmacro (define-cc-operator template options . body)
  (quasiquote
    (define-operator (unquote template) ((temp-regs reg))
      (emit-prepare-convert-cc-value cg reg)
      (emit-convert-cc-value cg (begin (unquote-splicing body)) reg)
      reg)))

;;; Misc

(define (codegen-call-args cg func args)
  (dolist (arg (reverse args))
    (emit-frame-push cg (codegen arg cg false)))
  (unless (func-no-closure func)
    (codegen-into-reg func cg false %closure)))

(define-codegen (fill-closure attrs closure . refs)
  (labels ((fill-slots (refs index)
             (if (null? refs)
                 (codegen-into-reg closure cg false main-reg)
                 (begin
                   (emit-frame-push cg (codegen (car refs) cg false))
                   (fill-slots (cdr refs) (1+ index))
                   (emit-frame-pop cg (second general-registers))
                   (emit-store-into-closure cg main-reg index
                                            (second general-registers))))))
    (fill-slots refs 0)
    main-reg))
