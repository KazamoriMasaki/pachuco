;;; Intepreter/compiler driver code

(define (read-file-to-buffer file buf)
  (let* ((eof (cons () ())))
    (with-open-file-for-reading (s file)
      (labels ((read-forms ()
                 (let* ((form (read s eof)))
                   (unless (eq? form eof)
                     (buffer-add buf form)
                     (read-forms)))))
        (read-forms)))))

(define (read-file file)
  (let* ((buf (make-buffer)))
    (read-file-to-buffer file buf)
    (buffer-list buf)))

(define (make-initial-dual-env)
  (let* ((eval-env (make-initial-interpreter-env)))
    (cons (make-initial-macro-env) eval-env)))

(define (expand-files files target)
  (let* ((dual-env (make-initial-dual-env)))
    (dolist (f files)
      (let* ((no-interp (if (string-equal? "no-interp!" (substring f 0 10))
                            (begin
                              (set! f (substring f 10 (- (string-length f) 10)))
                              true)
                            false)))
        (dolist (form (read-file f))
          (let* ((expanded (expand-body-form form dual-env)))
            (funcall target expanded)
            (unless no-interp (eval-body-form expanded (cdr dual-env)))))))
    dual-env))

(define (do-interpret-files files form)
  (let* ((dual-env (expand-files files (lambda (expanded)))))
    (eval-form form (cdr dual-env))))

(define (do-expand-files files)
  (expand-files files (lambda (expanded)
                        (formout-pretty stdout "~S~%" expanded))))

(define (do-compile-files files form)
  (let* ((program (make-buffer)))
    (expand-files files (lambda (expanded) (buffer-add program expanded)))
    (buffer-add program form)
    (compile-program (buffer-list program))))

(define (do-dump-program to-phase files form)
  (let* ((program (make-buffer)))
    (expand-files files (lambda (expanded) (buffer-add program expanded)))
    (buffer-add program form)
    (dump-program to-phase (buffer-list program))))

